{"version":3,"sources":["bobba/imagers/furniture/FurniImager.ts","bobba/graphics/MainEngine.ts","bobba/graphics/GenericSprites.ts","bobba/communication/protocol/ClientMessage.ts","bobba/communication/protocol/OpCodes/ClientOpCodes.ts","bobba/communication/outgoing/rooms/RequestMovement.ts","bobba/communication/outgoing/rooms/RequestFurniInteract.ts","bobba/imagers/furniture/FurniBase.ts","bobba/imagers/furniture/FurniAsset.ts","bobba/imagers/furniture/Atlas.ts","bobba/navigator/RoomData.ts","bobba/communication/outgoing/rooms/RequestFurniPickUp.ts","bobba/rooms/items/RoomItem.ts","bobba/communication/outgoing/rooms/RequestFurniMove.ts","bobba/rooms/items/FloorItem.ts","bobba/rooms/RoomEngine.ts","bobba/imagers/avatars/AvatarInfo.ts","bobba/imagers/misc/Silhouettes.ts","bobba/rooms/users/AvatarContainer.ts","bobba/communication/outgoing/rooms/RequestLookAt.ts","bobba/rooms/users/RoomUser.ts","bobba/rooms/users/RoomUserManager.ts","bobba/rooms/items/WallItem.ts","bobba/communication/outgoing/rooms/RequestFurniPlace.ts","bobba/rooms/items/RoomItemManager.ts","bobba/rooms/chats/Chat.ts","bobba/rooms/chats/ChatManager.ts","bobba/communication/outgoing/rooms/RequestChat.ts","bobba/communication/outgoing/rooms/RequestWave.ts","bobba/rooms/Room.ts","bobba/imagers/avatars/Atlas.ts","bobba/imagers/avatars/AvatarChunk.ts","bobba/imagers/avatars/AvatarImager.ts","bobba/items/BaseItem.ts","bobba/items/BaseItemManager.ts","bobba/net/WebSocketClient.ts","bobba/communication/incoming/generic/HandleLoginOk.ts","bobba/communication/protocol/ServerMessage.ts","bobba/communication/incoming/rooms/HandleFloorItems.ts","bobba/communication/incoming/rooms/HandleRoomUsers.ts","bobba/communication/incoming/rooms/HandleRoomUserStatus.ts","bobba/communication/incoming/rooms/HandleRoomUserRemove.ts","bobba/communication/incoming/rooms/HandleIncomingChat.ts","bobba/communication/incoming/rooms/HandleRoomUserWave.ts","bobba/communication/incoming/rooms/HandleRoomItemRemove.ts","bobba/communication/incoming/rooms/HandleRoomItemState.ts","bobba/communication/incoming/rooms/HandleWallItems.ts","bobba/communication/incoming/generic/HandleInventoryItems.ts","bobba/communication/incoming/generic/HandleInventoryItemRemove.ts","bobba/communication/incoming/catalogue/HandleCatalogueIndex.ts","bobba/catalogue/CatalogueItem.ts","bobba/catalogue/CataloguePage.ts","bobba/communication/incoming/catalogue/HandleCataloguePage.ts","bobba/communication/incoming/catalogue/HandleCataloguePurchaseError.ts","bobba/communication/incoming/catalogue/HandlePurchaseCatalogueInformation.ts","bobba/communication/incoming/generic/HandleUpdateCreditsBalance.ts","bobba/rooms/RoomModel.ts","bobba/communication/incoming/roomdata/HandleHeightMap.ts","bobba/communication/incoming/roomdata/HandleRoomModelInfo.ts","bobba/messenger/Messenger.ts","bobba/communication/incoming/roomdata/HandleRoomData.ts","bobba/communication/incoming/navigator/HandleRoomList.ts","bobba/communication/incoming/navigator/HandleLeaveRoom.ts","bobba/communication/incoming/messenger/HandleMessengerFriends.ts","bobba/communication/outgoing/messenger/RequestMessengerSendMessage.ts","bobba/communication/outgoing/messenger/RequestMessengerFollowFriend.ts","bobba/communication/outgoing/messenger/RequestMessengerRemoveFriend.ts","bobba/communication/outgoing/messenger/RequestMessengerAcceptFriend.ts","bobba/communication/outgoing/messenger/RequestMessengerDenyFriend.ts","bobba/communication/outgoing/messenger/RequestMessengerFriendSearch.ts","bobba/communication/outgoing/messenger/RequestMessengerAddFriend.ts","bobba/communication/incoming/messenger/HandleMessengerMessage.ts","bobba/communication/incoming/messenger/HandleMessengerRequests.ts","bobba/communication/incoming/messenger/HandleMessengerSearchResult.ts","bobba/communication/incoming/messenger/HandleMessengerUpdateFriend.ts","bobba/communication/CommunicationManager.ts","bobba/communication/protocol/OpCodes/ServerOpCodes.ts","bobba/communication/outgoing/roomdata/RequestRoomData.ts","bobba/imagers/bubbles/ChatStyle.ts","bobba/imagers/bubbles/ChatImager.ts","bobba/imagers/bubbles/MeMenuImager.ts","bobba/communication/outgoing/users/RequestLogin.ts","bobba/communication/outgoing/rooms/RequestChangeLooks.ts","bobba/communication/outgoing/rooms/RequestChangeMotto.ts","bobba/ui/UIManager.ts","bobba/users/User.ts","bobba/users/UserManager.ts","bobba/inventory/UserItem.ts","bobba/inventory/Inventory.ts","bobba/communication/outgoing/users/RequestInventoryItems.ts","bobba/communication/outgoing/catalogue/RequestCataloguePage.ts","bobba/communication/outgoing/catalogue/RequestCataloguePurchase.ts","bobba/catalogue/Catalogue.ts","bobba/communication/outgoing/catalogue/RequestCatalogueIndex.ts","bobba/sound/GenericSounds.ts","bobba/sound/SoundManager.ts","bobba/communication/outgoing/navigator/RequestNavigatorSearchRooms.ts","bobba/communication/outgoing/navigator/RequestNavigatorPopularRooms.ts","bobba/communication/outgoing/navigator/RequestNavigatorOwnRooms.ts","bobba/communication/outgoing/navigator/RequestNavigatorLeaveRoom.ts","bobba/communication/outgoing/navigator/RequestNavigatorGoToRoom.ts","bobba/communication/outgoing/navigator/RequestNavigatorCreateRoom.ts","bobba/navigator/Nav.ts","bobba/communication/outgoing/roomdata/RequestHeightMap.ts","bobba/imagers/rooms/RoomImager.ts","bobba/communication/outgoing/messenger/RequestMessengerLoadFriends.ts","Constants.ts","bobba/Game.ts","bobba/BobbaEnvironment.ts","ui/iteminfo/ItemInfoContainer.tsx","ui/footer/Footer.tsx","ui/roominfo/RoomInfo.tsx","ui/header/TopBar.tsx","ui/header/Header.tsx","ui/splash/JoinForm.tsx","ui/splash/Logo.tsx","ui/splash/Credits.tsx","ui/splash/GenericSplash.tsx","ui/splash/Loading.tsx","ui/misc/GraphicsUtilities.ts","ui/splash/SplashScreen.tsx","ui/iteminfo/FurniInfo.tsx","ui/iteminfo/MottoEdit.jsx","ui/iteminfo/UserInfo.tsx","ui/splash/ErrorSplash.tsx","ui/windows/WindowManager.ts","ui/changelooks/ChangeLooks.tsx","ui/messenger/Messenger.tsx","ui/inventory/Inventory.tsx","ui/catalogue/ConfirmPurchase.tsx","ui/catalogue/Catalogue.tsx","ui/notifications/Notif.tsx","ui/notifications/Notifications.tsx","ui/navigator/Nav.tsx","ui/createroom/CreateRoom.tsx","ui/messenger/Chat.tsx","ui/BobbaUI.tsx","index.tsx"],"names":["ItemType","MainEngine","gameLoop","onResize","onMouseMove","onTouchStart","onTouchMove","onMouseClick","onMouseDoubleClick","pixiApp","logicPixiApp","onResizeHandler","onMouseMoveHandler","onTouchStartHandler","onTouchMoveHandler","onMouseClickHandler","onMouseDoubleClickHandler","isMouseDragging","globalTextures","renderer","resize","getViewportWidth","getViewportHeight","setMouseInteractions","view","addEventListener","evt","x","y","shiftKey","ctrlKey","altKey","preventDefault","touches","length","clientX","clientY","this","logicApp","PIXI","width","window","innerWidth","height","innerHeight","antialias","transparent","resolution","app","autoResize","ticker","add","delta","minFPS","texturesUrl","Promise","resolve","reject","loader","shared","load","resources","resourceId","res","undefined","texture","onError","onComplete","document","body","appendChild","removeChild","img","base","name","stage","FLOOR_ITEM_PLACEHOLDER","FLOOR_ITEM_PLACEHOLDER_OFFSET_X","FLOOR_ITEM_PLACEHOLDER_OFFSET_Y","WALL_ITEM_PLACEHOLDER","WALL_ITEM_PLACEHOLDER_OFFSET_X","WALL_ITEM_PLACEHOLDER_OFFSET_Y","ROOM_TILE_SHADOW","ClientMessage","id","String","token","SEPARATOR","i","appendToken","str","tickets","charAt","appendInt","LOGIN","REQUEST_MOVEMENT","REQUEST_CHAT","REQUEST_LOOK_AT","REQUEST_WAVE","REQUEST_ROOM_DATA","REQUEST_ITEM_INTERACT","REQUEST_ITEM_MOVE","REQUEST_ITEM_PICK_UP","REQUEST_CHANGE_LOOKS","REQUEST_CHANGE_MOTTO","REQUEST_INVENTORY_ITEMS","REQUEST_ITEM_PLACE","REQUEST_CATALOGUE_INDEX","REQUEST_CATALOGUE_PAGE","REQUEST_CATALOGUE_PURCHASE","REQUEST_NAVIGATOR_POPULAR_ROOMS","REQUEST_NAVIGATOR_OWN_ROOMS","REQUEST_NAVIGATOR_SEARCH_ROOMS","REQUEST_NAVIGATOR_LEAVE_ROOM","REQUEST_NAVIGATOR_GO_TO_ROOM","REQUEST_HEIGHT_MAP","REQUEST_NAVIGATOR_CREATE_ROOM","REQUEST_MESSENGER_ACCEPT_FRIEND","REQUEST_MESSENGER_DENY_FRIEND","REQUEST_MESSENGER_FOLLOW_FRIEND","REQUEST_MESSENGER_SEARCH_FRIEND","REQUEST_MESSENGER_SEND_MESSAGE","REQUEST_MESSENGER_REMOVE_FRIEND","REQUEST_MESSENGER_ADD_FRIEND","REQUEST_MESSENGER_LOAD_FRIENDS","RequestMovement","RequestFurniInteract","itemId","FurniBase","itemData","offset","size","states","assets","directions","rawDirections","visualization","rawDirection","push","parseInt","draw","direction","state","frame","isIcon","layers","getLayers","tempCanvas","createElement","tempCtx","getContext","lefterX","lefterFlippedX","righterX","upperY","lowerY","layer","posX","asset","posY","image","isFlipped","flippedPosX","flipped","flipImage","ink","globalCompositeOperation","alpha","tinted","_tintSprite","color","drawImage","r","g","b","element","c","rgb","_int2rgb","imageData","getImageData","inpos","data","Math","round","putImageData","chunks","splitItemNameAndColor","classname","itemName","colorId","layerCount","layerData","resourceName","layerId","z","ignoreMouse","overrideLayer","colors","colorLayer","animations","animationLayer","frameSequence","frameCount","currentSequence","buildResourceName","getLayerName","fromCharCode","save","scale","restore","FurniAsset","extractImage","atlas","sourceName","frames","w","h","canvas","ctx","subsprite","Image","src","toDataURL","FurniImager","resourcesUrl","ready","bases","offsets","furnidata","roomitem","wallitem","roomitemtypes","wallitemtypes","item","type","furnidataType","rawItem","findItemById","rawItemName","_fetchOffsetAsync","then","a","count","furniBase","stateIdStr","stateId","frameSequenceLength","forEach","sequence","transitionTo","allegedTransition","transition","_downloadImageAsync","assetId","atlasImg","fixedName","split","startsWith","toString","sourceAsset","source","exists","extractedImage","flipH","catch","err","p","_loadFiles","all","_fetchJsonAsync","d","onload","onerror","crossOrigin","url","fetch","method","mode","cache","response","json","text","uniqueName","LockType","includes","longFurniName","RequestFurniPickUp","RoomItem","rot","baseId","room","placeholderSprite","_x","_y","_z","_state","_nextState","_frame","_frameCounter","sprites","selectableSprites","containers","selectableContainers","baseItem","loaded","drawAsIcon","handleClick","showItemInfo","floor","random","placeholderContainer","Container","zIndex","calculateZIndex","placeholderSelectableContainer","placeholderSelectableSprite","Sprite","addChild","updateSpritePosition","_actuallySetState","updateTextures","_nextPrivateFrame","sprite","visible","selectableSprite","currentContainer","currentSelectableContainer","actualState","actualFrame","layerIndex","container","iconTexture","blendMode","BLEND_MODES","NORMAL","tint","getTexture","selectableTexture","getSolidTexture","ADD","BobbaEnvironment","getGame","baseItemManager","getItem","getItemType","setAdditionalSprites","isUpdate","Object","keys","uiManager","onSelectFurni","description","infoImage","FloorItem","communicationManager","sendMessage","RequestFurniMove","rotation","placeholder","engine","local","tileToLocal","DRAWING_OFFSET_X","DRAWING_OFFSET_Y","tileX","tileY","tileZ","calculateZIndexFloorItem","calculateNextDirection","RoomEngine","selectableContainer","floorSprites","wallSprites","selectedTileSprite","lastMousePositionX","lastMousePositionY","userSprites","shadowSprites","roomItemSprites","selectableItems","currentSelectedItem","movingItem","movingItemPosition","wallPoints","maxHeight","handleMouseMovement","mouseX","mouseY","isDrag","tile","globalToTileStrict","getSelectableColorId","selectable","handleHover","diffX","diffY","updateMovingItem","updateSelectedTile","hideSelectedTile","handleMouseClick","focusChat","globalToTile","isValidTile","model","isMovingRoomItem","finishRoomItemMovement","rotate","pickUp","startRoomItemMove","onFocusChat","handleTouchMove","handleTouchStart","newSelectedItem","handleMouseDoubleClick","handleDoubleClick","centerCamera","sortableChildren","setWalls","setFloor","setSelectedTile","roomUserManager","currentUser","userManager","doorCoords","doorX","doorY","centerPointX","centerPointY","roomUser","getUser","userCoords","floorTexture","calculateZIndexChat","shadowSprite","selectableElement","roomItem","cancelRoomItemMove","startMovement","updatePosition","stopMovement","roomItemManager","cancelRoomItemMovement","globalX","globalY","canPlaceFloorItem","heightMap","globalToLocal","canPlaceWallItem","calculateWallDirection","wall","localToWall","wallPoint","localWall","wallCoords","invertedWall","floorItem","maxX","maxY","first","logic","dimensions","second","offsetX","offsetY","priority","currentSprite","localPos","roomImager","minY","j","_addWallSprite","generateRoomWallR","ROOM_WALL_R_OFFSET_Y","PRIORITY_WALL","minX","generateRoomDoorL","ROOM_WALL_L_OFFSET_Y","generateRoomDoorBeforeL","generateRoomWallL","roomTileTexture","roomStairLTexture","roomStairRTexture","PRIORITY_DOOR_FLOOR","PRIORITY_FLOOR","Point","globalToTileWithHeight","xminusy","xplusy","localX","localY","pixels","extract","getLogicStage","bounds","getBounds","stageX","stageY","pos","rgb2int","PRIORITY_DOOR_FLOOR_SELECT","PRIORITY_FLOOR_SELECT","_calculateZIndexUser","PRIORITY_DOOR_FLOOR_PLAYER","PRIORITY_PLAYER","PRIORITY_DOOR_FLOOR_PLAYER_SHADOW","PRIORITY_PLAYER_SHADOW","COMPARABLE_X_Y","COMPARABLE_Z","PRIORITY_MULTIPLIER","compareY","trunc","PRIORITY_ROOM_ITEM","PRIORITY_CHAT","PRIORITY_WALL_ITEM","AvatarInfo","figure","headDirection","action","gesture","isHeadOnly","isBodyOnly","isDownsampled","isLarge","isSmall","rectWidth","rectHeight","drawAction","handItem","drawOrder","extractFigureParts","speak","eye","actionParams","wlk","sit","temp","substr","handLeft","handRight","itemRight","Number","swm","newFigure","figures","figurePart","part","generateFigureString","figureElement","current","generateSilhouette","AvatarContainer","look","isGhost","bodyTextures","headTextures","solidBodyTextures","solidHeadTextures","headImage","userInfoImage","GHOST_LOOK","promises","avatarImager","_loadUniqueHeadTexture","_loadUniqueBodyTexture","_loadChatHeadImage","_loadUserInfoImage","getChatColor","getHeadTextureKey","getBodyTextureKey","generateGeneric","getTextureFromImage","actionText","RequestLookAt","userId","RoomUser","user","_seatZ","targetX","targetY","targetZ","headRot","status","_waveCounter","_speakCounter","_signCounter","avatarContainer","headSprite","bodySprite","signSprite","selectableHeadSprite","selectableBodySprite","showUserInfo","isMe","onSelectUser","motto","showSign","signImage","meMenuImager","generateSign","signTexture","updateTexture","isWalking","move","seconds","parseFloat","mv","coords","setMovement","initialize","bodyFrame","headFrame","isSitting","isWaving","isSpeaking","isShowingSign","getBodyTexture","getHeadTexture","getSolidBodyTexture","getSolidHeadTexture","ghostTextures","shadowZ","min","shadowCoords","calculateZIndexUserShadow","calculateZIndexUser","RoomUserManager","users","updateStatus","baseUser","setUser","removeUserFromRoom","newUser","addUserContainer","addSelectableContainer","loadTextures","wave","notify","removeUserSprite","removeSelectableContainer","onCloseSelectUser","key","tick","WallItem","screenX","screenY","screenZ","RequestFurniPlace","RoomItemManager","items","currentPlacingItem","promise","itemType","addFloorItemToRoom","getUIViewDirection","addWallItemToRoom","startRoomItemMovement","removeItemFromRoom","doOpenInventory","newItem","inventory","tryPlaceBaseItem","addRoomItemContainerSet","loadBase","containerGroup","removeRoomItemContainerSet","setState","notifyUi","onCloseSelectFurni","Chat","message","deltaY","SPEED","ChatManager","chats","_chatRollerCounter","_needsRoll","amount","chatImager","generateChatBubble","interactive","on","cursor","getSpriteX","rollChats","ROLL_PERIOD","RequestChat","chat","appendString","RequestWave","Room","chatManager","setChatContainer","getStage","AvatarChunk","partId","lib","resAction","resType","resDirection","resFrame","isFlip","resource","getResourceName","AvatarImager","figuremap","figuredata","partsets","draworder","animation","loadFiles","fetchJsonAsync","URL","offsetPromise","atlasPromise","downloadAtlasAsync","avatarInfo","parts","getPartColor","particle","getTypeColorId","activeParts","rect","getActivePartSet","head","walk","swim","drawParts","getDrawOrder","setParts","partSet","concat","offsetsPromises","drawableParts","drawablePart","getPartUniqueName","drawDirection","colorable","fetchOffsetAsync","drawPartChunk","getPartResource","chunksPromises","chunk","flippedType","atlasData","extractFromAtlas","tintSprite","downsampleImage","partType","paletteId","getPartSet","selectedPart","maxColors","max","apply","map","o","colorindex","set","index","getColorByPaletteId","paletteid","hidden","Array","isArray","partFrame","getFrameNumber","translations","number","hex2rgb","hex","result","exec","BaseItem","textures","solidTextures","iconImage","_loadTexture","drawIcon","available","getAvailableDirections","indexOf","_loadSolidTexture","BaseItemManager","furniImager","loadItemBase","WebSocketClient","messageHandler","connected","ws","send","connectionURL","WebSocket","onopen","handleOpenConnection","onclose","handleCloseConnection","onmessage","handleMessage","handleConnectionError","LoginOk","request","popInt","popString","handleUserData","ServerMessage","pointer","tokens","popToken","HandleFloorItems","popFloat","currentRoom","HandleRoomUsers","addUserToRoom","HandleRoomUserStatus","statusesCount","statuses","value","updateUserStatus","HandleRoomUserRemove","HandleIncomingChat","addChat","HandleRoomUserWave","userWave","HandleRoomItemRemove","HandleRoomItemState","itemSetState","HandleWallItems","HandleInventoryItems","isStackable","popBoolean","addItem","HandleInventoryItemRemove","removeItem","HandleCatalogueIndex","mainTreeSize","pages","extractPage","catalogue","setIndex","iconId","childrenCount","children","CatalogueItem","cost","CataloguePage","layout","imageHeadline","imageTeaser","textHeader","textDetails","textMisc","textMisc2","HandleCataloguePage","pageId","itemCount","page","setCataloguePage","HandleCataloguePurchaseError","onShowNotification","HandleCataloguePurchaseInformation","HandleUpdateCreditsBalance","credits","updateCreditsBalance","RoomModel","HandleHeightMap","cols","rows","heightmap","handleHeightMap","HandleRoomModelInfo","modelId","roomId","handleRoomModelInfo","MessengerMessageType","RoomData","owner","capacity","userCount","isFavourite","lockType","getRoomData","lockTypeId","Open","Locked","Password","HandleRoomData","navigator","handleCurrentRoomData","HandleRoomList","roomDatas","handleRoomDataList","HandleLeaveRoom","unloadRoom","HandleMessengerFriends","onlineFriends","offlineFriends","username","isOnline","messenger","handleFriends","RequestMessengerSendMessage","RequestMessengerFollowFriend","RequestMessengerRemoveFriend","RequestMessengerAcceptFriend","RequestMessengerDenyFriend","RequestMessengerSearchFriend","search","RequestMessengerAddFriend","Messenger","activeChats","_tryInitializeChat","onOpenMessengerChat","online","offline","notifyUiFriendsUpdate","onSetFriends","filter","handleMessengerMessage","Info","Date","toLocaleTimeString","hour","minute","hour12","getCurrentTime","onReceiveMessengerMessage","Friend","soundManager","playConsoleReceiveSound","onShowMessengerAlert","activeChat","playConsoleSentSound","HandleMessengerMessage","Me","HandleMessengerRequests","handleFriendRequests","HandleMessengerSearchResult","handleFriendsSearch","HandleMessengerUpdateFriend","handleUpdateFriend","CommunicationManager","client","requestHandlers","rawMessage","handler","handle","log","stop","_registerRequests","HandleLoginOk","connect","RequestRoomData","ChatStyle","regPoints","ChatImager","chatStyles","_downloadChatStyle","style","regPointsData","baseData","pointerData","colorData","_getStyle","FONT","font","textBaseline","fillStyle","usernameWidth","measureText","textWidth","fillText","colored","MeMenuImager","baseImage","pointerImage","RequestLogin","RequestChangeLooks","gender","RequestChangeMotto","UIManager","game","onSetUserData","onLoadPost","onGameStop","onUpdateCreditsBalance","onOpenChangeLooks","onCloseChangeLooks","onOpenInventory","onUpdateInventory","onCloseInventory","onOpenCatalogue","onLoadCataloguePage","onLoadCatalogueIndex","onCloseCatalogue","onOpenNavigator","onCloseNavigator","onLoadRoomList","onOpenCreateRoom","onCloseCreateRoom","onCurrentRoomDataLoad","onCloseRoomInfo","onOpenMessenger","onCloseMessenger","onCloseChat","onSetFriendsSearch","onSetFriendRequests","onOpenChat","console","tryPlaceItem","updateInventory","requestSearchRooms","requestPopularRooms","requestOwnRooms","requestGoToRoom","requestLeaveRoom","selectedModel","requestCreateRoom","requestPage","requestPurchase","requestAddFriend","denyFriendRequest","acceptFriendRequest","requestFriendSearch","requestRemoveFriend","requestFollowFriend","requestStartChat","sendChatMessage","User","UserManager","clubDays","balance","playCreditsSound","UserItem","stackable","Inventory","lastPlacedBaseItem","startRoomItemPlacement","userItemId","currentItem","findItemByBase","values","RequestInventoryItems","RequestCataloguePage","RequestCataloguePurchase","Catalogue","catalogueIndex","cachedPage","getPage","RequestCatalogueIndex","SOUND_CREDITS","SOUND_PIXELS","SOUND_CONSOLE_SENT","SOUND_CONSOLE_RECEIVE","SoundManager","_credits","_pixels","_consoleSent","_consoleReceive","Audio","play","RequestNavigatorSearchRooms","RequestNavigatorPopularRooms","RequestNavigatorOwnRooms","RequestNavigatorLeaveRoom","RequestNavigatorGoToRoom","RequestNavigatorCreateRoom","roomName","Nav","RequestHeightMap","RoomImager","generateFloorTile","generateStairL","stairRCanvas","generateStairR","generateWallL","generateWallR","generateWallBeforeDoorL","generateStair","strokeColor","floorColor","leftColorStroke","leftColor","rightColorStroke","rightColor","rightSide","topFloorPoints","stairPoints","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","fill","fixedThickness","thickness","points","startX","startY","RequestMessengerLoadFriends","Constants","WS_URL","AVATAR_RESOURCES_URL","FURNI_RESOURCES_URL","CATALOGUE_RESOURCES_URL","TOP_STORY_RESOURCES_URL","BADGE_RESOURCES_URL","Game","isStarting","postLoading","loadGlobalTextures","setCurrentUser","playPixelsSound","doOpenNavigator","doRequestOpenMessenger","onEnterRoom","getMainStage","dispose","onLeaveRoom","_gameInstance","Showing","MAX_CHAT_LENGTH","initialState","messengerAlert","Footer","props","chatInput","focusChatInput","focus","handleSubmit","event","doChat","handleInputChange","target","changeLooks","doOpenChangeLooks","openInventory","openCatalogue","doOpenCatalogue","openNavigator","leaveRoom","doRequestLeaveRoom","openMessenger","openChat","doRequestOpenChat","React","createRef","focuser","userface","alt","className","onClick","onSubmit","ref","maxLength","autoComplete","onChange","Component","roomData","RoomInfo","TopBar","Header","toLocaleString","language","minimumFractionDigits","getMoneyNumber","MAX_NAME_LENGTH","wrongUsername","queuedLogin","JoinForm","checked","doLogin","looks","randomElement","button","disabled","getLooks","Logo","Credits","fontFamily","fontSize","rel","href","GenericSplash","Loading","loadingText","canvas2Image","imgFoo","skins","looksLoaded","SplashScreen","skin","FurniInfo","useItem","doFurniInteract","moveItem","doFurniMove","rotateItem","doFurniRotate","pickUpItem","doFurniPickUp","onClose","canRotate","canMove","canPickUp","canUse","buttons","MottoEdit","onMottoChange","change","classLoading","propName","editProps","UserInfo","handleWave","doWave","handleChangeLooks","handleChangeMotto","doChangeMotto","mottoNode","showing","NONE","furniProps","userProps","ItemInfoContainer","close","showFurniView","currentId","FURNI","showUserView","USER","tryCloseFurniView","tryCloseUserView","ErrorSplash","errorText","WindowManager","currentZIndex","Tabs","avatarMainTabs","tabs","required","mainTab","secondTabId","getNextZIndex","ChangeLooks","handleMainTabChange","handleSecondTabChange","handleChangePart","newLook","handleChangeColor","currentPart","calculateCurrentPart","handleRemovePart","handleToggleGender","handleSaveChanges","doChangeLooks","handleClose","upgradeZIndex","mainTabDef","mainDef","find","maleSelected","secondTabDef","selected","typeId","ogPalettes","getPartPalette","currentColor","calculateCurrentColor","colorIdStr","isHc","club","backgroundColor","palettes","colorCount","getPartPaletteCount","generatePalette","renderedImg","generatePartImage","defaultClassName","onStart","onMouseDown","getMainTabs","getSecondTab","generateGrid","generatePlatform","generatePalettes","selectedId","currentType","InventoryContainer","handleSelectItem","placeItem","doFurniPlace","toggleType","stackableItems","stackableItemsDrawn","displayItems","selectedItem","generateSecondTab","generateItemInfo","floorSelected","ConfirmPurchase","onPurchase","currentPage","currentPageId","currentTabId","currentItemId","purchaseWindowVisible","pageColors","handleChangePage","isMain","doRequestCataloguePage","handleTryPurchase","handlePurchase","doRequestCataloguePurchase","handlePurchaseWindowClose","child","calculatedColor","generateFurniButton","generateDescription","generateFrontPage","generateDefaultPage","purchaseWindow","generatePage","generateTabs","Notif","notifications","Notifications","mainTabId","currentRooms","Navigator","doRequestNavigatorSearch","requestRoomList","handleSearchChange","handleSearch","handleGoToRoom","doRequestGoToRoom","handleCreateRoom","doOpenCreateRoom","rooms","doRequestNavigatorMyRooms","doRequestNavigatorRooms","sort","lockIcon","calculateUserCountColor","models","tileCount","CreateRoom","doRequestCreateRoom","handleNameChange","handleSelect","currentTab","Friends","firstRowActive","secondRowActive","currentSelectedFriendId","friendsRequests","searchResult","doRequestStartChat","doRequestFollowFriend","doRequestAskForFriend","doRequestRemoveFriend","requestSearch","doRequestFriendSearch","requestAcceptFriendRequest","doRequestAcceptFriendRequest","requestDenyFriendRequest","doRequestDenyFriendRequest","requestAcceptAllFriendRequests","requestDenyAllFriendRequests","toggleFirstRow","toggleSecondRow","handleChangeTab","friends","friend","None","generateOnlineFriendsGrid","generateOfflineFriendsGrid","filteredFriends","toLowerCase","Search","generateSearchGrid","Requests","generateRequestsGrid","generateFriendsTab","generateSearchTab","generateRequestsTab","generateFooter","messages","currentActiveChatId","currentTabOffset","chatWrapper","handleKeyDown","isEnter","which","doRequestSendChatMessage","handleChange","requestCloseChat","newChats","handleTabChange","handleOffsetChange","increment","wrapper","scrollTop","scrollHeight","clientHeight","scrollDown","friendsToShow","generateFriendTab","generateLeftArrow","generateRightArrow","title","activeFriend","generateMainTabs","generateChats","onKeyDown","gameLoaded","loggedIn","error","loadingInfo","userData","initialized","BobbaUI","updateChatFocuser","loadGame","errorMessage","Error","mainGame","mainPage","rootElement","getElementById","hasChildNodes","hydrate","render"],"mappings":"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","file":"static/js/main.d9fb6ed0.chunk.js","sourcesContent":["import FurniBase from \"./FurniBase\";\nimport FurniAsset from \"./FurniAsset\";\nimport { FurniOffset } from \"./FurniOffset\";\nimport { Furnidata, FurniDescription } from \"./Furnidata\";\nimport { extractImage } from \"./Atlas\";\n\nexport default class FurniImager {\n    ready: boolean;\n    bases: { roomitem: { [id: string]: Promise<FurniBase> }, wallitem: { [id: string]: Promise<FurniBase> } };\n    offsets: { [id: string]: Promise<FurniOffset> };\n    furnidata: Furnidata;\n    resourcesUrl: string;\n\n    constructor(resourcesUrl: string) {\n        this.resourcesUrl = resourcesUrl;\n        this.ready = false;\n        this.bases = { roomitem: {}, wallitem: {} };\n        this.furnidata = { roomitemtypes: {}, wallitemtypes: {} };\n        this.offsets = {};\n    }\n\n    findItemByName(itemName: string) {\n        for (let itemId in this.furnidata.roomitemtypes) {\n            const item = this.furnidata.roomitemtypes[itemId];\n            if (item.classname === itemName) {\n                return { item, type: 'roomitemtypes' };\n            }\n        }\n        for (let itemId in this.furnidata.wallitemtypes) {\n            const item = this.furnidata.wallitemtypes[itemId];\n            if (item.classname === itemName) {\n                return { item, type: 'wallitemtypes' };\n            }\n        }\n        return null;\n    }\n\n    findItemById(type: ItemType, itemId: number): FurniDescription | null {\n        const furnidataType = type === 'roomitem' ? 'roomitemtypes' : 'wallitemtypes';\n        if (this.furnidata[furnidataType][itemId] != null) {\n            return this.furnidata[furnidataType][itemId];\n        }\n        return null;\n    }\n\n    loadItemBase(type: ItemType, itemId: number, size: Size): Promise<FurniBase> {\n        const rawItem = this.findItemById(type, itemId);\n        if (rawItem == null) {\n            return new Promise((resolve, reject) => {\n                reject('invalid itemId ' + itemId);\n            });\n        }\n        const rawItemName = rawItem.classname;\n        const { itemName } = splitItemNameAndColor(rawItemName);\n\n        if (this.bases[type][itemId] == null) {\n            this.bases[type][itemId] = new Promise((resolve, reject) => {\n                if (this.offsets[itemName] == null) {\n                    this.offsets[itemName] = this._fetchOffsetAsync(itemName);\n                }\n                const offsetPromise = this.offsets[itemName];\n\n                offsetPromise.then(async (offset) => {\n                    const visualization = offset.visualization[64];\n                    let states: { [id: number]: State } = { \"0\": { count: 1 } };\n\n                    const furniBase = new FurniBase(itemId, rawItem, offset, size);\n\n                    if (visualization.animations != null) {\n                        for (let stateIdStr in visualization.animations) {\n                            const stateId = parseInt(stateIdStr);\n                            let count = 1;\n                            for (let animationLayer of visualization.animations[stateId].layers) {\n                                if (animationLayer.frameSequence != null) {\n                                    let frameSequenceLength = 0;\n                                    animationLayer.frameSequence.forEach(sequence => {\n                                        frameSequenceLength += sequence.length;\n                                    });\n                                    if (count < frameSequenceLength) {\n                                        count = frameSequenceLength;\n                                    }\n                                }\n                            }\n                            states[stateId] = { count };\n                            if (visualization.animations[stateId] != null) {\n                                const { transitionTo } = visualization.animations[stateId];\n                                if (transitionTo != null) {\n                                    const allegedTransition = transitionTo;\n                                    states[stateId].transitionTo = allegedTransition;\n                                    states[allegedTransition].transition = stateId;\n                                }\n                            }\n                        }\n                    }\n\n                    const atlasImg = await this._downloadImageAsync(itemName, \"atlas\");\n\n                    for (let assetId in offset.assets) {\n                        const asset = offset.assets[assetId];\n                        const fixedName = asset.name.split(itemName + '_')[1] as String;\n                        if (fixedName.startsWith(size.toString()) || fixedName.startsWith(\"icon_\")) {\n                            let sourceAsset = asset;\n                            if (asset.source != null) {\n                                sourceAsset = offset.assets[asset.source];\n                            }\n                            if (sourceAsset != null && sourceAsset.exists) {\n                                const extractedImage = extractImage(offset.atlas, atlasImg, sourceAsset.name + \".png\");\n                                if (extractedImage != null) {\n                                    furniBase.assets[asset.name] = new FurniAsset(extractedImage, asset.x, asset.y, asset.flipH != null && asset.flipH === 1);\n                                }\n                            }\n                        }\n                    }\n\n                    /*for (let assetId in offset.assets) {\n                        const asset = offset.assets[assetId];\n                        const fixedName = asset.name.split(itemName + '_')[1] as String;\n                        if (fixedName.startsWith(size.toString()) || fixedName.startsWith(\"icon_\")) {\n                            let sourceAsset = asset;\n                            if (asset.source != null) {\n                                sourceAsset = offset.assets[asset.source];\n                            }\n                            if (sourceAsset != null && sourceAsset.exists) {\n                                console.log(itemName + \" --> \" + sourceAsset.name);\n                                assetsPromises.push(this._downloadImageAsync(itemName, sourceAsset.name).then(img => {\n                                    furniBase.assets[asset.name] = new FurniAsset(img, asset.x, asset.y, asset.flipH != null && asset.flipH === 1);\n                                }).catch(err => {\n                                    console.log(\"Cannot download \" + asset.name);\n                                    //reject(err);\n                                }));\n                            }\n                        }\n                    }*/\n                    furniBase.states = states;\n                    resolve(furniBase);\n\n                }).catch(err => {\n                    reject(\"Error downloading offset for \" + itemName + \" reason: \" + err);\n                });\n            });\n        }\n        return this.bases[type][itemId];\n    }\n\n    initialize(): Promise<void> {\n        const p = this._loadFiles();\n        return Promise.all(p).then(() => {\n            this.ready = true;\n        });\n    }\n\n    _loadFiles(): Promise<void>[] {\n        return [\n            this._fetchJsonAsync(this.resourcesUrl + \"furnidata.json\")\n                .then(data => {\n                    this.furnidata = data as Furnidata;\n                }),\n        ];\n    }\n\n    _downloadImageAsync(itemName: string, resourceName: string): Promise<HTMLImageElement> {\n        let img = new Image();\n        let d: Promise<HTMLImageElement> = new Promise((resolve, reject) => {\n            img.onload = () => {\n                //console.log(\"downloaded \" + this.itemName + \" -> \" + this.resourceName);\n                resolve(img);\n            };\n            img.onerror = () => {\n                //console.log(\"NOT DOWNLOADED \" + this.itemName + \" -> \" + this.resourceName);\n                reject('Could not load image: ' + img.src);\n            };\n        });\n        img.crossOrigin = \"anonymous\";\n        img.src = this.resourcesUrl + itemName + \"/\" + resourceName + \".png\";\n        return d;\n    }\n\n    _fetchJsonAsync(url: string): Promise<object> {\n        return new Promise((resolve, reject) => {\n\n            const options: RequestInit = {\n                method: 'GET',\n                mode: 'cors',\n                cache: 'default',\n            };\n\n            fetch(url, options)\n                .then(response => response.json())\n                .then(data => resolve(data))\n                .catch(err => reject(err));\n        });\n    }\n\n    async _fetchXmlAsync(url: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n\n            const options: RequestInit = {\n                method: 'GET',\n                mode: 'cors',\n                cache: 'default',\n            };\n\n            fetch(url, options)\n                .then(response => response.text())\n                .then(data => resolve(data))\n                .catch(err => reject(err));\n        });\n    }\n\n    _fetchOffsetAsync(uniqueName: string): Promise<FurniOffset> {\n        return new Promise((resolve, reject) => {\n            this._fetchJsonAsync(this.resourcesUrl + uniqueName + '/furni.json').then(data => {\n                resolve(data as FurniOffset);\n            }).catch(err => reject(err));\n        });\n    }\n}\n\nexport type Size = 1 | 64;\nexport enum ItemType { FloorItem = 'roomitem', WallItem = 'wallitem' }\nexport interface NameColorPair { itemName: string, colorId: number };\nexport type Direction = 0 | 2 | 4 | 6;\nexport type State = { count: number, transitionTo?: number, transition?: number, };\n\nexport const splitItemNameAndColor = (itemName: string): NameColorPair => {\n    let colorId = 0;\n    if (itemName.includes(\"*\")) {\n        const longFurniName = itemName.split(\"*\");\n        itemName = longFurniName[0];\n        colorId = parseInt(longFurniName[1]);\n    }\n    return { itemName, colorId }\n};","import * as PIXI from 'pixi.js-legacy';\n\nexport default class MainEngine {\n    pixiApp: PIXI.Application;\n    logicPixiApp: PIXI.Application;\n    onResizeHandler: () => void;\n    onMouseMoveHandler: (mouseX: number, mouseY: number, isDrag: boolean) => void;\n    onTouchStartHandler: (mouseX: number, mouseY: number) => void;\n    onTouchMoveHandler: (mouseX: number, mouseY: number) => void;\n    onMouseClickHandler: (mouseX: number, mouseY: number, shiftKey: boolean, ctrlKey: boolean, altKey: boolean) => void;\n    onMouseDoubleClickHandler: (mouseX: number, mouseY: number) => void;\n    isMouseDragging: boolean;\n    globalTextures: TextureDictionary;\n\n    constructor(gameLoop: Function, onResize: () => void,\n        onMouseMove: (mouseX: number, mouseY: number, isDrag: boolean) => void,\n        onTouchStart: (mouseX: number, mouseY: number) => void,\n        onTouchMove: (mouseX: number, mouseY: number) => void,\n        onMouseClick: (mouseX: number, mouseY: number, shiftKey: boolean, ctrlKey: boolean, altKey: boolean) => void,\n        onMouseDoubleClick: (mouseX: number, mouseY: number) => void) {\n        this.isMouseDragging = false;\n        this.onResizeHandler = onResize;\n        this.onMouseMoveHandler = onMouseMove;\n        this.onTouchMoveHandler = onTouchMove;\n        this.onTouchStartHandler = onTouchStart;\n        this.onMouseClickHandler = onMouseClick;\n        this.onMouseDoubleClickHandler = onMouseDoubleClick;\n        this.globalTextures = {};\n\n        const logicApp = new PIXI.Application({\n            width: window.innerWidth,\n            height: window.innerHeight,\n            antialias: false,\n            transparent: false,\n            resolution: 1,\n        });\n\n        const app = new PIXI.Application({\n            width: window.innerWidth,\n            height: window.innerHeight,\n            antialias: false,\n            transparent: false,\n            resolution: 1,\n        });\n\n        app.renderer.autoResize = true;\n        logicApp.renderer.autoResize = true;\n\n        app.ticker.add(delta => gameLoop(delta));\n        app.ticker.minFPS = 0;\n\n        this.pixiApp = app;\n        this.logicPixiApp = logicApp;\n\n        window.addEventListener('resize', this.onResize, false);\n\n        this.setMouseInteractions();\n    }\n\n    loadGlobalTextures(texturesUrl: string[]): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const loader = PIXI.Loader.shared;\n            loader.add(texturesUrl);\n            loader.load((loader, resources) => {\n                for (let resourceId in resources) {\n                    const res = resources[resourceId];\n                    if (res !== undefined) {\n                        this.globalTextures[resourceId] = res.texture;\n                    }\n                }\n            });\n\n            loader.onError.add(() => reject('Cannot load global textures'));\n            loader.onComplete.add(() => resolve());\n        });\n    }\n\n    onEnterRoom() {\n        document.body.appendChild(this.pixiApp.view);\n    }\n\n    onLeaveRoom() {\n        document.body.removeChild(this.pixiApp.view);\n    }\n\n    getTextureFromImage(img: HTMLImageElement | HTMLCanvasElement): PIXI.Texture {\n        let base = new PIXI.BaseTexture(img),\n            texture = new PIXI.Texture(base);\n        return texture;\n    }\n\n    getTexture(name: string): PIXI.Texture {\n        return this.globalTextures[name];\n    }\n\n    onResize = () => {\n        this.pixiApp.renderer.resize(MainEngine.getViewportWidth(), MainEngine.getViewportHeight());\n        this.logicPixiApp.renderer.resize(MainEngine.getViewportWidth(), MainEngine.getViewportHeight());\n        this.onResizeHandler();\n    }\n\n    getMainStage(): PIXI.Container {\n        return this.pixiApp.stage;\n    }\n\n    getLogicStage(): PIXI.Container {\n        return this.logicPixiApp.stage;\n    }\n\n    static getViewportWidth(): number {\n        return window.innerWidth;\n    }\n\n    static getViewportHeight(): number {\n        return window.innerHeight;\n    }\n\n    setMouseInteractions = () => {\n\n        this.pixiApp.view.addEventListener('mousemove', (evt) => {\n            this.onMouseMoveHandler(evt.x, evt.y, this.isMouseDragging);\n        }, false);\n        this.pixiApp.view.addEventListener('click', (evt) => {\n            this.onMouseClickHandler(evt.x, evt.y, evt.shiftKey, evt.ctrlKey, evt.altKey);\n        }, false);\n        this.pixiApp.view.addEventListener('dblclick', (evt) => {\n            this.onMouseDoubleClickHandler(evt.x, evt.y);\n        }, false);\n\n        this.pixiApp.view.addEventListener('touchstart', (evt) => {\n            evt.preventDefault();\n            if (evt.touches.length === 1) {\n                this.onTouchStartHandler(evt.touches[0].clientX, evt.touches[0].clientY);\n            }\n        }, false);\n        this.pixiApp.view.addEventListener('touchmove', (evt) => {\n            evt.preventDefault();\n            if (evt.touches.length === 1) {\n                this.onTouchMoveHandler(evt.touches[0].clientX, evt.touches[0].clientY);\n            }\n        }, false);\n        this.pixiApp.view.addEventListener('mousedown', (evt) => {\n            this.isMouseDragging = true;\n        }, false);\n        this.pixiApp.view.addEventListener('mouseup', (evt) => {\n            this.isMouseDragging = false;\n        }, false);\n\n\n    }\n}\n\nexport interface TextureDictionary {\n    [id: string]: PIXI.Texture;\n}","export const ROOM_SELECTED_TILE = \"assets/selected_tile.png\";\nexport const ROOM_TILE_HEIGHT = 16;\nexport const ROOM_TILE_WIDTH = 32;\nexport const FLOOR_ITEM_PLACEHOLDER = \"assets/furni_placeholder.png\";\nexport const FLOOR_ITEM_PLACEHOLDER_OFFSET_X = -34;\nexport const FLOOR_ITEM_PLACEHOLDER_OFFSET_Y = -49;\nexport const WALL_ITEM_PLACEHOLDER = \"assets/wall_placeholder.png\";\nexport const WALL_ITEM_PLACEHOLDER_OFFSET_X = -18;\nexport const WALL_ITEM_PLACEHOLDER_OFFSET_Y = -25;\nexport const ROOM_WALL_R_OFFSET_X = +64;\nexport const ROOM_WALL_R_OFFSET_Y = -139;\nexport const ROOM_WALL_L_OFFSET_X = -8;\nexport const ROOM_WALL_L_OFFSET_Y = -123;\nexport const ROOM_TILE_SHADOW = \"assets/shadow_tile.png\";\n","export default class ClientMessage {\n    body: string;\n    id: number;\n\n    constructor(id: number) {\n        this.id = id;\n        this.body = String(id);\n    }\n\n    appendToken(token: string) {\n        this.body += SEPARATOR + token;\n    }\n\n    appendInt(i: number) {\n        this.appendToken(String(i));\n    }\n\n    appendString(str: string) {\n        let tickets = 0;\n        for (let i = 0; i < str.length; i++) {\n            if (str.charAt(i) === SEPARATOR) {\n                tickets++;\n            }\n        }\n        this.appendInt(tickets);\n        this.appendToken(str);\n    }\n}\n\nconst SEPARATOR = '|';","export const LOGIN = 1;\nexport const REQUEST_MOVEMENT = 7;\nexport const REQUEST_CHAT = 9;\nexport const REQUEST_LOOK_AT = 12;\nexport const REQUEST_WAVE = 13;\nexport const REQUEST_ROOM_DATA = 15;\nexport const REQUEST_ITEM_INTERACT = 18;\nexport const REQUEST_ITEM_MOVE = 19;\nexport const REQUEST_ITEM_PICK_UP = 20;\nexport const REQUEST_CHANGE_LOOKS = 21;\nexport const REQUEST_CHANGE_MOTTO = 22;\nexport const REQUEST_INVENTORY_ITEMS = 23;\nexport const REQUEST_ITEM_PLACE = 24;\nexport const REQUEST_CATALOGUE_INDEX = 25;\nexport const REQUEST_CATALOGUE_PAGE = 26;\nexport const REQUEST_CATALOGUE_PURCHASE = 27;\nexport const REQUEST_NAVIGATOR_POPULAR_ROOMS = 28;\nexport const REQUEST_NAVIGATOR_OWN_ROOMS = 29;\nexport const REQUEST_NAVIGATOR_SEARCH_ROOMS = 30;\nexport const REQUEST_NAVIGATOR_MAKE_FAVOURITE = 31;\nexport const REQUEST_NAVIGATOR_REMOVE_FAVOURITE = 32;\nexport const REQUEST_NAVIGATOR_LEAVE_ROOM = 33;\nexport const REQUEST_NAVIGATOR_GO_TO_ROOM = 34;\nexport const REQUEST_HEIGHT_MAP = 2;\nexport const REQUEST_NAVIGATOR_CREATE_ROOM = 35;\nexport const REQUEST_MESSENGER_ACCEPT_FRIEND = 36;\nexport const REQUEST_MESSENGER_DENY_FRIEND = 37;\nexport const REQUEST_MESSENGER_FOLLOW_FRIEND = 38;\nexport const REQUEST_MESSENGER_SEARCH_FRIEND = 39;\nexport const REQUEST_MESSENGER_SEND_MESSAGE = 40;\nexport const REQUEST_MESSENGER_REMOVE_FRIEND = 41;\nexport const REQUEST_MESSENGER_ADD_FRIEND = 42;\nexport const REQUEST_MESSENGER_LOAD_FRIENDS = 42;","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MOVEMENT } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMovement extends ClientMessage {\n    constructor(x: number, y: number) {\n        super(REQUEST_MOVEMENT);\n        this.appendInt(x);\n        this.appendInt(y);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_ITEM_INTERACT } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestFurniInteract extends ClientMessage {\n    constructor(itemId: number) {\n        super(REQUEST_ITEM_INTERACT);\n        this.appendInt(itemId);\n    }\n}","import { Size, Direction, splitItemNameAndColor, State } from \"./FurniImager\";\nimport FurniAsset, { FurniAssetDictionary } from \"./FurniAsset\";\nimport { FurniDescription } from \"./Furnidata\";\nimport { FurniOffset } from \"./FurniOffset\";\n\nexport default class FurniBase {\n    itemId: number;\n    itemData: FurniDescription;\n    size: Size;\n    states: { [id: number]: State };\n    assets: FurniAssetDictionary;\n    offset: FurniOffset;\n\n    constructor(itemId: number, itemData: FurniDescription, offset: FurniOffset, size: Size) {\n        this.itemId = itemId;\n        this.itemData = itemData;\n        this.size = size;\n        this.states = {};\n        this.assets = {};\n        this.offset = offset;\n    }\n\n    getAvailableDirections(): Direction[] {\n        const directions: Direction[] = [];\n        const visualization = this.offset.visualization[this.size];\n        const rawDirections = visualization.directions;\n        for (let rawDirection in rawDirections) {\n            directions.push(parseInt(rawDirection) as Direction);\n        }\n        return directions;\n    }\n\n    drawIcon(): HTMLCanvasElement {\n        return this.draw(0, 0, 0, true);\n    }\n\n    draw(direction: Direction, state: number, frame: number, isIcon?: boolean): HTMLCanvasElement {\n        const layers = this.getLayers(direction, state, frame, isIcon);\n        const tempCanvas = document.createElement('canvas');\n        const tempCtx = tempCanvas.getContext('2d');\n\n        tempCanvas.width = 1;\n        tempCanvas.height = 1;\n\n        if (tempCtx != null) {\n            let lefterX = 1000;\n            let lefterFlippedX = 1000;\n            let righterX = 0;\n            let upperY = 1000;\n            let lowerY = 0;\n            for (let layer of layers) {\n                let posX = -layer.asset.x;\n                let posY = -layer.asset.y;\n                let img: HTMLImageElement = layer.asset.image;\n\n                if (layer.asset.isFlipped) {\n                    const flippedPosX = layer.asset.x - img.width;\n                    if (lefterFlippedX > flippedPosX) {\n                        lefterFlippedX = flippedPosX;\n                    }\n                }\n\n\n                if (lefterX > posX) {\n                    lefterX = posX;\n                }\n                if (upperY > posY) {\n                    upperY = posY;\n                }\n                if (righterX < posX + img.width) {\n                    righterX = posX + img.width;\n                }\n                if (lowerY < posY + img.height) {\n                    lowerY = posY + img.height;\n                }\n\n                tempCanvas.width = righterX - lefterX;\n                tempCanvas.height = lowerY - upperY;\n            }\n\n            for (let layer of layers) {\n                let posX = -lefterX - layer.asset.x;\n                let posY = -upperY - layer.asset.y;\n                let img: HTMLImageElement | HTMLCanvasElement = layer.asset.image;\n\n                if (layer.asset.isFlipped) {\n                    const flipped = flipImage(img);\n                    if (flipped != null) {\n                        posX = layer.asset.x - img.width - lefterFlippedX;\n                        img = flipped;\n                    }\n                }\n\n                if (layer.ink != null && layer.ink === 'ADD') {\n                    tempCtx.globalCompositeOperation = \"lighter\";\n                } else {\n                    tempCtx.globalCompositeOperation = \"source-over\";\n                }\n\n                if (layer.alpha != null) {\n                    const tinted = this._tintSprite(img, 0xffffff, layer.alpha);\n                    if (tinted != null) {\n                        img = tinted;\n                    }\n                }\n\n                if (layer.color != null) {\n                    const tinted = this._tintSprite(img, layer.color, 255);\n                    if (tinted != null) {\n                        img = tinted;\n                    }\n                }\n\n                tempCtx.drawImage(img, posX, posY);\n            }\n        }\n\n        return tempCanvas;\n    }\n\n    _int2rgb(color: number): RGB {\n        return {\n            r: ((color >> 16) & 0xff),\n            g: ((color >> 8) & 0xff),\n            b: ((color) & 0xff)\n        }\n    }\n\n    _tintSprite(img: HTMLCanvasElement | HTMLImageElement, color: number, alpha: number): HTMLCanvasElement | null {\n        let element = document.createElement('canvas');\n        let c = element.getContext(\"2d\");\n        if (c == null)\n            return null;\n\n        let rgb = this._int2rgb(color);\n\n        let width = img.width;\n        let height = img.height;\n\n        element.width = width;\n        element.height = height;\n\n        c.drawImage(img, 0, 0);\n        let imageData = c.getImageData(0, 0, width, height);\n        for (let y = 0; y < height; y++) {\n            let inpos = y * width * 4;\n            for (let x = 0; x < width; x++) {\n                inpos++; //r\n                inpos++; //g\n                inpos++; //b\n                let pa = imageData.data[inpos++];\n                if (pa !== 0) {\n                    imageData.data[inpos - 1] = alpha; //A\n                    imageData.data[inpos - 2] = Math.round(rgb.b * imageData.data[inpos - 2] / 255); //B\n                    imageData.data[inpos - 3] = Math.round(rgb.g * imageData.data[inpos - 3] / 255); //G\n                    imageData.data[inpos - 4] = Math.round(rgb.r * imageData.data[inpos - 4] / 255); //R\n                }\n            }\n        }\n        c.putImageData(imageData, 0, 0);\n        return element;\n    }\n\n    getLayers(direction: Direction, state: number, frame: number, isIcon?: boolean): LayerData[] {\n        const chunks: LayerData[] = [];\n        const { itemName, colorId } = splitItemNameAndColor(this.itemData.classname);\n\n        const visualization = this.offset.visualization[isIcon ? 1 : this.size];\n        for (let i = isIcon ? 0 : -1; i < visualization.layerCount; i++) {\n            let layerData: any = { id: i, frame: 0, resourceName: '' };\n\n            if (i === -1) {\n                layerData.alpha = 77;\n            }\n            if (visualization.layers != null) {\n                for (let layer of visualization.layers) {\n                    if (layer.layerId === i) {\n                        if (layer.z != null) {\n                            layerData.z = layer.z;\n                        }\n                        if (layer.ink != null) {\n                            layerData.ink = layer.ink;\n                        }\n                        if (layer.alpha != null) {\n                            layerData.alpha = layer.alpha;\n                        }\n                        if (layer.ignoreMouse != null) {\n                            layerData.ignoreMouse = layer.ignoreMouse === 1;\n                        }\n                    }\n                }\n            }\n            if (visualization.directions != null && visualization.directions[direction] != null) {\n                for (let overrideLayer of visualization.directions[direction]) {\n                    if (overrideLayer.layerId === i && overrideLayer.z != null) {\n                        layerData.z = overrideLayer.z;\n                    }\n                }\n            }\n\n            if (visualization.colors != null && visualization.colors[colorId] != null) {\n                for (let colorLayer of visualization.colors[colorId]) {\n                    if (colorLayer.layerId === i) {\n                        layerData.color = parseInt(colorLayer.color, 16);\n                    }\n                }\n            }\n\n            if (visualization.animations != null && visualization.animations[state] != null) {\n                for (let animationLayer of visualization.animations[state].layers) {\n                    if (animationLayer.layerId === i && animationLayer.frameSequence != null) {\n                        if (animationLayer.frameSequence.length === 1) {\n                            layerData.frame = animationLayer.frameSequence[0][frame % animationLayer.frameSequence[0].length];\n                        } else {\n                            let frameCount = 0;\n                            for (let i = 0; i < animationLayer.frameSequence.length; i++) {\n                                const currentSequence = animationLayer.frameSequence[i];\n                                if (frame < currentSequence.length + frameCount && frame > frameCount) {\n                                    layerData.frame = currentSequence[(frame - frameCount - 1) % currentSequence.length];\n                                    break;\n                                } else {\n                                    frameCount += currentSequence.length;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            layerData.resourceName = buildResourceName(itemName, isIcon ? 1 : this.size, i, direction, layerData.frame);\n\n            if (this.assets[layerData.resourceName] != null) {\n                layerData.asset = this.assets[layerData.resourceName];\n                chunks.push(layerData);\n            }\n        }\n\n        return chunks;\n    }\n}\n\nexport interface LayerData {\n    id: number,\n    resourceName: string,\n    asset: FurniAsset,\n    frame: number,\n    alpha?: number,\n    color?: number,\n    ink?: string,\n    ignoreMouse?: boolean,\n    z?: number,\n};\n\nconst buildResourceName = (itemName: string, size: Size, layerId: number, direction: Direction, frame: number): string => {\n    if (size === 1) {\n        return itemName + \"_icon_\" + getLayerName(layerId);\n    }\n    return itemName + \"_\" + size + \"_\" + getLayerName(layerId) + \"_\" + direction + \"_\" + frame;\n};\n\nconst getLayerName = (layerId: number): string => {\n    if (layerId === -1) {\n        return \"sd\";\n    }\n    return String.fromCharCode(97 + layerId);\n};\n\ninterface RGB {\n    r: number, g: number, b: number\n}\n\nexport const flipImage = (img: HTMLCanvasElement | HTMLImageElement): HTMLCanvasElement | null => {\n    let element = document.createElement('canvas');\n    let c = element.getContext(\"2d\");\n    if (c == null)\n        return null;\n\n    let width = img.width;\n    let height = img.height;\n    element.width = width;\n    element.height = height;\n\n    c.save();\n    c.scale(-1, 1);\n    c.drawImage(img, 0, 0, width * -1, height);\n    c.restore();\n\n    return element;\n}","export default class FurniAsset {\n    image: HTMLImageElement;\n    x: number;\n    y: number;\n    isFlipped: boolean;\n\n    constructor(image: HTMLImageElement, x: number, y: number, isFlipped: boolean) {\n        this.image = image;\n        this.x = x;\n        this.y = y;\n        this.isFlipped = isFlipped;\n    }\n}\n\nexport interface FurniAssetDictionary {\n    [id: string]: FurniAsset;\n}","export type AtlasFrame = {\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    rotated: boolean;\n    trimmed: boolean;\n    spriteSourceSize: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    sourceSize: {\n        w: number;\n        h: number;\n    };\n    pivot: {\n        x: number;\n        y: number;\n    };\n};\n\nexport type Atlas = {\n    frames: {\n        [id: string]: AtlasFrame;\n    },\n    meta: {\n        app: string;\n        version: string;\n        image: string;\n        format: string;\n        size: {\n            w: number;\n            h: number;\n        };\n        scale: number;\n    };\n};\n\nexport const extractImage = (atlas: Atlas, image: HTMLImageElement, sourceName: string) => {\n    const currentImageData = atlas.frames[sourceName];\n    // specify desired x,y,width,height\n    // to be clipped from the spritesheet\n    const { x, y, w, h } = currentImageData.frame;\n    //const x = 178, y = 0, w = 67, h = 64;\n\n    // create an in-memory canvas\n    const canvas = document.createElement('canvas');\n    canvas.width = w;\n    canvas.height = h;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx != null) {\n        // size the canvas to the desired sub-sprite size\n        canvas.width = w;\n        canvas.height = h;\n\n        // clip the sub-sprite from x,y,w,h on the spritesheet image\n        // and draw the clipped sub-sprite on the canvas at 0,0\n        ctx.drawImage(image, x, y, w, h, 0, 0, w, h);\n\n        // convert the canvas to an image\n        const subsprite = new Image();\n        subsprite.src = canvas.toDataURL();\n        return subsprite;\n    }\n    return null;\n};\n\nexport const extractImages = (atlas: Atlas, image: HTMLImageElement) => {\n    const newImages: { [id: string]: HTMLImageElement } = {};\n\n    for (let subImage in atlas.frames) {\n        const subsprite = extractImage(atlas, image, subImage);\n        if (subsprite != null) {\n            newImages[subImage] = subsprite;\n        }\n    }\n    return newImages;\n};","export enum LockType {\n    Open, Locked, Password\n};\nexport default class RoomData {\n    id: number;\n    name: string;\n    owner: string;\n    description: string;\n    capacity: number;\n    userCount: number;\n    isFavourite: boolean;\n    lockType: LockType;\n\n    constructor(id: number, name: string, owner: string, description: string, capacity: number, userCount: number, isFavourite: boolean, lockType: LockType) {\n        this.id = id;\n        this.name = name;\n        this.owner = owner;\n        this.description = description;\n        this.capacity = capacity;\n        this.userCount = userCount;\n        this.isFavourite = isFavourite;\n        this.lockType = lockType;\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_ITEM_PICK_UP } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestFurniPickUp extends ClientMessage {\n    constructor(itemId: number) {\n        super(REQUEST_ITEM_PICK_UP);\n        this.appendInt(itemId);\n    }\n}","import Room from \"../Room\";\nimport { Container, Sprite, BLEND_MODES } from 'pixi.js-legacy';\nimport BaseItem from \"../../items/BaseItem\";\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\nimport RequestFurniInteract from \"../../communication/outgoing/rooms/RequestFurniInteract\";\nimport { ItemType, Direction } from \"../../imagers/furniture/FurniImager\";\nimport { Selectable } from \"../RoomEngine\";\nimport RequestFurniPickUp from \"../../communication/outgoing/rooms/RequestFurniPickUp\";\n\nconst FRAME_SPEED = 100;\n\nexport default abstract class RoomItem implements Selectable {\n    id: number;\n    _x: number;\n    _y: number;\n    _z: number;\n    _state: number;\n    _nextState: number;\n    rot: Direction;\n    _frame: number;\n    _frameCounter: number;\n    baseId: number;\n    sprites: Sprite[];\n    selectableSprites: Sprite[];\n    containers: Container[];\n    selectableContainers: Container[];\n    baseItem: BaseItem | null;\n    loaded: boolean;\n    drawAsIcon: boolean;\n\n    colorId: number;\n\n    room: Room;\n\n    constructor(id: number, x: number, y: number, z: number, rot: Direction, state: number, baseId: number, room: Room, placeholderSprite: Sprite) {\n        this.id = id;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this._state = state;\n        this._nextState = -1;\n        this.rot = rot;\n        this.baseId = baseId;\n        this.baseItem = null;\n        this.room = room;\n\n        this._frame = 0;\n        this._frameCounter = 0;\n\n        this.loaded = false;\n        this.drawAsIcon = false;\n        this.colorId = Math.floor(Math.random() * (16777215 - 1)) + 1;\n\n        const placeholderContainer = new Container();\n        placeholderContainer.zIndex = this.calculateZIndex(0, 0);\n\n        const placeholderSelectableContainer = new Container();\n        placeholderSelectableContainer.zIndex = placeholderContainer.zIndex;\n\n        const placeholderSelectableSprite = new Sprite();\n\n        this.sprites = [placeholderSprite];\n        this.containers = [placeholderContainer];\n        this.containers[0].addChild(placeholderSprite);\n\n        this.selectableSprites = [placeholderSelectableSprite];\n        this.selectableContainers = [placeholderSelectableContainer];\n        this.selectableContainers[0].addChild(placeholderSelectableSprite);\n        this.updateSpritePosition();\n    }\n\n    _nextPrivateFrame() {\n        this._frame++;\n        if (this._nextState !== -1 && this.baseItem != null) {\n            if (this._frame >= this.baseItem.furniBase.states[this._state].count) {\n                this._actuallySetState(this._nextState);\n            }\n        }\n\n        this.updateTextures();\n    }\n\n    setState(state: number) {\n        if (this.baseItem != null && this.baseItem.furniBase.states[state] != null) {\n            const { transition } = this.baseItem.furniBase.states[state];\n            if (transition != null) {\n                this._state = transition;\n                this._frame = 0;\n                this._nextState = state;\n            } else {\n                this._actuallySetState(state);\n            }\n        }\n    }\n\n\n    _actuallySetState(state: number) {\n        this._state = state;\n        this._nextState = -1;\n        this._frame = 0;\n        this.updateTextures(); // ??????????????\n    }\n\n    tick(delta: number) {\n        this._frameCounter += delta;\n        if (this._frameCounter >= FRAME_SPEED) {\n            this._nextPrivateFrame();\n            this._frameCounter = 0;\n        }\n    }\n\n    setAdditionalSprites() {\n        if (this.baseItem != null) {\n            const layerCount = this.baseItem.furniBase.offset.visualization[this.baseItem.furniBase.size].layerCount + 1;\n\n            for (let i = 1; i < layerCount; i++) {\n                const sprite = new Sprite();\n                sprite.visible = false;\n\n                const selectableSprite = new Sprite();\n                selectableSprite.visible = false;\n\n                const currentContainer = new Container();\n                currentContainer.addChild(sprite);\n\n                const currentSelectableContainer = new Container();\n                currentSelectableContainer.addChild(selectableSprite);\n\n                this.sprites.push(sprite);\n                this.containers.push(currentContainer);\n\n                this.selectableSprites.push(selectableSprite);\n                this.selectableContainers.push(currentSelectableContainer);\n            }\n            this.updateTextures();\n        }\n    }\n\n    updateTextures() {\n        if (this.baseItem != null) {\n            let actualState = 0;\n            let actualFrame = 0;\n            let layerIndex = 0;\n            if (this.drawAsIcon) {\n                const sprite = this.sprites[layerIndex];\n                const container = this.containers[layerIndex];\n\n                sprite.texture = this.baseItem.iconTexture;\n                sprite.x = -(this.baseItem.iconTexture.width / 2);\n                sprite.y = -(this.baseItem.iconTexture.height / 2);\n                sprite.scale.x = 1;\n                sprite.blendMode = BLEND_MODES.NORMAL;\n                sprite.alpha = 1.0;\n                sprite.tint = 0xFFFFFF;\n\n                container.zIndex = this.calculateZIndex(0, layerIndex);\n                layerIndex++;\n            } else {\n                if (this.baseItem.furniBase.states[this._state] != null) {\n                    actualState = this._state;\n                    actualFrame = this._frame % this.baseItem.furniBase.states[this._state].count;\n                }\n                for (let layer of this.baseItem.furniBase.getLayers(this.rot, actualState, actualFrame)) {\n                    const texture = this.baseItem.getTexture(layer.resourceName);\n                    const selectableTexture = this.baseItem.getSolidTexture(layer.resourceName);\n                    if (texture != null) {\n                        const sprite = this.sprites[layerIndex];\n                        const selectableSprite = this.selectableSprites[layerIndex];\n                        const zIndex = layer.z || 0;\n\n                        sprite.texture = texture;\n                        sprite.visible = true;\n\n                        if (selectableTexture != null && !layer.ignoreMouse) {\n                            selectableSprite.texture = selectableTexture;\n                            selectableSprite.visible = true;\n                        }\n\n                        sprite.x = -layer.asset.x;\n                        sprite.y = -layer.asset.y;\n\n                        selectableSprite.x = -layer.asset.x;\n                        selectableSprite.y = -layer.asset.y;\n\n                        if (layer.asset.isFlipped) {\n                            sprite.x = layer.asset.x;\n                            sprite.scale.x = -1;\n\n                            selectableSprite.x = layer.asset.x;\n                            selectableSprite.scale.x = -1;\n                        } else {\n                            sprite.scale.x = 1;\n\n                            selectableSprite.scale.x = 1;\n                        }\n\n                        if (layer.ink != null && layer.ink === 'ADD') {\n                            sprite.blendMode = BLEND_MODES.ADD;\n                        } else {\n                            sprite.blendMode = BLEND_MODES.NORMAL;\n                        }\n\n                        if (layer.alpha != null) {\n                            sprite.alpha = layer.alpha / 255;\n                        } else {\n                            sprite.alpha = 1.0;\n                        }\n\n                        if (layer.color != null) {\n                            sprite.tint = layer.color;\n                        } else {\n                            sprite.tint = 0xFFFFFF;\n                        }\n\n                        //////////////////// GENERATE A COLOR FOR EACH FURNI\n                        selectableSprite.tint = this.colorId;\n                        ////////////////////\n\n                        this.containers[layerIndex].zIndex = this.calculateZIndex(zIndex, layerIndex);\n                        this.selectableContainers[layerIndex].zIndex = this.containers[layerIndex].zIndex;\n                        layerIndex++;\n                    }\n                }\n            }\n            for (let i = layerIndex; i < this.sprites.length; i++) {\n                this.sprites[i].visible = false;\n                this.selectableSprites[i].visible = false;\n            }\n        }\n    }\n\n    loadBase(): Promise<ContainerGroup> {\n        return BobbaEnvironment.getGame().baseItemManager.getItem(this.getItemType(), this.baseId).then(baseItem => {\n            this.baseItem = baseItem;\n            this.setAdditionalSprites();\n            this.updateSpritePosition();\n            return { containers: this.containers, selectableContainers: this.selectableContainers };\n        });\n    }\n\n    startMovement() {\n        for (let container of this.containers) {\n            container.alpha = 0.7;\n        }\n    }\n\n    stopMovement() {\n        for (let container of this.containers) {\n            container.alpha = 1.0;\n        }\n    }\n\n    abstract rotate(): void;\n\n    abstract calculateZIndex(zIndex: number, layerIndex: number): number;\n\n    abstract updateSpritePosition(): void;\n\n    abstract getItemType(): ItemType;\n\n    abstract updatePosition(x: number, y: number, z: number, rot: Direction, drawAsIcon: boolean): void;\n\n    handleClick = (id: number) => {\n        this.showItemInfo(false);\n    }\n\n    showItemInfo(isUpdate: boolean) {\n        if (this.baseItem != null) {\n            const states = Object.keys(this.baseItem.furniBase.states).length;\n            BobbaEnvironment.getGame().uiManager.onSelectFurni(this.id, this.baseId, this.baseItem.furniBase.itemData.name, this.baseItem.furniBase.itemData.description, this.baseItem.infoImage, isUpdate, true, this.getItemType() === ItemType.FloorItem, true, states !== 1);\n        }\n    }\n\n    handleHover(id: number): void {\n\n    }\n\n    handleDoubleClick(id: number) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestFurniInteract(this.id));\n    }\n\n    pickUp() {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestFurniPickUp(this.id));\n    }\n}\n\ninterface ContainerGroup {\n    containers: Container[],\n    selectableContainers: Container[]\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_ITEM_MOVE } from \"../../protocol/OpCodes/ClientOpCodes\";\nimport { Direction } from \"../../../imagers/furniture/FurniImager\";\n\nexport default class RequestFurniMove extends ClientMessage {\n    constructor(itemId: number, x: number, y: number, rotation: Direction) {\n        super(REQUEST_ITEM_MOVE);\n        this.appendInt(itemId);\n        this.appendInt(x);\n        this.appendInt(y);\n        this.appendInt(rotation);\n    }\n}","import RoomItem from \"./RoomItem\";\nimport { calculateZIndexFloorItem } from \"../RoomEngine\";\nimport { ItemType, Direction } from \"../../imagers/furniture/FurniImager\";\nimport Room from \"../Room\";\nimport { Sprite } from 'pixi.js-legacy';\nimport { FLOOR_ITEM_PLACEHOLDER, FLOOR_ITEM_PLACEHOLDER_OFFSET_X, FLOOR_ITEM_PLACEHOLDER_OFFSET_Y } from \"../../graphics/GenericSprites\";\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\nimport RequestFurniMove from \"../../communication/outgoing/rooms/RequestFurniMove\";\n\nexport default class FloorItem extends RoomItem {\n    constructor(id: number, x: number, y: number, z: number, rot: Direction, state: number, baseId: number, room: Room) {\n        const placeholder = new Sprite();\n        placeholder.texture = BobbaEnvironment.getGame().engine.getTexture(FLOOR_ITEM_PLACEHOLDER);\n        placeholder.x = FLOOR_ITEM_PLACEHOLDER_OFFSET_X;\n        placeholder.y = FLOOR_ITEM_PLACEHOLDER_OFFSET_Y;\n\n        super(id, x, y, z, rot, state, baseId, room, placeholder);\n    }\n\n    updateSpritePosition() {\n        const local = this.room.engine.tileToLocal(this._x, this._y, this._z);\n        let x = local.x + DRAWING_OFFSET_X;\n        let y = local.y + DRAWING_OFFSET_Y;\n        if (this.drawAsIcon) {\n            x = this._x;\n            y = this._y;\n        }\n        for (let container of this.containers) {\n            container.x = x;\n            container.y = y;\n        }\n\n        for (let container of this.selectableContainers) {\n            container.x = x;\n            container.y = y;\n        }\n    }\n\n    updatePosition(tileX: number, tileY: number, tileZ: number, rot: Direction, drawAsIcon: boolean) {\n        this._x = tileX;\n        this._y = tileY;\n        this._z = tileZ;\n        this.rot = rot;\n        this.drawAsIcon = drawAsIcon;\n        this.updateSpritePosition();\n        this.updateTextures();\n    }\n\n    calculateZIndex(zIndex: number, layerIndex: number): number {\n        return calculateZIndexFloorItem(this._x, this._y, this._z, zIndex, layerIndex)\n    }\n\n    getItemType(): ItemType {\n        return ItemType.FloorItem;\n    }\n\n    rotate() {\n        if (this.baseItem != null) {\n            BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestFurniMove(this.id, this._x, this._y, this.baseItem.calculateNextDirection(this.rot)));\n        }\n    }\n}\n\n\nconst DRAWING_OFFSET_X = 32;\nconst DRAWING_OFFSET_Y = 16;","import Room from \"./Room\";\nimport { Sprite, Container, Point, Texture } from 'pixi.js-legacy';\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport MainEngine from \"../graphics/MainEngine\";\nimport { ROOM_TILE_WIDTH, ROOM_TILE_HEIGHT, ROOM_SELECTED_TILE, ROOM_WALL_L_OFFSET_X, ROOM_WALL_L_OFFSET_Y, ROOM_WALL_R_OFFSET_X, ROOM_WALL_R_OFFSET_Y } from \"../graphics/GenericSprites\";\nimport RequestMovement from \"../communication/outgoing/rooms/RequestMovement\";\nimport FloorItem from \"./items/FloorItem\";\nimport RoomItem from \"./items/RoomItem\";\nimport { Direction } from \"../imagers/furniture/FurniImager\";\n\nconst CAMERA_CENTERED_OFFSET_X = 0;\nconst CAMERA_CENTERED_OFFSET_Y = 150;\n\nconst ROOM_SELECTED_TILE_OFFSET_X = 0;\nconst ROOM_SELECTED_TILE_OFFSET_Y = -3;\n\nexport default class RoomEngine {\n    room: Room;\n    container: Container;\n    selectableContainer: Container;\n    floorSprites: Sprite[];\n    wallSprites: Sprite[];\n    selectedTileSprite?: Sprite;\n    lastMousePositionX: number;\n    lastMousePositionY: number;\n    userSprites: ContainerDictionary;\n    shadowSprites: ContainerDictionary;\n    roomItemSprites: ContainerArrayDictionary;\n    selectableSprites: ContainerArrayDictionary;\n    selectableItems: SelectableDictionary;\n    currentSelectedItem?: Selectable | null;\n    movingItem: RoomItem | null;\n    movingItemPosition: { x: number, y: number, z: number, rot: Direction };\n    wallPoints: { x: number, y: number, z: number, rot: Direction }[];\n    maxHeight: number;\n\n    constructor(room: Room) {\n        this.room = room;\n        this.container = new Container();\n        this.selectableContainer = new Container();\n        this.floorSprites = [];\n        this.wallSprites = [];\n        this.userSprites = {};\n        this.shadowSprites = {};\n        this.roomItemSprites = {};\n        this.selectableSprites = {};\n        this.selectableItems = {};\n        this.lastMousePositionX = 0;\n        this.lastMousePositionY = 0;\n        this.maxHeight = 1;\n\n        this.movingItem = null;\n        this.movingItemPosition = { x: 0, y: 0, z: 0, rot: 0 };\n\n        this.wallPoints = [];\n\n        this.container.sortableChildren = true;\n        this.selectableContainer.sortableChildren = true;\n        this.onResize();\n        this.setWalls();\n        this.setFloor();\n        this.setSelectedTile();\n    }\n\n    onResize() {\n        this.centerCamera();\n    }\n\n    centerCamera() {\n        const { model, roomUserManager } = this.room;\n        const { currentUser } = BobbaEnvironment.getGame().userManager;\n        const doorCoords = this.tileToLocal(model.doorX, model.doorY, 0);\n\n        let centerPointX = doorCoords.x;\n        let centerPointY = doorCoords.y;\n\n        if (currentUser != null && roomUserManager != null) {\n            const roomUser = roomUserManager.getUser(currentUser.id);\n            if (roomUser != null) {\n                const userCoords = this.tileToLocal(roomUser._x, roomUser._y, roomUser._z);\n                centerPointX = userCoords.x;\n                centerPointY = userCoords.y;\n            }\n        }\n\n        this.container.x = Math.round((MainEngine.getViewportWidth() - (centerPointX + CAMERA_CENTERED_OFFSET_X)) / 2);\n        this.container.y = Math.round((MainEngine.getViewportHeight() - (centerPointY + CAMERA_CENTERED_OFFSET_Y)) / 2);\n        this.selectableContainer.x = this.container.x;\n        this.selectableContainer.y = this.container.y;\n    }\n\n    setSelectedTile() {\n        const floorTexture = BobbaEnvironment.getGame().engine.getTexture(ROOM_SELECTED_TILE);\n        this.selectedTileSprite = new Sprite(floorTexture);\n        this.selectedTileSprite.visible = false;\n        this.container.addChild(this.selectedTileSprite);\n    }\n\n    setChatContainer(container: Container) {\n        container.zIndex = calculateZIndexChat();\n        this.container.addChild(container);\n    }\n\n    addUserContainer(id: number, container: Container, shadowSprite: Sprite) {\n        this.userSprites[id] = container;\n        this.shadowSprites[id] = shadowSprite;\n        this.container.addChild(container);\n        this.container.addChild(shadowSprite);\n    }\n\n    addRoomItemContainerSet(id: number, containers: Container[]) {\n        this.roomItemSprites[id] = containers;\n        for (let container of containers) {\n            this.container.addChild(container);\n        }\n    }\n\n    addSelectableContainer(colorId: number, selectableContainers: Container[], selectableElement: Selectable) {\n        this.selectableSprites[colorId] = selectableContainers;\n        this.selectableItems[colorId] = selectableElement;\n\n        for (let container of selectableContainers) {\n            this.selectableContainer.addChild(container);\n        }\n    }\n\n    startRoomItemMove(roomItem: RoomItem) {\n        this.cancelRoomItemMove();\n        this.movingItem = roomItem;\n        this.movingItemPosition = { x: roomItem._x, y: roomItem._y, z: roomItem._z, rot: roomItem.rot };\n        this.movingItem.startMovement();\n    }\n\n    cancelRoomItemMove() {\n        if (this.movingItem != null) {\n            const { x, y, z, rot } = this.movingItemPosition;\n            this.movingItem.updatePosition(x, y, z, rot, false);\n            this.movingItem.stopMovement();\n            this.room.roomItemManager.cancelRoomItemMovement(this.movingItem);\n            this.movingItem = null;\n        }\n    }\n\n    finishRoomItemMovement(globalX: number, globalY: number) {\n        if (this.movingItem != null) {\n            if (this.movingItem instanceof FloorItem) {\n                const { x, y } = this.globalToTile(globalX, globalY);\n                if (this.canPlaceFloorItem(x, y, this.movingItem)) {\n                    const z = this.room.model.heightMap[x][y] - 1;\n                    this.movingItem.updatePosition(x, y, z, this.movingItemPosition.rot, false);\n                    this.room.roomItemManager.finishRoomItemMovement(this.movingItem);\n                } else {\n                    this.cancelRoomItemMove();\n                }\n            } else {\n                const { x, y } = this.globalToLocal(globalX, globalY);\n                if (this.canPlaceWallItem(globalX, globalY)) {\n                    this.movingItem.updatePosition(x, y, 0, this.calculateWallDirection(globalX, globalY), false);\n                    this.room.roomItemManager.finishRoomItemMovement(this.movingItem);\n                } else {\n                    this.cancelRoomItemMove();\n                }\n            }\n            this.movingItem = null;\n        }\n    }\n\n    isMovingRoomItem() {\n        return this.movingItem != null;\n    }\n\n    updateMovingItem(globalX: number, globalY: number) {\n        if (this.movingItem != null) {\n            if (this.movingItem instanceof FloorItem) {\n                const { x, y } = this.globalToTile(globalX, globalY);\n                if (this.canPlaceFloorItem(x, y, this.movingItem)) {\n                    const z = this.room.model.heightMap[x][y] - 1;\n                    this.movingItem.updatePosition(x, y, z, this.movingItemPosition.rot, false);\n                } else {\n                    const local = this.globalToLocal(globalX, globalY);\n                    this.movingItem.updatePosition(local.x, local.y, 0, this.movingItemPosition.rot, true);\n                }\n            } else {\n                const { x, y } = this.globalToLocal(globalX, globalY);\n                if (this.canPlaceWallItem(globalX, globalY)) {\n                    this.movingItem.updatePosition(x, y, 0, this.calculateWallDirection(globalX, globalY), false);\n                } else {\n                    this.movingItem.updatePosition(x, y, 0, this.calculateWallDirection(globalX, globalY), true);\n                }\n            }\n        }\n    }\n\n    calculateWallDirection(globalX: number, globalY: number): Direction {\n        const local = this.globalToLocal(globalX, globalY);\n        const wall = this.localToWall(local.x, local.y);\n        wall.x--;\n\n        for (let wallPoint of this.wallPoints) {\n            const localWall = this.tileToLocal(wallPoint.x, wallPoint.y, wallPoint.z);\n            const wallCoords = this.localToWall(localWall.x, localWall.y);\n\n            if (wallPoint.rot === 4) {\n                const diffX = wall.x - wallCoords.x;\n\n                if (diffX < 1.1 && diffX > 0) {\n                    return 4;\n                }\n            }\n        }\n        return 2;\n    }\n\n    canPlaceWallItem(globalX: number, globalY: number): boolean {\n        const local = this.globalToLocal(globalX, globalY);\n        const wall = this.localToWall(local.x, local.y);\n        const invertedWall = this.localToWall(-local.x, local.y);\n        wall.x--;\n\n        for (let wallPoint of this.wallPoints) {\n            const localWall = this.tileToLocal(wallPoint.x, wallPoint.y, wallPoint.z);\n            if (wallPoint.rot === 4) {\n                const wallCoords = this.localToWall(localWall.x, localWall.y);\n                const diffX = wall.x - wallCoords.x;\n                const diffY = wall.y - wallCoords.y;\n                const offset = this.maxHeight - wallPoint.z - 1;\n\n                if (diffX < 1.1 && diffX > 0 && diffY < -0.5 && diffY > -4 - offset) {\n                    return true;\n                }\n            } else {\n                const wallCoords = this.localToWall(-localWall.x, localWall.y);\n                const diffX = wallCoords.x - invertedWall.x;\n                const diffY = invertedWall.y - wallCoords.y;\n                const offset = this.maxHeight - wallPoint.z - 1;\n\n                if (diffX < 1.1 && diffX > 0 && diffY < 0.5 && diffY > -3 - offset) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    canPlaceFloorItem(tileX: number, tileY: number, floorItem: FloorItem): boolean {\n        const { model } = this.room;\n        let maxX = tileX;\n        let maxY = tileY;\n        if (floorItem.baseItem != null) {\n            const first = floorItem.baseItem.furniBase.offset.logic.dimensions.x;\n            const second = floorItem.baseItem.furniBase.offset.logic.dimensions.y;\n            if (first > 1) {\n                if (floorItem.rot === 0 || floorItem.rot === 4) {\n                    maxX += first - 1;\n                }\n                if (floorItem.rot === 2 || floorItem.rot === 6) {\n                    maxY += first - 1;\n                }\n            }\n            if (second > 1) {\n                if (floorItem.rot === 0 || floorItem.rot === 4) {\n                    maxY += first - 1;\n                }\n                if (floorItem.rot === 2 || floorItem.rot === 6) {\n                    maxX += first - 1;\n                }\n            }\n        }\n        return model.isValidTile(tileX, tileY) && model.isValidTile(maxX, maxY);\n    }\n\n    removeSelectableContainer(colorId: number) {\n        const containers = this.selectableSprites[colorId];\n        if (containers != null) {\n            for (let container of containers) {\n                this.selectableContainer.removeChild(container);\n            }\n            delete (this.selectableSprites[colorId]);\n        }\n\n        const items = this.selectableItems[colorId];\n        if (items != null) {\n            delete (this.selectableItems[colorId]);\n        }\n    }\n\n    removeRoomItemContainerSet(id: number) {\n        const containers = this.roomItemSprites[id];\n        if (containers != null) {\n            for (let container of containers) {\n                this.container.removeChild(container);\n            }\n            delete (this.roomItemSprites[id]);\n        }\n    }\n\n    removeUserSprite(id: number) {\n        const sprite = this.userSprites[id];\n        const shadowSprite = this.shadowSprites[id];\n        if (sprite != null) {\n            this.container.removeChild(sprite);\n            delete (this.userSprites[id]);\n        }\n        if (shadowSprite != null) {\n            this.container.removeChild(shadowSprite);\n            delete (this.shadowSprites[id]);\n        }\n    }\n\n    _addWallSprite(texture: Texture | undefined, x: number, y: number, z: number, offsetX: number, offsetY: number, priority: number) {\n        const currentSprite = new Sprite(texture);\n        const localPos = this.tileToLocal(x, y, z);\n        currentSprite.x = localPos.x + offsetX;\n        currentSprite.y = localPos.y + offsetY;\n        currentSprite.zIndex = calculateZIndex(x, y, 0, priority);\n        this.wallSprites.push(currentSprite);\n        this.container.addChild(currentSprite);\n    }\n\n    setWalls() {\n        const { roomImager } = BobbaEnvironment.getGame();\n        const model = this.room.model;\n        let minY = model.maxX;\n\n        let maxHeight = 1;\n        for (let i = 0; i < model.maxX; i++) {\n            for (let j = 0; j < model.maxY; j++) {\n                const tile = model.heightMap[i][j];\n                if (tile > maxHeight) {\n                    maxHeight = tile;\n                }\n            }\n        }\n\n        this.maxHeight = maxHeight;\n\n        for (let i = 0; i < model.maxX; i++) {\n            for (let j = 0; j < model.maxY; j++) {\n                const tile = model.heightMap[i][j];\n                if ((model.doorX !== i || model.doorY !== j) && tile > 0 && j <= minY) {\n                    if (minY > j) {\n                        minY = j;\n                    }\n                    this._addWallSprite(roomImager.generateRoomWallR(maxHeight - tile), i, j + 1, maxHeight - 1, ROOM_WALL_R_OFFSET_X, ROOM_WALL_R_OFFSET_Y + 4, PRIORITY_WALL);\n                    this.wallPoints.push({ x: i, y: j, z: tile - 1, rot: 4 });\n                }\n            }\n        }\n        let minX = model.maxX;\n        for (let j = 0; j < model.maxY; j++) {\n            for (let i = 0; i < model.maxX; i++) {\n                const tile = model.heightMap[i][j];\n                if ((model.doorX !== i || model.doorY !== j) && tile > 0 && i <= minX) {\n                    if (minX > i) {\n                        minX = i;\n                    }\n                    if (j === model.doorY) {\n                        this._addWallSprite(roomImager.generateRoomDoorL(), i, j, maxHeight - 1, ROOM_WALL_L_OFFSET_X, ROOM_WALL_L_OFFSET_Y + 4, PRIORITY_WALL);\n                    } else if (j === model.doorY - 1) {\n                        this._addWallSprite(roomImager.generateRoomDoorBeforeL(maxHeight - tile), i, j, maxHeight - 1, ROOM_WALL_L_OFFSET_X, ROOM_WALL_L_OFFSET_Y + 4, PRIORITY_WALL);\n                    } else {\n                        this._addWallSprite(roomImager.generateRoomWallL(maxHeight - tile), i, j, maxHeight - 1, ROOM_WALL_L_OFFSET_X, ROOM_WALL_L_OFFSET_Y + 4, PRIORITY_WALL);\n                    }\n                    this.wallPoints.push({ x: i, y: j, z: tile - 1, rot: 2 });\n                    break;\n                }\n            }\n        }\n    }\n\n    setFloor() {\n        const { roomTileTexture, roomStairLTexture, roomStairRTexture } = BobbaEnvironment.getGame().roomImager;\n\n        this.floorSprites = [];\n        const model = this.room.model;\n        for (let i = 0; i < model.maxX; i++) {\n            for (let j = 0; j < model.maxY; j++) {\n                const tile = model.heightMap[i][j];\n                if (tile > 0) {\n                    if (model.isValidTile(i + 1, j) && model.heightMap[i + 1][j] < tile) {\n                        const currentSprite = new Sprite(roomStairLTexture);\n                        const localPos = this.tileToLocal(i, j, tile - 1);\n                        currentSprite.x = localPos.x;\n                        currentSprite.y = localPos.y;\n\n                        currentSprite.zIndex = calculateZIndex(i, j, 0, model.doorX === i && model.doorY === j ? PRIORITY_DOOR_FLOOR : PRIORITY_FLOOR);\n                        this.floorSprites.push(currentSprite);\n                        this.container.addChild(currentSprite);\n                    } else if (model.isValidTile(i - 1, j) && model.heightMap[i - 1][j] > tile) { }\n                    else if (model.isValidTile(i, j - 1) && model.heightMap[i][j - 1] > tile) { }\n                    else if (model.isValidTile(i, j + 1) && model.heightMap[i][j + 1] < tile) {\n                        const currentSprite = new Sprite(roomStairRTexture);\n                        const localPos = this.tileToLocal(i, j, tile - 1);\n                        currentSprite.x = localPos.x - 34;\n                        currentSprite.y = localPos.y + 0;\n\n                        currentSprite.zIndex = calculateZIndex(i, j, 0, model.doorX === i && model.doorY === j ? PRIORITY_DOOR_FLOOR : PRIORITY_FLOOR);\n                        this.floorSprites.push(currentSprite);\n                        this.container.addChild(currentSprite);\n                    }\n                    else {\n                        const currentSprite = new Sprite(roomTileTexture);\n                        const localPos = this.tileToLocal(i, j, tile - 1);\n                        currentSprite.x = localPos.x;\n                        currentSprite.y = localPos.y;\n\n                        currentSprite.zIndex = calculateZIndex(i, j, 0, model.doorX === i && model.doorY === j ? PRIORITY_DOOR_FLOOR : PRIORITY_FLOOR);\n                        this.floorSprites.push(currentSprite);\n                        this.container.addChild(currentSprite);\n                    }\n                }\n            }\n        }\n    }\n\n    tileToLocal(x: number, y: number, z: number): Point {\n        return new Point((x - y) * ROOM_TILE_WIDTH, (x + y) * ROOM_TILE_HEIGHT - (z * ROOM_TILE_HEIGHT * 2));\n    }\n\n    globalToTileStrict(x: number, y: number): Point | null {\n        const { model } = this.room;\n\n        for (let i = this.maxHeight; i >= 0; i--) {\n            const second = this.globalToTileWithHeight(x, y, i);\n            if (model.isValidTile(second.x, second.y) && model.heightMap[second.x][second.y] === i + 1) {\n                return second;\n            }\n        }\n        return null;\n    }\n\n    globalToTile(x: number, y: number): Point {\n        const { model } = this.room;\n        const first = this.globalToTileWithHeight(x, y, 0);\n\n        for (let i = this.maxHeight; i >= 1; i--) {\n            const second = this.globalToTileWithHeight(x, y, i);\n            if (model.isValidTile(second.x, second.y) && model.heightMap[second.x][second.y] === i + 1) {\n                return second;\n            }\n        }\n        return first;\n    }\n\n    globalToTileWithHeight(x: number, y: number, z: number): Point {\n        const offsetX = this.container.x;\n        const offsetY = this.container.y - (z * ROOM_TILE_HEIGHT * 2);\n\n        const xminusy = (x - ROOM_TILE_WIDTH - offsetX) / ROOM_TILE_WIDTH;\n        const xplusy = (y - offsetY) / ROOM_TILE_HEIGHT;\n\n        const tileX = Math.floor((xminusy + xplusy) / 2);\n        const tileY = Math.floor((xplusy - xminusy) / 2);\n\n        return new Point(tileX, tileY);\n    }\n\n    localToWall(localX: number, localY: number): Point {\n        const x = localX / 32;\n        const y = (localY / 32) - (localX / 64);\n\n        return new Point(x, y);\n    }\n\n    globalToLocal(x: number, y: number): Point {\n        const offsetX = this.container.x;\n        const offsetY = this.container.y;\n        return new Point(x - offsetX, y - offsetY);\n    }\n\n    handleMouseMovement = (mouseX: number, mouseY: number, isDrag: boolean) => {\n        const tile = this.globalToTileStrict(mouseX, mouseY);\n        const colorId = this.getSelectableColorId(mouseX, mouseY);\n        let selectable = null;\n        if (colorId !== -1) {\n            selectable = this.selectableItems[colorId];\n            if (selectable != null) {\n                selectable.handleHover(colorId);\n            }\n        }\n\n        if (isDrag) {\n            const diffX = Math.round(this.lastMousePositionX - mouseX);\n            const diffY = Math.round(this.lastMousePositionY - mouseY);\n            this.container.x -= diffX;\n            this.container.y -= diffY;\n            this.selectableContainer.x = this.container.x;\n            this.selectableContainer.y = this.container.y;\n        }\n        this.lastMousePositionX = Math.round(mouseX);\n        this.lastMousePositionY = Math.round(mouseY);\n        this.updateMovingItem(mouseX, mouseY);\n        if (tile != null) {\n            this.updateSelectedTile(tile.x, tile.y);\n        } else {\n            this.hideSelectedTile();\n        }\n    }\n\n    getSelectableColorId(mouseX: number, mouseY: number): number {\n        const pixels = BobbaEnvironment.getGame().engine.logicPixiApp.renderer.extract.pixels(this.getLogicStage());\n\n        const bounds = this.getLogicStage().getBounds();\n        const stageX = Math.floor(mouseX - bounds.x);\n        const stageY = Math.floor(mouseY - bounds.y);\n        const pos = (stageY * bounds.width + stageX) * 4;\n        if (stageX >= 0 && stageY >= 0 && stageX <= bounds.width && stageY <= bounds.height) {\n            const colorId = rgb2int(pixels[pos], pixels[pos + 1], pixels[pos + 2]);\n            return colorId;\n        }\n        return -1;\n    }\n\n    handleMouseClick = (mouseX: number, mouseY: number, shiftKey: boolean, ctrlKey: boolean, altKey: boolean, focusChat: boolean): Selectable | null => {\n        const { x, y } = this.globalToTile(mouseX, mouseY);\n        const isValidTile = this.room.model.isValidTile(x, y);\n        if (this.isMovingRoomItem()) {\n            this.finishRoomItemMovement(mouseX, mouseY);\n            return null;\n        }\n        const colorId = this.getSelectableColorId(mouseX, mouseY);\n        let selectable = null;\n\n        if (colorId !== -1) {\n            selectable = this.selectableItems[colorId];\n\n            if (selectable != null) {\n                if (shiftKey) {\n                    if (selectable instanceof FloorItem) {\n                        selectable.rotate();\n                    }\n                } else if (ctrlKey) {\n                    if (selectable instanceof RoomItem) {\n                        selectable.pickUp();\n                    }\n                } else if (altKey) {\n                    if (selectable instanceof RoomItem) {\n                        this.startRoomItemMove(selectable);\n                    }\n                }\n\n                selectable.handleClick(colorId);\n            }\n        }\n\n        if (isValidTile) {\n            BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestMovement(x, y));\n        }\n        if (focusChat) {\n            BobbaEnvironment.getGame().uiManager.onFocusChat();\n        }\n        return selectable;\n    }\n\n    handleTouchMove = (mouseX: number, mouseY: number) => {\n        mouseX = Math.floor(mouseX);\n        mouseY = Math.floor(mouseY);\n        this.handleMouseMovement(mouseX, mouseY, true);\n    }\n\n    handleTouchStart = (mouseX: number, mouseY: number) => {\n        mouseX = Math.floor(mouseX);\n        mouseY = Math.floor(mouseY);\n        this.handleMouseMovement(mouseX, mouseY, false);\n        const newSelectedItem = this.handleMouseClick(mouseX, mouseY, false, false, false, false);\n\n        if (newSelectedItem === this.currentSelectedItem) {\n            this.handleMouseDoubleClick(mouseX, mouseY);\n        }\n        this.currentSelectedItem = newSelectedItem;\n    }\n\n    handleMouseDoubleClick = (mouseX: number, mouseY: number) => {\n        const { x, y } = this.globalToTile(mouseX, mouseY);\n        const colorId = this.getSelectableColorId(mouseX, mouseY);\n        const selectable = this.selectableItems[colorId];\n        if (selectable != null) {\n            selectable.handleDoubleClick(colorId);\n        } else if (!this.room.model.isValidTile(x, y)) {\n            this.centerCamera();\n        }\n    }\n\n    hideSelectedTile() {\n        if (this.selectedTileSprite != null) {\n            this.selectedTileSprite.visible = false;\n        }\n    }\n\n    updateSelectedTile(tileX: number, tileY: number) {\n        if (this.selectedTileSprite != null) {\n            const model = this.room.model;\n            const visible = model.isValidTile(tileX, tileY);\n            this.selectedTileSprite.visible = visible;\n            if (visible) {\n                const localPos = this.tileToLocal(tileX, tileY, model.heightMap[tileX][tileY] - 1);\n                this.selectedTileSprite.x = localPos.x + ROOM_SELECTED_TILE_OFFSET_X;\n                this.selectedTileSprite.y = localPos.y + ROOM_SELECTED_TILE_OFFSET_Y;\n            }\n\n            this.selectedTileSprite.zIndex = calculateZIndex(tileX, tileY, 0, model.doorX === tileX && model.doorY === tileY ? PRIORITY_DOOR_FLOOR_SELECT : PRIORITY_FLOOR_SELECT);\n        }\n    }\n\n    tick(delta: number) {\n\n    }\n\n    getStage() {\n        return this.container;\n    }\n\n    getLogicStage() {\n        return this.selectableContainer;\n    }\n\n    calculateZIndexUser(x: number, y: number, z: number): number {\n        const model = this.room.model;\n        return _calculateZIndexUser(x, y, z, model.doorX === x && model.doorY === y ? PRIORITY_DOOR_FLOOR_PLAYER : PRIORITY_PLAYER);\n    }\n\n    calculateZIndexUserShadow(x: number, y: number, z: number): number {\n        const model = this.room.model;\n        return _calculateZIndexUser(x, y, z, model.doorX === x && model.doorY === y ? PRIORITY_DOOR_FLOOR_PLAYER_SHADOW : PRIORITY_PLAYER_SHADOW);\n    }\n}\n\ninterface ContainerDictionary {\n    [id: number]: Container;\n}\n\ninterface ContainerArrayDictionary {\n    [id: number]: Container[];\n}\n\nexport interface Selectable {\n    handleClick(id: number): void,\n    handleDoubleClick(id: number): void,\n    handleHover(id: number): void,\n}\n\ninterface SelectableDictionary {\n    [id: number]: Selectable;\n}\n\nexport const calculateZIndex = (x: number, y: number, z: number, priority: number): number => {\n    return ((x + y) * (COMPARABLE_X_Y) + (z * (COMPARABLE_Z))) + PRIORITY_MULTIPLIER * priority;\n};\n\nconst _calculateZIndexUser = (x: number, y: number, z: number, priority: number): number => {\n    return calculateZIndex(Math.floor(x), Math.floor(y), z + 0.001, priority);\n};\n\nexport const calculateZIndexFloorItem = (x: number, y: number, z: number, zIndex: number, layerId: number): number => {\n    const compareY = (Math.trunc(zIndex / 100)) / 10;\n    return calculateZIndex(x, y + compareY, z, PRIORITY_ROOM_ITEM);\n};\n\nexport const calculateZIndexWallItem = (id: number, x: number, y: number, zIndex: number, layerId: number): number => {\n    return (id * COMPARABLE_Z) + layerId + (PRIORITY_MULTIPLIER * PRIORITY_WALL_ITEM);\n    //TODO: check this\n};\n\nexport const rgb2int = (r: number, g: number, b: number) => {\n    return (r << 16) + (g << 8) + (b);\n};\n\nexport const calculateZIndexChat = () => PRIORITY_CHAT * PRIORITY_MULTIPLIER;\n\nconst PRIORITY_DOOR_FLOOR = 1;\nconst PRIORITY_DOOR_FLOOR_SELECT = 2;\nconst PRIORITY_DOOR_FLOOR_PLAYER_SHADOW = 3;\nconst PRIORITY_DOOR_FLOOR_PLAYER = 4;\n//const PRIORITY_DOOR_WALL = 5;\nconst PRIORITY_WALL = 6;\nconst PRIORITY_FLOOR = 7;\nconst PRIORITY_PLAYER_SHADOW = 8;\nconst PRIORITY_WALL_ITEM = 9;\nconst PRIORITY_FLOOR_SELECT = 11;\nconst PRIORITY_PLAYER = 11;\nconst PRIORITY_ROOM_ITEM = 11;\n//const PRIORITY_SIGN = 12;\nconst PRIORITY_CHAT = 13;\n\nconst PRIORITY_MULTIPLIER = 10000000;\nconst COMPARABLE_X_Y = 1000000;\nconst COMPARABLE_Z = 10000;","export default class AvatarInfo {\n    direction: Direction;\n    headDirection: Direction;\n    action: string[];\n    gesture: string;\n    frame: number;\n    isHeadOnly: boolean;\n    isBodyOnly: boolean;\n    scale: Scale;\n    isDownsampled: boolean;\n    isLarge: boolean;\n    isSmall: boolean;\n    rectWidth: number;\n    rectHeight: number;\n    figure: FigurePart[];\n    drawAction: DrawAction;\n    handItem: number;\n    drawOrder: string;\n\n    constructor(figure: string, direction: Direction, headDirection: Direction, action: string[], gesture: string, frame: number, isHeadOnly: boolean, isBodyOnly: boolean, scale: Scale) {\n        this.direction = direction;\n        this.headDirection = headDirection;\n        this.isHeadOnly = isHeadOnly;\n        this.isBodyOnly = isBodyOnly;\n        this.scale = scale;\n        this.isDownsampled = false;\n        this.isLarge = false;\n        this.isSmall = false;\n        this.rectWidth = 64;\n        this.rectHeight = 110;\n\n        switch (scale) {\n            case \"l\":\n                this.isLarge = true;\n                this.rectWidth = 128;\n                this.rectHeight = 220;\n                break;\n            case \"s\":\n                this.isSmall = true;\n                this.rectWidth = 32;\n                this.rectHeight = 55;\n                break;\n            case \"d\":\n                this.isDownsampled = true;\n                break;\n            case \"n\":\n            default:\n                break;\n        }\n\n        this.figure = extractFigureParts(figure);\n\n        this.frame = frame;\n        this.drawAction = {\n            body: \"std\",\n        }; //std, sit, lay, wlk, wav, sit-wav, swm\n\n        this.handItem = -1;\n        this.drawOrder = \"std\";\n        this.gesture = gesture;\n\n        switch (gesture) {\n            case \"spk\":\n                this.drawAction.speak = 'spk';\n                break;\n            case \"eyb\":\n                this.drawAction.eye = \"eyb\";\n                break;\n            case \"\":\n                this.drawAction.gesture = \"std\";\n                break;\n            default:\n                this.drawAction.gesture = gesture;\n                break;\n        }\n\n        this.action = action;\n\n        for (let value of this.action) {\n            const actionParams = value.split('=');\n            switch (actionParams[0]) {\n                case \"wlk\":\n                    this.drawAction.wlk = \"wlk\";\n                    break;\n                case \"sit\":\n                    this.drawAction.sit = \"sit\";\n                    break;\n                case \"lay\":\n                    this.drawAction.body = \"lay\";\n                    this.drawAction.eye = \"lay\";\n\n                    //swap\n                    const temp = this.rectWidth;\n                    this.rectWidth = this.rectHeight\n                    this.rectHeight = temp;\n\n                    switch (this.gesture) {\n                        case \"spk\":\n                            this.drawAction.speak = \"lsp\";\n                            //this.frame['lsp'] = this.frame[this.gesture]; ???????????\n                            break;\n\n                        case \"eyb\":\n                            this.drawAction.eye = \"ley\";\n                            break;\n\n                        case \"std\":\n                            this.drawAction.gesture = \"lay\";\n                            break;\n\n                        default:\n                            this.drawAction.gesture = \"l\" + this.gesture.substr(0, 2);\n                            break;\n                    }\n                    break;\n                case \"wav\":\n                    this.drawAction.handLeft = \"wav\";\n                    break;\n                case \"crr\":\n                case \"drk\":\n                    this.drawAction.handRight = actionParams[0];\n                    this.drawAction.itemRight = actionParams[0];\n                    this.handItem = Number(actionParams[1]);\n                    break;\n\n                case \"swm\":\n                    this.drawAction.swm = \"swm\";\n                    if (this.gesture === \"spk\") {\n                        this.drawAction.speak = \"sws\";\n                    }\n                    break;\n\n                case \"\":\n                    this.drawAction.body = \"std\";\n                    break;\n                default:\n                    this.drawAction.body = actionParams[0];\n                    break;\n            }\n        }\n        if (this.drawAction.sit === \"sit\") {\n            if (this.direction >= 2 && this.direction <= 4) {\n                this.drawOrder = \"sit\";\n                if (this.drawAction.handRight === \"drk\" && this.direction >= 2 && this.direction <= 3) {\n                    this.drawOrder += \".rh-up\";\n                } else if (this.drawAction.handLeft && this.direction === 4) {\n                    this.drawOrder += \".lh-up\";\n                }\n            } else if (this.drawAction.body === \"lay\") {\n                this.drawOrder = \"lay\";\n            } else if (this.drawAction.handRight === \"drk\" && this.direction >= 0 && this.direction <= 3) {\n                this.drawOrder = \"rh-up\";\n            } else if (this.drawAction.handLeft && this.direction >= 4 && this.direction <= 6) {\n                this.drawOrder = \"lh-up\";\n            }\n        }\n    }\n\n\n}\ninterface DrawAction {\n    body: string,\n    wlk?: string,\n    sit?: string,\n    gesture?: string,\n    eye?: string,\n    speak?: string,\n    itemRight?: string,\n    handRight?: string,\n    handLeft?: string,\n    swm?: string\n};\nexport interface FigurePart { type: string, id: string, colors: string[] };\nexport type Direction = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\nexport type Scale = \"l\" | \"s\" | \"d\" | \"n\";\nexport type Gender = 'M' | 'F';\nexport const extractFigureParts = (figure: string): FigurePart[] => {\n    const newFigure: { [id: string]: FigurePart } = {};\n    const figures: FigurePart[] = [];\n\n    for (let part of figure.split('.')) {\n        const data = part.split('-');\n        const figurePart: FigurePart = { type: data[0], id: data[1], colors: [data[2]] };\n        if (data[3] != null) {\n            figurePart.colors.push(data[3]);\n        }\n        newFigure[figurePart.type] = figurePart;\n    }\n\n    for (let part in newFigure) {\n        figures.push(newFigure[part]);\n    }\n    return figures;\n};\n\nexport const generateFigureString = (figure: FigurePart[]): string => {\n    let newFigure = '';\n    for (let figureElement of figure) {\n        let current = figureElement.type + \"-\" + figureElement.id;\n        for (let color of figureElement.colors) {\n            current += \"-\" + color;\n        }\n        newFigure += current + \".\";\n    }\n    return newFigure.substr(0, newFigure.length - 1);\n};","export const generateSilhouette = (img: HTMLImageElement | HTMLCanvasElement, r: number, g: number, b: number): HTMLCanvasElement | HTMLImageElement => {\n    const element = document.createElement('canvas');\n    const c = element.getContext(\"2d\");\n    const { width, height } = img;\n\n    if (c == null || width === 0 || height === 0) {\n        return img;\n    }\n\n    element.width = width;\n    element.height = height;\n\n    c.drawImage(img, 0, 0);\n    const imageData = c.getImageData(0, 0, width, height);\n\n    for (let y = 0; y < height; y++) {\n        let inpos = y * width * 4;\n        for (let x = 0; x < width; x++) {\n            //const pr = imageData.data[inpos++];\n            //const pg = imageData.data[inpos++];\n            //const pb = imageData.data[inpos++];\n            inpos += 3; //////\n\n            const pa = imageData.data[inpos++];\n            if (pa !== 0) {\n                imageData.data[inpos - 1] = 255; //A\n                imageData.data[inpos - 2] = b; //B\n                imageData.data[inpos - 3] = g; //G\n                imageData.data[inpos - 4] = r; //R\n            }\n        }\n    }\n    c.putImageData(imageData, 0, 0);\n    return element;\n};","import { TextureDictionary } from \"../../graphics/MainEngine\";\nimport AvatarInfo, { Direction } from \"../../imagers/avatars/AvatarInfo\";\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\nimport { Texture } from 'pixi.js-legacy';\nimport { generateSilhouette } from \"../../imagers/misc/Silhouettes\";\n\nexport default class AvatarContainer {\n\n    look: string;\n    isGhost: boolean;\n    color: number;\n    bodyTextures: TextureDictionary;\n    headTextures: TextureDictionary;\n    solidBodyTextures: TextureDictionary;\n    solidHeadTextures: TextureDictionary;\n    headImage: HTMLCanvasElement;\n    userInfoImage: HTMLCanvasElement;\n\n    constructor(look: string, isGhost?: boolean) {\n        this.isGhost = isGhost !== undefined && isGhost;\n        this.look = isGhost ? GHOST_LOOK : look;\n        this.bodyTextures = {};\n        this.headTextures = {};\n        this.solidBodyTextures = {};\n        this.solidHeadTextures = {};\n        this.color = 0x000000;\n        this.headImage = document.createElement('canvas');\n        this.userInfoImage = document.createElement('canvas');\n    }\n\n    initialize(): Promise<void[]> {\n        const promises: Promise<void>[] = [];\n        const { avatarImager } = BobbaEnvironment.getGame();\n\n        for (let i = 0; i <= 7; i++) {\n            promises.push(this._loadUniqueHeadTexture(i as Direction, \"std\", 0));\n            promises.push(this._loadUniqueHeadTexture(i as Direction, \"eyb\", 0));\n\n            promises.push(this._loadUniqueBodyTexture(i as Direction, [\"std\"], 0));\n            for (let j = 0; j <= 3; j++) {\n                promises.push(this._loadUniqueBodyTexture(i as Direction, [\"wlk\"], j));\n                promises.push(this._loadUniqueBodyTexture(i as Direction, [\"wlk\", \"wav\"], j));\n            }\n            for (let j = 0; j <= 1; j++) {\n                promises.push(this._loadUniqueBodyTexture(i as Direction, [\"wav\"], j));\n                promises.push(this._loadUniqueHeadTexture(i as Direction, \"spk\", j));\n            }\n        }\n\n        for (let i = 0; i <= 7; i = i + 2) {\n            promises.push(this._loadUniqueBodyTexture(i as Direction, [\"sit\"], 0));\n            for (let j = 0; j <= 1; j++) {\n                promises.push(this._loadUniqueBodyTexture(i as Direction, [\"sit\", \"wav\"], j));\n            }\n        }\n\n        promises.push(this._loadChatHeadImage());\n        promises.push(this._loadUserInfoImage());\n\n        this.color = avatarImager.getChatColor(this.look);\n\n        return Promise.all(promises);\n    }\n\n    getSolidHeadTexture(headDirection: Direction, gesture: string, frame: number): Texture {\n        return this.solidHeadTextures[getHeadTextureKey(headDirection, gesture, frame)];\n    }\n\n    getSolidBodyTexture(direction: Direction, action: string[], frame: number): Texture {\n        return this.solidBodyTextures[getBodyTextureKey(direction, action, frame)];\n    }\n\n    getHeadTexture(headDirection: Direction, gesture: string, frame: number): Texture {\n        return this.headTextures[getHeadTextureKey(headDirection, gesture, frame)];\n    }\n\n    getBodyTexture(direction: Direction, action: string[], frame: number): Texture {\n        return this.bodyTextures[getBodyTextureKey(direction, action, frame)];\n    }\n\n    _loadUniqueBodyTexture(direction: Direction, action: string[], frame: number): Promise<void> {\n        const { avatarImager, engine } = BobbaEnvironment.getGame();\n\n        return avatarImager.generateGeneric(new AvatarInfo(this.look, direction, direction, action, \"std\", frame, false, true, \"n\"), this.isGhost)\n            .then(image => {\n                this.bodyTextures[getBodyTextureKey(direction, action, frame)] = engine.getTextureFromImage(image);\n                this.solidBodyTextures[getBodyTextureKey(direction, action, frame)] = engine.getTextureFromImage(generateSilhouette(image, 255, 255, 255));\n            });\n    }\n\n    _loadUniqueHeadTexture(headDirection: Direction, gesture: string, frame: number): Promise<void> {\n        const { avatarImager, engine } = BobbaEnvironment.getGame();\n\n        return avatarImager.generateGeneric(new AvatarInfo(this.look, headDirection, headDirection, [\"std\"], gesture, frame, true, false, \"n\"), this.isGhost)\n            .then(image => {\n                this.headTextures[getHeadTextureKey(headDirection, gesture, frame)] = engine.getTextureFromImage(image);\n                this.solidHeadTextures[getHeadTextureKey(headDirection, gesture, frame)] = engine.getTextureFromImage(generateSilhouette(image, 255, 255, 255));\n            });\n    }\n\n    _loadChatHeadImage(): Promise<void> {\n        const { avatarImager } = BobbaEnvironment.getGame();\n\n        return avatarImager.generateGeneric(new AvatarInfo(this.look, 2, 2, [\"std\"], \"std\", 0, true, false, \"d\"), this.isGhost)\n            .then(canvas => {\n                this.headImage = canvas;\n            });\n    }\n\n    _loadUserInfoImage(): Promise<void> {\n        const { avatarImager } = BobbaEnvironment.getGame();\n\n        return avatarImager.generateGeneric(new AvatarInfo(this.look, 4, 4, [\"std\"], \"std\", 0, false, false, \"n\"), this.isGhost)\n            .then(canvas => {\n                this.userInfoImage = canvas;\n            });\n    }\n}\n\nconst getBodyTextureKey = (direction: Direction, action: string[], frame: number): string => {\n    let actionText = action[0];\n    if (action.length > 1) {\n        actionText += \"-\" + action[1];\n    }\n    return direction + \"_\" + actionText + \"_\" + frame;\n};\n\n\nconst getHeadTextureKey = (headDirection: Direction, gesture: string, frame: number): string => {\n    return headDirection + \"_\" + gesture + \"_\" + frame;\n};\n\nexport const GHOST_LOOK = \"hd-180-1021\";","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_LOOK_AT } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestLookAt extends ClientMessage {\n    constructor(userId: number) {\n        super(REQUEST_LOOK_AT);\n        this.appendInt(userId);\n    }\n}","import { Container, Sprite } from 'pixi.js-legacy';\nimport { Direction } from \"../../imagers/avatars/AvatarInfo\";\nimport Room from \"../Room\";\nimport AvatarContainer from \"./AvatarContainer\";\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\nimport RequestLookAt from \"../../communication/outgoing/rooms/RequestLookAt\";\nimport { ROOM_TILE_SHADOW } from \"../../graphics/GenericSprites\";\nimport { Selectable } from \"../RoomEngine\";\nimport User from \"../../users/User\";\n\nconst FRAME_SPEED = 100;\nconst WALK_SPEED = 2; //Squares per second\n\nconst ROOM_USER_SPRITE_OFFSET_X = 3;\nconst ROOM_USER_SPRITE_OFFSET_Y = -85;\n\nexport default class RoomUser implements Selectable {\n    user: User;\n    _x: number;\n    _y: number;\n    _z: number;\n    _seatZ: number;\n    targetX: number;\n    targetY: number;\n    targetZ: number;\n\n    rot: Direction;\n    headRot: Direction;\n    status: StatusContainer;\n\n    _frame: number;\n    _frameCounter: number;\n    _waveCounter: number;\n    _speakCounter: number;\n    _signCounter: number;\n\n    avatarContainer: AvatarContainer;\n    container: Container;\n    headSprite: Sprite;\n    bodySprite: Sprite;\n    shadowSprite: Sprite;\n    signSprite: Sprite;\n\n    selectableContainer: Container;\n    selectableHeadSprite: Sprite;\n    selectableBodySprite: Sprite;\n\n    colorId: number;\n\n    loaded: boolean;\n\n    room: Room;\n\n    constructor(user: User, x: number, y: number, z: number, rot: Direction, room: Room) {\n        this.user = user;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this.targetX = x;\n        this.targetY = y;\n        this.targetZ = z;\n        this._seatZ = 0;\n        this.rot = rot;\n        this.headRot = rot;\n        this.room = room;\n        this.status = {};\n\n        this._frame = 0;\n        this._frameCounter = 0;\n        this._waveCounter = 0;\n        this._speakCounter = 0;\n        this._signCounter = 0;\n\n        this.colorId = Math.floor(Math.random() * (16777215 - 1)) + 1;\n\n        this.loaded = false;\n\n        this.bodySprite = new Sprite();\n        this.headSprite = new Sprite();\n        this.selectableBodySprite = new Sprite();\n        this.selectableHeadSprite = new Sprite();\n\n        this.shadowSprite = new Sprite(BobbaEnvironment.getGame().engine.getTexture(ROOM_TILE_SHADOW));\n\n        this.selectableContainer = new Container();\n        this.selectableContainer.addChild(this.selectableBodySprite);\n        this.selectableContainer.addChild(this.selectableHeadSprite);\n\n        const signImage = BobbaEnvironment.getGame().meMenuImager.generateSign(this.user.name);\n        const signTexture = BobbaEnvironment.getGame().engine.getTextureFromImage(signImage)\n\n        this.signSprite = new Sprite(signTexture);\n        this.signSprite.y = -20;\n        this.signSprite.x = Math.floor(-signImage.width / 2 + 32);\n        this.avatarContainer = new AvatarContainer(this.user.look);\n\n        this.container = new Container();\n        this.container.addChild(this.bodySprite);\n        this.container.addChild(this.headSprite);\n        this.container.addChild(this.signSprite);\n\n        this.showSign(5);\n        this.updateTexture();\n        this.updateSpritePosition();\n    }\n\n    _nextPrivateFrame() {\n        this._frame++;\n        this.updateTexture();\n    }\n\n    tick(delta: number) {\n        this._frameCounter += delta;\n        if (this._frameCounter >= FRAME_SPEED) {\n            this._nextPrivateFrame();\n            this._frameCounter = 0;\n        }\n\n        if (this._waveCounter > 0) {\n            this._waveCounter -= delta;\n        }\n\n        if (this._speakCounter > 0) {\n            this._speakCounter -= delta;\n        }\n\n        if (this._signCounter > 0) {\n            this._signCounter -= delta;\n        }\n\n        if (this.isWalking()) {\n            this.move(delta);\n        }\n    }\n\n    handleClick = (id: number) => {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestLookAt(this.user.id));\n        this.showUserInfo(false);\n    }\n\n    showUserInfo = (isUpdate: boolean) => {\n        const isMe = BobbaEnvironment.getGame().userManager.currentUser === this.user;\n        BobbaEnvironment.getGame().uiManager.onSelectUser(this.user.id, this.user.name, this.user.motto, this.user.look, isMe, this.avatarContainer.userInfoImage, isUpdate);\n    }\n\n    handleHover = (id: number) => {\n        this.showSign(1);\n    }\n\n    handleDoubleClick = (id: number) => {\n\n    }\n\n    wave(seconds: number) {\n        this._waveCounter = seconds * 1000;\n    }\n\n    speak(seconds: number) {\n        this._speakCounter = seconds * 1000;\n    }\n\n    showSign(seconds: number) {\n        this._signCounter = seconds * 1000;\n    }\n\n    updateStatus(x: number, y: number, z: number, rot: Direction, status: StatusContainer) {\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        this.rot = rot;\n        this.headRot = rot;\n        this.status = status;\n        if (status.sit != null) {\n            this._seatZ = parseFloat(status.sit) - 1.0;\n        } else {\n            this._seatZ = 0;\n        }\n        if (status.mv != null) {\n            const coords = status.mv.split(',');\n            this.setMovement(parseInt(coords[0]), parseInt(coords[1]), parseFloat(coords[2]));\n            this._seatZ = 0;\n        }\n        this.updateTexture();\n        this.updateSpritePosition();\n    }\n    setMovement(x: number, y: number, z: number) {\n        this.targetX = x;\n        this.targetY = y;\n        this.targetZ = z;\n    }\n\n    isSitting() {\n        return this.status.sit != null;\n    }\n\n    isWalking() {\n        return this.status.mv != null;\n    }\n\n    isWaving() {\n        return this._waveCounter > 0;\n    }\n\n    isSpeaking() {\n        return this._speakCounter > 0;\n    }\n\n    isShowingSign() {\n        return this._signCounter > 0;\n    }\n\n    loadTextures(): Promise<void> {\n        return this.avatarContainer.initialize().then(() => {\n            this.loaded = true;\n            this.updateTexture();\n        });\n    }\n\n    updateTexture() {\n        let action = [\"std\"];\n        let gesture = \"std\";\n        let bodyFrame = 0;\n        let headFrame = 0;\n\n        if (this.isSitting()) {\n            action = [\"sit\"];\n        }\n        if (this.isWaving()) {\n            action = [\"wav\"];\n            bodyFrame = this._frame % 2;\n\n            if (this.isSitting()) {\n                action = [\"sit\", \"wav\"];\n                bodyFrame = this._frame % 2;\n            }\n        }\n\n        if (this.isSpeaking()) {\n            gesture = \"spk\";\n            headFrame = this._frame % 2;\n        } else if (this._frame % 40 < 2) {\n            gesture = \"eyb\";\n        }\n\n        if (this.isWalking()) {\n            action = [\"wlk\"];\n            bodyFrame = this._frame % 4;\n\n            if (this.isWaving()) {\n                action = [\"wlk\", \"wav\"];\n            }\n        }\n\n        this.signSprite.visible = this.isShowingSign();\n\n        if (this.loaded) {\n            this.bodySprite.texture = this.avatarContainer.getBodyTexture(this.rot, action, bodyFrame);\n            this.headSprite.texture = this.avatarContainer.getHeadTexture(this.headRot, gesture, headFrame);\n\n            this.selectableBodySprite.tint = this.colorId;\n            this.selectableHeadSprite.tint = this.colorId;\n\n            this.selectableBodySprite.texture = this.avatarContainer.getSolidBodyTexture(this.rot, action, bodyFrame);\n            this.selectableHeadSprite.texture = this.avatarContainer.getSolidHeadTexture(this.headRot, gesture, headFrame);\n        } else {\n            this.bodySprite.texture = BobbaEnvironment.getGame().ghostTextures.getBodyTexture(this.rot, action, bodyFrame);\n            this.headSprite.texture = BobbaEnvironment.getGame().ghostTextures.getHeadTexture(this.headRot, gesture, headFrame);\n        }\n    }\n\n    getSpriteX() {\n        return this.container.x;\n    }\n\n    updateSpritePosition() {\n        const { x, y } = this.room.engine.tileToLocal(this._x, this._y, this._z + this._seatZ);\n        const offsetX = (this.rot === 6 || this.rot === 5 || this.rot === 4) ? ROOM_USER_SPRITE_OFFSET_X : 0;\n        this.container.x = Math.round(x + offsetX);\n        this.container.y = Math.round(y + ROOM_USER_SPRITE_OFFSET_Y);\n\n        this.selectableContainer.x = this.container.x;\n        this.selectableContainer.y = this.container.y;\n\n        let shadowZ = this._z;\n        if (this.room.model.isValidTile(Math.floor(this._x), Math.floor(this._y))) {\n            shadowZ = Math.min(this.room.model.heightMap[Math.floor(this._x)][Math.floor(this._y)] - 1, shadowZ);\n        }\n        const shadowCoords = this.room.engine.tileToLocal(this._x, this._y, shadowZ);\n        this.shadowSprite.x = shadowCoords.x;\n        this.shadowSprite.y = shadowCoords.y;\n        this.shadowSprite.zIndex = this.room.engine.calculateZIndexUserShadow(this._x, this._y, 0);\n        this.container.zIndex = this.room.engine.calculateZIndexUser(this._x, this._y, this._z);\n        this.selectableContainer.zIndex = this.container.zIndex;\n\n        //this.signSprite.x = this.container.x;\n        //this.signSprite.x = this.container.y;\n    }\n\n    move(delta: number) {\n        delta = delta / 1000;\n        if (this.targetX > this._x) {\n            this._x += WALK_SPEED * delta;\n            if (this._x > this.targetX) {\n                this._x = this.targetX;\n            }\n        }\n        else if (this.targetX < this._x) {\n            this._x += -WALK_SPEED * delta;\n            if (this._x < this.targetX) {\n                this._x = this.targetX;\n            }\n        }\n\n        if (this.targetY > this._y) {\n            this._y += WALK_SPEED * delta;\n            if (this._y > this.targetY) {\n                this._y = this.targetY;\n            }\n        }\n        else if (this.targetY < this._y) {\n            this._y -= WALK_SPEED * delta;\n            if (this._y < this.targetY) {\n                this._y = this.targetY;\n            }\n        }\n\n        if (this.targetZ > this._z) {\n            this._z += WALK_SPEED * delta;\n            if (this._z > this.targetZ) {\n                this._z = this.targetZ;\n            }\n        }\n        else if (this.targetZ < this._z) {\n            this._z -= WALK_SPEED * delta;\n            if (this._z < this.targetZ) {\n                this._z = this.targetZ;\n            }\n        }\n\n        this.updateSpritePosition();\n    }\n}\n\nexport interface StatusContainer {\n    sit?: string,\n    mv?: string,\n};","import Room from \"../Room\";\nimport RoomUser, { StatusContainer } from \"./RoomUser\";\nimport { Direction } from \"../../imagers/avatars/AvatarInfo\";\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\n\nexport default class RoomUserManager {\n    room: Room;\n    users: RoomUserDictionary;\n\n    constructor(room: Room) {\n        this.room = room;\n        this.users = {};\n    }\n\n    getUser(id: number): RoomUser | null {\n        return (id in this.users) ? this.users[id] : null;\n    }\n\n    updateUserStatus(id: number, x: number, y: number, z: number, rot: Direction, status: StatusContainer) {\n        const user = this.getUser(id);\n        if (user != null) {\n            user.updateStatus(x, y, z, rot, status);\n        }\n    }\n\n    addUserToRoom(id: number, x: number, y: number, z: number, rot: Direction, name: string, look: string, motto: string) {\n        const baseUser = BobbaEnvironment.getGame().userManager.setUser(id, name, motto, look);\n        const roomUser = this.getUser(id);\n        if (roomUser != null) {\n            this.removeUserFromRoom(id, false);\n        }\n        const newUser = new RoomUser(baseUser, x, y, z, rot, this.room);\n        this.room.engine.addUserContainer(id, newUser.container, newUser.shadowSprite);\n        this.room.engine.addSelectableContainer(newUser.colorId, [newUser.selectableContainer], newUser);\n        this.users[id] = newUser;\n        newUser.loadTextures().then(()=> {\n            if (roomUser != null) {\n                newUser.showUserInfo(true);\n            }\n        });\n    }\n\n    userWave(id: number) {\n        const user = this.getUser(id);\n        if (user != null) {\n            user.wave(2);\n        }\n    }\n\n    removeUserFromRoom(id: number, notify: boolean) {\n        this.room.engine.removeUserSprite(id);\n        const user = this.getUser(id);\n        if (user != null) {\n            this.room.engine.removeSelectableContainer(user.colorId);\n            if (notify) {\n                BobbaEnvironment.getGame().uiManager.onCloseSelectUser(id);\n            }\n            delete (this.users[id]);\n        }\n    }\n\n    tick(delta: number) {\n        for (let key in this.users) {\n            if (this.users[key] != null) {\n                this.users[key].tick(delta);\n            }\n        }\n    }\n}\n\ninterface RoomUserDictionary {\n    [id: number]: RoomUser;\n}","import RoomItem from \"./RoomItem\";\nimport { Direction, ItemType } from \"../../imagers/furniture/FurniImager\";\nimport Room from \"../Room\";\nimport { Sprite } from 'pixi.js-legacy';\nimport { calculateZIndexWallItem } from \"../RoomEngine\";\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\nimport { WALL_ITEM_PLACEHOLDER, WALL_ITEM_PLACEHOLDER_OFFSET_X, WALL_ITEM_PLACEHOLDER_OFFSET_Y } from \"../../graphics/GenericSprites\";\n\nexport default class WallItem extends RoomItem {\n    constructor(id: number, x: number, y: number, rot: Direction, state: number, baseId: number, room: Room) {\n        const placeholder = new Sprite();\n        placeholder.texture = BobbaEnvironment.getGame().engine.getTexture(WALL_ITEM_PLACEHOLDER);\n        placeholder.x = WALL_ITEM_PLACEHOLDER_OFFSET_X;\n        placeholder.y = WALL_ITEM_PLACEHOLDER_OFFSET_Y;\n        if (rot === 4) {\n            placeholder.scale.x = -1;\n            placeholder.x = -WALL_ITEM_PLACEHOLDER_OFFSET_X;\n        }\n        super(id, x, y, 0, rot, state, baseId, room, placeholder);\n    }\n\n    updateSpritePosition() {\n        for (let container of this.containers) {\n            container.x = this._x;\n            container.y = this._y;\n        }\n\n        for (let container of this.selectableContainers) {\n            container.x = this._x;\n            container.y = this._y;\n        }\n    }\n\n    calculateZIndex(zIndex: number, layerIndex: number): number {\n        return calculateZIndexWallItem(this.id, this._x, this._y, zIndex, layerIndex);\n    }\n\n    getItemType(): ItemType {\n        return ItemType.WallItem;\n    }\n\n    rotate() {\n\n    }\n\n    updatePosition(screenX: number, screenY: number, screenZ: number, rot: Direction, drawAsIcon: boolean) {\n        this._x = screenX;\n        this._y = screenY;\n        this._z = screenZ;\n        this.rot = rot;\n        this.drawAsIcon = drawAsIcon;\n        this.updateSpritePosition();\n        this.updateTextures();\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_ITEM_PLACE } from \"../../protocol/OpCodes/ClientOpCodes\";\nimport { Direction } from \"../../../imagers/furniture/FurniImager\";\n\nexport default class RequestFurniPlace extends ClientMessage {\n    constructor(itemId: number, x: number, y: number, rotation: Direction) {\n        super(REQUEST_ITEM_PLACE);\n        this.appendInt(itemId);\n        this.appendInt(x);\n        this.appendInt(y);\n        this.appendInt(rotation);\n    }\n}","import Room from \"../Room\";\nimport RoomItem from \"./RoomItem\";\nimport FloorItem from \"./FloorItem\";\nimport WallItem from \"./WallItem\";\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\nimport UserItem from \"../../inventory/UserItem\";\nimport { ItemType, Direction } from \"../../imagers/furniture/FurniImager\";\nimport RequestFurniMove from \"../../communication/outgoing/rooms/RequestFurniMove\";\nimport RequestFurniPlace from \"../../communication/outgoing/rooms/RequestFurniPlace\";\n\nexport default class RoomItemManager {\n    room: Room;\n    items: RoomItemDictionary;\n    currentPlacingItem?: RoomItem;\n\n    constructor(room: Room) {\n        this.room = room;\n        this.items = {};\n    }\n\n    getItem(id: number): RoomItem | null {\n        return (id in this.items) ? this.items[id] : null;\n    }\n\n    startRoomItemMovement(id: number) {\n        const item = this.getItem(id);\n        if (item != null) {\n            this.room.engine.startRoomItemMove(item);\n        }\n    }\n\n    startRoomItemPlacement(item: UserItem) {\n        if (item.baseItem != null) {\n            let promise: Promise<RoomItem> | null = null;\n            if (item.itemType === ItemType.FloorItem) {\n                const tile = this.room.engine.globalToTile(this.room.engine.lastMousePositionX, this.room.engine.lastMousePositionY);\n                promise = this.addFloorItemToRoom(item.id, tile.x, tile.y, 0, item.baseItem.getUIViewDirection(), item.state, item.baseId);\n            } else {\n                const local = this.room.engine.globalToLocal(this.room.engine.lastMousePositionX, this.room.engine.lastMousePositionY);\n                promise = this.addWallItemToRoom(item.id, local.x, local.y, item.baseItem.getUIViewDirection(), item.state, item.baseId);\n            }\n            promise.then(roomItem => {\n                this.currentPlacingItem = roomItem;\n                this.startRoomItemMovement(item.id);\n            });\n        }\n    }\n\n    cancelRoomItemMovement(movingItem: RoomItem) {\n        if (movingItem === this.currentPlacingItem) {\n            this.removeItemFromRoom(movingItem.id, true);\n            this.currentPlacingItem = undefined;\n            BobbaEnvironment.getGame().uiManager.doOpenInventory();\n        }\n    }\n\n    finishRoomItemMovement(movingItem: RoomItem) {\n        if (movingItem === this.currentPlacingItem) {\n            this.removeItemFromRoom(movingItem.id, true);\n            BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestFurniPlace(movingItem.id, movingItem._x, movingItem._y, movingItem.rot));\n            BobbaEnvironment.getGame().uiManager.doOpenInventory();\n        } else {\n            BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestFurniMove(movingItem.id, movingItem._x, movingItem._y, movingItem.rot));\n        }\n    }\n\n    addFloorItemToRoom(id: number, x: number, y: number, z: number, rot: Direction, state: number, baseId: number): Promise<RoomItem> {\n        const item = this.getItem(id);\n        if (item != null) {\n            this.removeItemFromRoom(id, false);\n        }\n        const newItem = new FloorItem(id, x, y, z, rot, state, baseId, this.room);\n        if (this.currentPlacingItem != null && this.currentPlacingItem.id === id) {\n            BobbaEnvironment.getGame().inventory.tryPlaceBaseItem(baseId);\n            this.currentPlacingItem = undefined;\n        }\n        this.room.engine.addRoomItemContainerSet(id, newItem.containers); //placeholder\n        this.items[id] = newItem;\n        return newItem.loadBase().then(containerGroup => {\n            this.room.engine.removeRoomItemContainerSet(id);\n            this.room.engine.addRoomItemContainerSet(id, containerGroup.containers);\n            this.room.engine.addSelectableContainer(newItem.colorId, containerGroup.selectableContainers, newItem);\n            if (item != null) {\n                item.showItemInfo(true);\n            }\n            return newItem;\n        });\n    }\n\n    addWallItemToRoom(id: number, x: number, y: number, rot: Direction, state: number, baseId: number): Promise<RoomItem> {\n        const item = this.getItem(id);\n        if (item != null) {\n            this.removeItemFromRoom(id, false);\n        }\n        const newItem = new WallItem(id, x, y, rot, state, baseId, this.room);\n        if (this.currentPlacingItem != null && this.currentPlacingItem.id === id) {\n            BobbaEnvironment.getGame().inventory.tryPlaceBaseItem(baseId);\n            this.currentPlacingItem = undefined;\n        }\n        this.room.engine.addRoomItemContainerSet(id, newItem.containers); //placeholder\n        this.items[id] = newItem;\n        return newItem.loadBase().then(containerGroup => {\n            this.room.engine.removeRoomItemContainerSet(id);\n            this.room.engine.addRoomItemContainerSet(id, containerGroup.containers);\n            this.room.engine.addSelectableContainer(newItem.colorId, containerGroup.selectableContainers, newItem);\n            if (item != null) {\n                item.showItemInfo(true);\n            }\n            return newItem;\n        });\n\n\n    }\n\n    itemSetState(itemId: number, state: number) {\n        const item = this.getItem(itemId);\n        if (item != null) {\n            item.setState(state);\n        }\n    }\n\n    removeItemFromRoom(id: number, notifyUi: boolean) {\n        this.room.engine.removeRoomItemContainerSet(id);\n        const item = this.getItem(id);\n        if (item != null) {\n            this.room.engine.removeSelectableContainer(item.colorId);\n            if (notifyUi) {\n                BobbaEnvironment.getGame().uiManager.onCloseSelectFurni(id);\n            }\n            delete (this.items[id]);\n        }\n    }\n\n    tick(delta: number) {\n        for (let key in this.items) {\n            if (this.items[key] != null) {\n                this.items[key].tick(delta);\n            }\n        }\n    }\n}\n\ninterface RoomItemDictionary {\n    [id: number]: RoomItem;\n}","import RoomUser from \"../users/RoomUser\";\nimport { Sprite } from 'pixi.js-legacy';\n\nexport default class Chat {\n    message: string;\n    roomUser: RoomUser;\n    sprite: Sprite;\n    deltaY: number;\n    targetY: number;\n\n    constructor(message: string, roomUser: RoomUser, sprite: Sprite) {\n        this.message = message;\n        this.roomUser = roomUser;\n        this.sprite = sprite;\n        this.deltaY = sprite.y;\n        this.targetY = sprite.y;\n    }\n\n    move(delta: number) {\n        delta = delta / 1000;\n        if (this.targetY < this.deltaY) { \n            this.deltaY -= SPEED * delta;\n            if (this.deltaY < this.targetY) {\n                this.deltaY = this.targetY;\n            }\n            this.updateSpritePosition();\n        }\n    }\n\n    updateSpritePosition() {\n        this.sprite.y = this.deltaY;\n    }\n}\n\nconst SPEED = 92;","import Chat from \"./Chat\";\nimport Room from \"../Room\";\nimport { Container, Sprite } from 'pixi.js-legacy';\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\n\nexport default class ChatManager {\n    chats: Chat[];\n    room: Room;\n    container: Container;\n    _chatRollerCounter: number;\n    _needsRoll: boolean;\n\n    constructor(room: Room) {\n        this.chats = [];\n        this.room = room;\n        this.container = new Container();\n        this._chatRollerCounter = 0;\n        this._needsRoll = false;\n    }\n\n    rollChats(amount: number) {\n        for (let chat of this.chats) {\n            chat.targetY -= (23 * amount);\n        }\n        this._chatRollerCounter = 0;\n        this._needsRoll = false;\n    }\n\n    addChat(userId: number, message: string) {\n        const roomUser = this.room.roomUserManager.getUser(userId);\n        if (roomUser != null) {\n            const image = BobbaEnvironment.getGame().chatImager.generateChatBubble(0, roomUser.user.name, message, roomUser.avatarContainer.color, roomUser.avatarContainer.headImage);\n            const sprite = new Sprite(BobbaEnvironment.getGame().engine.getTextureFromImage(image));\n            sprite.interactive = true;\n            sprite.on('click', () => { roomUser.handleClick(0) });\n            sprite.on('tap', () => { roomUser.handleClick(0) });\n            sprite.cursor = 'pointer';\n\n            roomUser.speak(1.5);\n\n            sprite.x = Math.floor(roomUser.getSpriteX() - (sprite.width / 2));\n            sprite.y = -100;\n            if (this._needsRoll) {\n                this.rollChats(1);\n            }\n\n            this.chats.push(new Chat(message, roomUser, sprite));\n            this.container.addChild(sprite);\n            this._needsRoll = true;\n        }\n    }\n\n    tick(delta: number) {\n        this._chatRollerCounter += delta;\n        if (this._chatRollerCounter > ROLL_PERIOD) {\n            this.rollChats(Math.round(this._chatRollerCounter / ROLL_PERIOD));\n            this._chatRollerCounter = 0;\n        }\n        for (let chat of this.chats) {\n            chat.move(delta);\n        }\n    }\n}\n\nconst ROLL_PERIOD = 5000;","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_CHAT } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestChat extends ClientMessage {\n    constructor(chat: string) {\n        super(REQUEST_CHAT);\n        this.appendString(chat);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_WAVE } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestWave extends ClientMessage {\n    constructor() {\n        super(REQUEST_WAVE);\n    }\n}","import RoomModel from \"./RoomModel\";\nimport RoomEngine from \"./RoomEngine\";\nimport RoomUserManager from \"./users/RoomUserManager\";\nimport RoomItemManager from \"./items/RoomItemManager\";\nimport ChatManager from \"./chats/ChatManager\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport RequestChat from \"../communication/outgoing/rooms/RequestChat\";\nimport RequestWave from \"../communication/outgoing/rooms/RequestWave\";\n\nexport default class Room {\n    model: RoomModel;\n    engine: RoomEngine;\n    roomUserManager: RoomUserManager;\n    roomItemManager: RoomItemManager;\n    chatManager: ChatManager;\n\n    constructor(model: RoomModel) {\n        this.model = model;\n        this.engine = new RoomEngine(this);\n        this.roomUserManager = new RoomUserManager(this);\n        this.roomItemManager = new RoomItemManager(this);\n        this.chatManager = new ChatManager(this);\n        this.engine.setChatContainer(this.chatManager.container);\n    }\n\n    chat(chat: string) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestChat(chat));\n    }\n\n    wave() {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestWave());\n    }\n\n    tick(delta: number) {\n        this.engine.tick(delta);\n        this.roomUserManager.tick(delta);\n        this.roomItemManager.tick(delta);\n        this.chatManager.tick(delta);\n    }\n\n    dispose() {\n        this.engine.getStage().visible = false;\n        this.engine.getStage().removeChild();\n    }\n}","export type AtlasFrame = {\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    rotated: boolean;\n    trimmed: boolean;\n    spriteSourceSize: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    sourceSize: {\n        w: number;\n        h: number;\n    };\n    pivot: {\n        x: number;\n        y: number;\n    };\n};\n\nexport type Atlas = {\n    frames: {\n        [id: string]: AtlasFrame;\n    },\n    meta: {\n        app: string;\n        version: string;\n        image: string;\n        format: string;\n        size: {\n            w: number;\n            h: number;\n        };\n        scale: number;\n    };\n};\n\nexport const extractImage = (atlas: Atlas, image: HTMLImageElement, sourceName: string) => {\n    const currentImageData = atlas.frames[sourceName];\n    // specify desired x,y,width,height\n    // to be clipped from the spritesheet\n    const { x, y, w, h } = currentImageData.frame;\n    //const x = 178, y = 0, w = 67, h = 64;\n\n    // create an in-memory canvas\n    const canvas = document.createElement('canvas');\n    canvas.width = w;\n    canvas.height = h;\n    const ctx = canvas.getContext('2d');\n\n    if (ctx != null) {\n        // size the canvas to the desired sub-sprite size\n        canvas.width = w;\n        canvas.height = h;\n\n        // clip the sub-sprite from x,y,w,h on the spritesheet image\n        // and draw the clipped sub-sprite on the canvas at 0,0\n        ctx.drawImage(image, x, y, w, h, 0, 0, w, h);\n\n        // convert the canvas to an image\n        const subsprite = new Image();\n        subsprite.src = canvas.toDataURL();\n        return subsprite;\n    }\n    return null;\n};\n\nexport const extractImages = (atlas: Atlas, image: HTMLImageElement) => {\n    const newImages: { [id: string]: HTMLImageElement } = {};\n\n    for (let subImage in atlas.frames) {\n        const subsprite = extractImage(atlas, image, subImage);\n        if (subsprite != null) {\n            newImages[subImage] = subsprite;\n        }\n    }\n    return newImages;\n};","import { Atlas, extractImage } from \"./Atlas\";\nimport { Direction } from \"./AvatarInfo\";\n\nexport default class AvatarChunk {\n    lib: string;\n    action: string;\n    resAction: string;\n    type: string;\n    resType: string;\n    isSmall: boolean;\n    partId: number;\n    direction: Direction;\n    resDirection: number;\n    resourceName: string;\n    frame: number;\n    resFrame: number;\n    color: string | null;\n    isFlip: boolean;\n    promise: Promise<HTMLImageElement> | null;\n    resource: HTMLImageElement | null;\n\n    constructor(uniqueName: string, action: string, type: string, isSmall: boolean, partId: number, direction: Direction, frame: number, color: string) {\n        this.resDirection = direction;\n\n        //r63 self alias\n        if (type === \"hd\" && isSmall)\n            partId = 1;\n        if (type === \"ey\" && action === \"std\" && partId === 1 && direction === 3)\n            action = \"sml\";\n        if (type === \"fa\" && action === \"std\" && partId === 2 && (direction === 2 || direction === 4))\n            this.resDirection = 1;\n        if (type === \"he\" && action === \"std\" && partId === 1) {\n            if (direction === 2) {\n                this.resDirection = 0;\n            }\n            //if(direction >= 4 && direction <= 6) {\n            //return false;\n            //}\n        }\n        if (type === \"he\" && action === \"std\" && partId === 8)\n            this.resDirection = direction % 2 === 0 ? 1 : this.resDirection;\n        if (type === \"he\" && action === \"std\" && (partId === 2131 || partId === 2132) && (direction >= 2 && direction <= 6))\n            this.resDirection = 1;\n        if (type === \"ha\" && action === \"std\" && partId === 2518)\n            this.resDirection = direction % 2 === 0 ? 2 : 1;\n        if (type === \"ha\" && action === \"std\" && partId === 2519)\n            this.resDirection = direction % 2 === 0 ? 2 : 3;\n        if (type === \"ha\" && action === \"std\" && partId === 2588)\n            this.resDirection = 7;\n        if (type === \"ha\" && action === \"std\" && partId === 2589)\n            this.resDirection = 3;\n        //if(type === \"lg\" && action === \"std\" && partId === 2) action = \"wlk\";\n\n        this.lib = uniqueName;\n        this.isFlip = false;\n        this.action = action;\n        this.resAction = action;\n        this.type = type;\n        this.resType = type;\n        this.isSmall = isSmall;\n        this.partId = partId;\n        this.direction = direction;\n        this.frame = frame;\n        this.resFrame = frame;\n        this.color = color;\n        this.resourceName = this.getResourceName();\n        this.promise = null;\n        this.resource = null;\n    }\n\n    getResourceName(): string {\n        let resourceName = this.isSmall ? \"sh\" : \"h\";\n        resourceName += \"_\";\n        resourceName += this.resAction;\n        resourceName += \"_\";\n        resourceName += this.resType;\n        resourceName += \"_\";\n        resourceName += this.partId;\n        resourceName += \"_\";\n        resourceName += this.resDirection;\n        resourceName += \"_\";\n        resourceName += this.resFrame;\n        return resourceName;\n    }\n\n    extractFromAtlas(atlas: Atlas, atlasImg: HTMLImageElement) {\n        const img = extractImage(atlas, atlasImg, this.lib + \"_\" + this.getResourceName() + \".png\");\n        if (img != null) {\n            this.resource = img;\n            this.promise = Promise.resolve(img);\n        }\n        return this.promise;\n    }\n\n    downloadAsync(resourcesUrl: string): Promise<HTMLImageElement> {\n        if (this.promise == null) {\n            let img = new Image();\n            this.promise = new Promise((resolve, reject) => {\n                img.onload = () => {\n                    this.resource = img;\n                    //console.log(\"downloaded \" + this.lib + \" -> \" + this.getResourceName());\n                    resolve(img);\n                };\n\n                img.onerror = () => {\n                    //console.log(\"NOT DOWNLOADED \" + this.lib + \" -> \" + this.getResourceName());\n                    reject('Could not load image: ' + img.src);\n                };\n            });\n            img.crossOrigin = \"anonymous\";\n            img.src = resourcesUrl + this.lib + \"/\" + this.lib + \"_\" + this.getResourceName() + \".png\";\n        }\n        return this.promise;\n    }\n}","import AvatarInfo, { Direction, FigurePart } from \"./AvatarInfo\";\nimport AvatarChunk from \"./AvatarChunk\";\nexport default class AvatarImager {\n    ready: boolean;\n    offsets: any;\n    chunks: any;\n    figuremap: any;\n    figuredata: any;\n    partsets: any;\n    draworder: any;\n    animation: any;\n    resourcesUrl: string;\n\n    constructor(resourcesUrl: string) {\n        this.ready = false;\n        this.offsets = {};\n        this.chunks = {};\n        this.figuremap = {};\n        this.figuredata = {};\n        this.partsets = {};\n        this.draworder = {};\n        this.animation = {};\n        this.resourcesUrl = resourcesUrl;\n    }\n\n    initialize(): Promise<void> {\n        const p = this.loadFiles();\n        return Promise.all(p).then(() => {\n            this.ready = true;\n        });\n    }\n\n    loadFiles(): Promise<void>[] {\n        return [\n            this.fetchJsonAsync(this.resourcesUrl + \"map.json\")\n                .then(data => {\n                    this.figuremap = data;\n                }),\n            this.fetchJsonAsync(this.resourcesUrl + \"figuredata.json\")\n                .then(data => {\n                    this.figuredata = data;\n                }),\n            this.fetchJsonAsync(this.resourcesUrl + \"partsets.json\")\n                .then(data => {\n                    this.partsets = data;\n                }),\n            this.fetchJsonAsync(this.resourcesUrl + \"draworder.json\")\n                .then(data => {\n                    this.draworder = data;\n                }),\n            this.fetchJsonAsync(this.resourcesUrl + \"animation.json\")\n                .then(data => {\n                    this.animation = data;\n                })\n        ];\n    }\n\n    fetchJsonAsync(URL: string): Promise<object> {\n        return new Promise((resolve, reject) => {\n\n            const options: RequestInit = {\n                method: 'GET',\n                mode: 'cors',\n                cache: 'default',\n            };\n\n            fetch(URL, options)\n                .then(response => response.json())\n                .then(data => resolve(data))\n                .catch(err => reject(err));\n        });\n    }\n\n    downloadAtlasAsync(uniqueName: string): Promise<HTMLImageElement> {\n        let img = new Image();\n        let d: Promise<HTMLImageElement> = new Promise((resolve, reject) => {\n            img.onload = () => {\n                //console.log(\"downloaded \" + this.itemName + \" -> \" + this.resourceName);\n                resolve(img);\n            };\n            img.onerror = () => {\n                //console.log(\"NOT DOWNLOADED \" + this.itemName + \" -> \" + this.resourceName);\n                reject('Could not load image: ' + img.src);\n            };\n        });\n        img.crossOrigin = \"anonymous\";\n        img.src = this.resourcesUrl + uniqueName + \"/atlas.png\";\n        return d;\n    }\n\n    fetchOffsetAsync(uniqueName: string): Promise<any> {\n        const offsetPromise = this.fetchJsonAsync(this.resourcesUrl + uniqueName + \"/offset.json\")\n            .then(data => {\n                this.offsets[uniqueName].data = data;\n            });\n        const atlasPromise = this.downloadAtlasAsync(uniqueName)\n            .then(data => {\n                this.offsets[uniqueName].atlas = data;\n            });\n        return Promise.all([offsetPromise, atlasPromise]);\n    }\n\n    getTypeColorId(figure: string, part: string): number {\n        const avatarInfo = new AvatarInfo(figure, 0, 0, [\"std\"], \"std\", 0, false, false, \"d\");\n        let color = 0x000000;\n\n        for (let figurePart of avatarInfo.figure) {\n            if (figurePart.type === part) {\n                const parts = this.getPartColor(figurePart);\n                for (let type in parts) {\n                    const part = parts[type];\n                    for (let particle of part) {\n                        if (particle.color != null) {\n                            color = parseInt(particle.color, 16);\n                            return color;\n                        }\n                    }\n                }\n            }\n        }\n        return color;\n    }\n\n    getChatColor(figure: string): number {\n        return this.getTypeColorId(figure, 'ch');\n    }\n\n    generateGeneric(avatarInfo: AvatarInfo, isGhost: boolean): Promise<HTMLCanvasElement> {\n        const activeParts: any = {};\n        activeParts.rect = this.getActivePartSet(avatarInfo.isHeadOnly ? \"head\" : \"figure\");\n        activeParts.head = this.getActivePartSet(\"head\");\n        activeParts.eye = this.getActivePartSet(\"eye\");\n        activeParts.gesture = this.getActivePartSet(\"gesture\");\n        activeParts.speak = this.getActivePartSet(\"speak\");\n        activeParts.walk = this.getActivePartSet(\"walk\");\n        activeParts.sit = this.getActivePartSet(\"sit\");\n        activeParts.itemRight = this.getActivePartSet(\"itemRight\");\n        activeParts.handRight = this.getActivePartSet(\"handRight\");\n        activeParts.handLeft = this.getActivePartSet(\"handLeft\");\n        activeParts.swim = this.getActivePartSet(\"swim\");\n\n        let drawParts = this.getDrawOrder(avatarInfo.drawOrder, avatarInfo.direction);\n        if (drawParts == null) {\n            drawParts = this.getDrawOrder(\"std\", avatarInfo.direction);\n        }\n\n        const setParts: any = {};\n        for (let partSet of avatarInfo.figure) {\n            const parts = this.getPartColor(partSet);\n            for (let type in parts) {\n                if (setParts[type] == null) {\n                    setParts[type] = [];\n                }\n                setParts[type] = parts[type].concat(setParts[type]);\n            }\n        }\n\n        if (avatarInfo.handItem > 0) {\n            setParts[\"ri\"] = [{ \"index\": 0, \"id\": avatarInfo.handItem }];\n        }\n\n        const chunks: AvatarChunk[] = [];\n        const offsetsPromises: Promise<void>[] = [];\n\n        for (let type of drawParts) {\n            const drawableParts = setParts[type];\n            if (drawableParts != null) {\n                for (let drawablePart of drawableParts) {\n                    const uniqueName = this.getPartUniqueName(type, drawablePart[\"id\"]);\n                    if (uniqueName != null) {\n                        //console.log(type + \" -> \" + drawablePart[\"id\"] + \" -> \" + uniqueName);\n\n                        if (setParts[\"hidden\"].includes(type)) {\n                            continue;\n                        }\n\n                        if (activeParts.head.includes(type) && avatarInfo.isBodyOnly) {\n                            continue;\n                        }\n\n                        if (!activeParts.rect.includes(type)) {\n                            continue;\n                        }\n\n                        if (isGhost && (activeParts.gesture.includes(type) || activeParts.eye.includes(type))) {\n                            continue;\n                        }\n\n                        let drawDirection = avatarInfo.direction;\n                        let drawAction = null;\n\n                        if (activeParts.rect.includes(type)) {\n                            drawAction = avatarInfo.drawAction['body'];\n                        }\n                        if (activeParts.head.includes(type)) {\n                            drawDirection = avatarInfo.headDirection;\n                        }\n                        if (activeParts.speak.includes(type) && avatarInfo.drawAction['speak']) {\n                            drawAction = avatarInfo.drawAction['speak'];\n                        }\n                        if (activeParts.gesture.includes(type) && avatarInfo.drawAction['gesture']) {\n                            drawAction = avatarInfo.drawAction['gesture'];\n                        }\n                        if (activeParts.eye.includes(type)) {\n                            drawablePart.colorable = false;\n                            if (avatarInfo.drawAction['eye']) {\n                                drawAction = avatarInfo.drawAction['eye'];\n                            }\n                        }\n                        if (activeParts.walk.includes(type) && avatarInfo.drawAction['wlk']) {\n                            drawAction = avatarInfo.drawAction['wlk'];\n                        }\n                        if (activeParts.sit.includes(type) && avatarInfo.drawAction['sit']) {\n                            drawAction = avatarInfo.drawAction['sit'];\n                        }\n                        if (activeParts.handRight.includes(type) && avatarInfo.drawAction['handRight']) {\n                            drawAction = avatarInfo.drawAction['handRight'];\n                        }\n                        if (activeParts.itemRight.includes(type) && avatarInfo.drawAction['itemRight']) {\n                            drawAction = avatarInfo.drawAction['itemRight'];\n                        }\n                        if (activeParts.handLeft.includes(type) && avatarInfo.drawAction['handLeft']) {\n                            drawAction = avatarInfo.drawAction['handLeft'];\n                        }\n                        if (activeParts.swim.includes(type) && avatarInfo.drawAction['swm']) {\n                            drawAction = avatarInfo.drawAction['swm'];\n                        }\n\n                        if (drawAction == null) {\n                            continue;\n                        }\n\n                        if (this.offsets[uniqueName] == null) {\n                            this.offsets[uniqueName] = { 'promise': this.fetchOffsetAsync(uniqueName), 'data': {}, 'atlas': {} };\n                        }\n                        offsetsPromises.push(this.offsets[uniqueName].promise);\n\n                        const color = drawablePart.colorable ? drawablePart.color : null;\n                        const drawPartChunk = this.getPartResource(uniqueName, drawAction, type, avatarInfo.isSmall, drawablePart[\"id\"], drawDirection, avatarInfo.frame, color);\n                        chunks.push(drawPartChunk);\n                    }\n                }\n            }\n        }\n\n        return new Promise((resolve, reject) => {\n\n            Promise.all(offsetsPromises).then(() => {\n                let tempCanvas: any = document.createElement('canvas');\n                let tempCtx = tempCanvas.getContext('2d');\n                tempCanvas.width = avatarInfo.rectWidth;\n                tempCanvas.height = avatarInfo.rectHeight;\n\n                const chunksPromises = [];\n\n                for (let chunk of chunks) {\n                    if (this.offsets[chunk.lib].data != null && this.offsets[chunk.lib].data[chunk.getResourceName()] != null && !this.offsets[chunk.lib].data[chunk.getResourceName()].flipped) {\n                        //console.log(\"Found sprite: \" + chunk.getResourceName());\n                        //chunksPromises.push(chunk.downloadAsync(this.resourcesUrl));\n                        const atlasData = this.offsets[chunk.lib].data.atlas;\n                        const atlasImg = this.offsets[chunk.lib].atlas;\n                        chunksPromises.push(chunk.extractFromAtlas(atlasData, atlasImg));\n                    } else {\n                        let flippedType = this.partsets.partSet[chunk.type]['flipped-set-type'];\n                        if (flippedType !== \"\") {\n                            chunk.resType = flippedType;\n                        }\n                        if (chunk.action === \"std\" && (this.offsets[chunk.lib].data == null || this.offsets[chunk.lib].data[chunk.getResourceName()] == null || this.offsets[chunk.lib].data[chunk.getResourceName()].flipped)) {\n                            //console.log(\"Not found... \" + chunk.getResourceName());\n                            //chunk.resType = chunk.type;\n                            chunk.resAction = \"spk\";\n                        }\n                        if (this.offsets[chunk.lib].data == null || this.offsets[chunk.lib].data[chunk.getResourceName()] == null || this.offsets[chunk.lib].data[chunk.getResourceName()].flipped) {\n                            //console.log(\"Not found... \" + chunk.getResourceName());\n                            chunk.isFlip = true;\n                            chunk.resAction = chunk.action;\n                            //chunk.resType = chunk.type;\n\n                            chunk.resDirection = 6 - chunk.direction;\n                        }\n                        if (this.offsets[chunk.lib].data == null || this.offsets[chunk.lib].data[chunk.getResourceName()] == null || this.offsets[chunk.lib].data[chunk.getResourceName()].flipped) {\n                            chunk.resFrame = chunk.frame + 1;\n                            chunk.isFlip = false;\n                        }\n                        if (this.offsets[chunk.lib].data == null || this.offsets[chunk.lib].data[chunk.getResourceName()] == null || this.offsets[chunk.lib].data[chunk.getResourceName()].flipped) {\n                            //console.log(\"Not found again... \" + chunk.getResourceName());\n                            chunk.isFlip = false;\n                            chunk.resFrame = chunk.frame;\n                            chunk.resAction = chunk.action;\n                            //chunk.resType = chunk.type;\n                            if (chunk.direction === 7) {\n                                chunk.resDirection = 3;\n                            }\n                            if (chunk.direction === 3) {\n                                chunk.resDirection = 7;\n                            }\n                        }\n                        if (this.offsets[chunk.lib].data == null || this.offsets[chunk.lib].data[chunk.getResourceName()] == null || this.offsets[chunk.lib].data[chunk.getResourceName()].flipped) {\n                            chunk.resFrame = chunk.frame + 1;\n                            chunk.isFlip = false;\n                        }\n                        if (this.offsets[chunk.lib].data == null || this.offsets[chunk.lib].data[chunk.getResourceName()] == null || this.offsets[chunk.lib].data[chunk.getResourceName()].flipped) {\n                            //console.log(\"Not found... \" + chunk.getResourceName());\n                            chunk.resAction = chunk.action;\n                            chunk.resType = flippedType;\n                            chunk.resDirection = chunk.direction;\n                        }\n                        if (chunk.action === \"std\" && (this.offsets[chunk.lib].data == null || this.offsets[chunk.lib].data[chunk.getResourceName()] == null || this.offsets[chunk.lib].data[chunk.getResourceName()].flipped)) { //////// ?????? CHECK THIS\n                            //console.log(\"Not found... \" + chunk.getResourceName());\n                            chunk.resAction = \"spk\";\n                            chunk.resType = chunk.type;\n                        }\n                        if (this.offsets[chunk.lib].data != null && this.offsets[chunk.lib].data[chunk.getResourceName()] != null && !this.offsets[chunk.lib].data[chunk.getResourceName()].flipped) {\n                            //console.log(\"Found sprite: \" + chunk.getResourceName());\n                            //chunksPromises.push(chunk.downloadAsync(this.resourcesUrl));\n                            const atlasData = this.offsets[chunk.lib].data.atlas;\n                            const atlasImg = this.offsets[chunk.lib].atlas;\n                            chunksPromises.push(chunk.extractFromAtlas(atlasData, atlasImg));\n                        } else {\n                            //console.log(\"Not found... \" + chunk.getResourceName());\n                        }\n                    }\n                }\n\n                Promise.all(chunksPromises).catch(err => {\n                    reject(\"Error downloading chunks\");\n                }).then(() => {\n                    //console.log(\"drawing...\");\n\n                    for (let chunk of chunks) {\n                        if (this.offsets[chunk.lib].data != null && this.offsets[chunk.lib].data[chunk.getResourceName()] != null) {\n                            //console.log(chunk);\n                            if (chunk.resource != null) {\n                                let posX = -this.offsets[chunk.lib].data[chunk.getResourceName()].x;\n                                let posY = (avatarInfo.rectHeight / 2) - this.offsets[chunk.lib].data[chunk.getResourceName()].y + avatarInfo.rectHeight / 2.5;\n                                //console.log(\"x: \" + posX + \" - y: \" + posY + \" - color: \" + chunk.color);\n\n                                let img: any = chunk.resource;\n                                if (chunk.color != null) {\n                                    img = this.tintSprite(img, chunk.color, (isGhost ? 170 : 255));\n                                }\n                                if (chunk.isFlip) {\n                                    posX = -(posX + img.width - avatarInfo.rectWidth + 1);\n                                    img = this.flipImage(img);\n                                }\n                                if (tempCtx != null) {\n                                    tempCtx.drawImage(img, posX, posY);\n                                }\n                            } else {\n                                //console.log(\"Missing resource: \" + chunk.getResourceName());\n                            }\n                        }\n                    }\n\n                    if (avatarInfo.isDownsampled) {\n                        tempCanvas = this.downsampleImage(tempCanvas);\n                    }\n\n                    resolve(tempCanvas);\n                });\n            });\n        });\n    }\n\n    getActivePartSet(partSet: string): any {\n        const activeParts = this.partsets['activePartSet'][partSet]['activePart'];\n        if (activeParts == null || activeParts.length === 0) {\n            return null;\n        }\n        return activeParts;\n    }\n\n    getDrawOrder(action: string, direction: Direction): any {\n        const drawOrder = this.draworder[action][direction];\n        if (drawOrder == null || drawOrder.length === 0) {\n            return null;\n        }\n        return drawOrder;\n    }\n\n    getPartPalette(partType: string): any {\n        let partSet = this.figuredata['settype'][partType];\n        if (partSet != null) {\n            const paletteId = partSet['paletteid'];\n            return this.figuredata['palette'][paletteId];\n        }\n        return null;\n    }\n\n    getPartPaletteCount(partType: string, partId: string): number {\n        const partSet = this.getPartSet(partType);\n        if (partSet != null) {\n            const selectedPart = partSet[partId];\n            if (selectedPart != null) {\n                const chunks = selectedPart.part as any[];\n                const maxColors = Math.max.apply(Math, chunks.map(o => o.colorindex));\n                return Math.max(1, maxColors);\n            }\n        }\n        return 1;\n    }\n\n    getPartSet(partType: string): any {\n        let partSet = this.figuredata['settype'][partType];\n        if (partSet != null) {\n            return partSet.set;\n        }\n        return null;\n    }\n\n    getPartColor(figure: FigurePart): any {\n        const parts: any = {};\n        let partSet = this.figuredata['settype'][figure.type];\n        if (partSet != null) {\n            if (partSet['set'][figure.id] != null && partSet['set'][figure.id]['part'] != null) {\n                for (let rawPart of partSet['set'][figure.id]['part']) {\n                    const part: any = rawPart;\n                    //console.log(figure);\n                    //console.log(part);\n                    //console.log(\"paletteid: \" + partSet.paletteid + \" colors: \" + figure.colors[part.colorindex - 1]);\n\n                    let element: any = { \"index\": part.index, \"id\": part.id, \"colorable\": part.colorable };\n                    if (part.colorable) {\n                        element.color = this.getColorByPaletteId(partSet.paletteid, figure.colors[part.colorindex - 1]);\n                    }\n                    if (parts[part.type] == null) {\n                        parts[part.type] = [element];\n                    } else {\n                        parts[part.type].push(element);\n                    }\n                }\n            }\n            //r63 ?\n\n            parts.hidden = [];\n            if (partSet['set'][figure.id] != null && Array.isArray(partSet['set'][figure.id]['hidden'])) {\n                for (let partType of partSet['set'][figure.id]['hidden']) {\n                    parts.hidden.push(partType);\n                }\n            }\n        }\n        return parts;\n    }\n\n    getColorByPaletteId(paletteId: string, colorId: string): any {\n        if (this.figuredata['palette'][paletteId] != null && this.figuredata['palette'][paletteId][colorId] != null && this.figuredata['palette'][paletteId][colorId]['color'] != null) {\n            return this.figuredata['palette'][paletteId][colorId]['color'];\n        }\n        return null;\n    }\n\n    getPartUniqueName(type: string, partId: number): string {\n        let uniqueName = this.figuremap[type][partId];\n        if (uniqueName == null && type === \"hrb\") {\n            uniqueName = this.figuremap[\"hr\"][partId];\n        }\n        if (uniqueName == null) {\n            uniqueName = this.figuremap[type][1];\n        }\n        if (uniqueName == null) {\n            uniqueName = this.figuremap[type][0];\n        }\n        return uniqueName;\n    }\n\n    getPartResource(uniqueName: string, action: string, type: string, isSmall: boolean, partId: number, direction: Direction, frame: number, color: string) {\n        let partFrame = this.getFrameNumber(type, action, frame);\n        let chunk = new AvatarChunk(uniqueName, action, type, isSmall, partId, direction, partFrame, color);\n        let resourceName = chunk.getResourceName();\n        if (this.chunks[resourceName] != null && this.chunks[resourceName].resource != null) {\n            chunk.resource = this.chunks[resourceName].resource;\n            chunk.promise = this.chunks[resourceName].promise;\n        } else {\n            this.chunks[resourceName] = chunk;\n        }\n        return chunk;\n    }\n\n    getFrameNumber(type: string, action: string, frame: number) {\n        const translations: any = { \"wav\": \"Wave\", \"wlk\": \"Move\", \"spk\": \"Talk\" };\n        if (translations[action] != null) {\n            if (this.animation[translations[action]].part[type] != null) {\n                const count = this.animation[translations[action]].part[type].length;\n                if (this.animation[translations[action]].part[type][frame % count] != null) {\n                    return this.animation[translations[action]].part[type][frame % count].number;\n                }\n            }\n        }\n        return 0;\n    }\n\n    tintSprite(img: HTMLCanvasElement | HTMLImageElement, color: string, alpha: number): HTMLCanvasElement | null {\n        let element = document.createElement('canvas');\n        let c = element.getContext(\"2d\");\n        if (c == null)\n            return null;\n\n        let rgb = this.hex2rgb(color);\n\n        let width = img.width;\n        let height = img.height;\n\n        element.width = width;\n        element.height = height;\n\n        c.drawImage(img, 0, 0);\n        let imageData = c.getImageData(0, 0, width, height);\n        for (let y = 0; y < height; y++) {\n            let inpos = y * width * 4;\n            for (let x = 0; x < width; x++) {\n                inpos++; //r\n                inpos++; //g\n                inpos++; //b\n                let pa = imageData.data[inpos++];\n                if (pa !== 0) {\n                    imageData.data[inpos - 1] = alpha; //A\n                    imageData.data[inpos - 2] = Math.round(rgb.b * imageData.data[inpos - 2] / 255); //B\n                    imageData.data[inpos - 3] = Math.round(rgb.g * imageData.data[inpos - 3] / 255); //G\n                    imageData.data[inpos - 4] = Math.round(rgb.r * imageData.data[inpos - 4] / 255); //R\n                }\n            }\n        }\n        c.putImageData(imageData, 0, 0);\n        return element;\n    }\n\n    hex2rgb(hex: string): any {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? {\n            r: parseInt(result[1], 16),\n            g: parseInt(result[2], 16),\n            b: parseInt(result[3], 16)\n        } : null;\n    }\n\n    flipImage(img: HTMLCanvasElement | HTMLImageElement): HTMLCanvasElement | null {\n        let element = document.createElement('canvas');\n        let c = element.getContext(\"2d\");\n        if (c == null)\n            return null;\n\n        let width = img.width;\n        let height = img.height;\n        element.width = width;\n        element.height = height;\n\n        c.save();\n        c.scale(-1, 1);\n        c.drawImage(img, 0, 0, width * -1, height);\n        c.restore();\n\n        return element;\n    }\n\n    downsampleImage(img: HTMLCanvasElement | HTMLImageElement): HTMLCanvasElement | null {\n        let element = document.createElement('canvas');\n        let c = element.getContext(\"2d\");\n        if (c == null)\n            return null;\n\n        let width = img.width;\n        let height = img.height;\n        element.width = width;\n        element.height = height;\n\n        c.save();\n        c.scale(0.5, 0.5);\n        c.drawImage(img, 0, 0);\n        c.restore();\n\n        return element;\n    }\n}","import FurniBase from \"../imagers/furniture/FurniBase\";\nimport { Texture } from 'pixi.js-legacy';\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport { TextureDictionary } from \"../graphics/MainEngine\";\nimport { generateSilhouette } from \"../imagers/misc/Silhouettes\";\nimport { Direction } from \"../imagers/furniture/FurniImager\";\n\nexport default class BaseItem {\n    furniBase: FurniBase;\n    textures: TextureDictionary;\n    solidTextures: TextureDictionary;\n    infoImage: HTMLCanvasElement;\n    iconImage: HTMLCanvasElement;\n    iconTexture: Texture;\n\n    constructor(furniBase: FurniBase) {\n        this.furniBase = furniBase;\n        this.textures = {};\n        this.solidTextures = {};\n\n        for (let assetId in this.furniBase.assets) {\n            const asset = this.furniBase.assets[assetId];\n            this._loadTexture(asset.image, assetId);\n        }\n\n        this.infoImage = this.furniBase.draw(this.getUIViewDirection(), 0, 0);\n        this.iconImage = this.furniBase.drawIcon();\n        this.iconTexture = BobbaEnvironment.getGame().engine.getTextureFromImage(this.iconImage);\n    }\n\n    calculateNextDirection(current: Direction): Direction {\n        const available = this.furniBase.getAvailableDirections();\n        const pos = available.indexOf(current);\n        return available[(pos + 1) % available.length];\n    }\n\n    getUIViewDirection(): Direction {\n        const directions = this.furniBase.getAvailableDirections();\n        if (directions.includes(4)) {\n            return 4;\n        }\n        if (directions.includes(2)) {\n            return 2;\n        }\n        return directions[0];\n    }\n\n    getTexture(key: string): Texture | null {\n        if (this.textures[key] != null) {\n            return this.textures[key];\n        }\n        return null;\n    }\n\n    getSolidTexture(key: string): Texture | null {\n        if (this.solidTextures[key] != null) {\n            return this.solidTextures[key];\n        }\n        return null;\n    }\n\n    _loadTexture(image: HTMLImageElement, key: string) {\n        this.textures[key] = BobbaEnvironment.getGame().engine.getTextureFromImage(image);\n        this._loadSolidTexture(image, key);\n    }\n\n    _loadSolidTexture(image: HTMLImageElement, key: string) {\n        this.solidTextures[key] = BobbaEnvironment.getGame().engine.getTextureFromImage(generateSilhouette(image, 255, 255, 255));\n    }\n\n}","import FurniImager, { ItemType } from \"../imagers/furniture/FurniImager\";\nimport BaseItem from \"./BaseItem\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\n\nexport default class BaseItemManager {\n    furniImager: FurniImager;\n    items: BaseItemPromiseDictionary;\n\n    constructor(furniImager: FurniImager) {\n        this.furniImager = furniImager;\n        this.items = {};\n    }\n\n    getItem(itemType: ItemType, itemId: number): Promise<BaseItem> {\n        if (this.items[itemId] == null) {\n            this.items[itemId] = new Promise((resolve, reject) => {\n                BobbaEnvironment.getGame().furniImager.loadItemBase(itemType, itemId, 64).then(furniBase => {\n                    const baseItem = new BaseItem(furniBase);\n                    resolve(baseItem);\n                }).catch(err => reject(err));\n            });\n        }\n        return this.items[itemId];\n    }\n\n}\n\ninterface BaseItemPromiseDictionary {\n    [id: number]: Promise<BaseItem>;\n}","import IMessageHandler from \"./IMessageHandler\";\n\nexport default class WebSocketClient {\n    connected: boolean;\n    ws?: WebSocket;\n    messageHandler: IMessageHandler;\n    constructor(messageHandler: IMessageHandler) {\n        this.connected = false;\n        this.messageHandler = messageHandler;\n    }\n\n    send(data: string) {\n        if (this.connected && this.ws != null) {\n            this.ws.send(data);\n        }\n    }\n\n    connect(connectionURL: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            this.ws = new WebSocket(connectionURL);\n\n            this.ws.onopen = evt => {\n                this.connected = true;\n                this.messageHandler.handleOpenConnection();\n                resolve();\n            };\n\n            this.ws.onclose = evt => {\n                this.connected = false;\n                this.messageHandler.handleCloseConnection();\n            };\n\n            this.ws.onmessage = evt => {\n                this.messageHandler.handleMessage(evt.data);\n            };\n\n            this.ws.onerror = evt => {\n                if (!this.connected) {\n                    reject('Cannot connect to host');\n                }\n                this.connected = false;\n                this.messageHandler.handleConnectionError();\n            };\n        });\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class LoginOk implements IIncomingEvent {\n    handle(request: ServerMessage) {\n\n        const id = request.popInt();\n        const name = request.popString();\n        const look = request.popString();\n        const motto = request.popString();\n        BobbaEnvironment.getGame().handleUserData(id, name, look, motto);\n    }\n}","export default class ServerMessage {\n    pointer: number;\n    id: number;\n    tokens: string[];\n\n    constructor(data: string) {\n        this.pointer = 0;\n        this.tokens = data.split(SEPARATOR);\n        this.id = this.popInt();\n    }\n\n    popToken(): string {\n        if (this.tokens.length > this.pointer) {\n            return this.tokens[this.pointer++];\n        }\n        return \"\";\n    }\n\n    popInt(): number {\n        return parseInt(this.popToken());\n    }\n\n    popFloat(): number {\n        return parseFloat(this.popToken());\n    }\n\n    popString(): string {\n        const tickets = this.popInt();\n        let str = this.popToken();\n        for (let i = 0; i < tickets; i++) {\n            str += SEPARATOR + this.popToken();\n        }\n        return str;\n    }\n\n    popBoolean(): boolean {\n        return this.popInt() === 1;\n    }\n}\n\nconst SEPARATOR = '|';","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport { Direction } from \"../../../imagers/furniture/FurniImager\";\n\nexport default class HandleFloorItems implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const count = request.popInt();\n        for (let i = 0; i < count; i++) {\n            const id = request.popInt();\n            const x = request.popInt();\n            const y = request.popInt();\n            const z = request.popFloat();\n            const rot = request.popInt();\n            const baseId = request.popInt();\n            const state = request.popInt();\n\n            const room = BobbaEnvironment.getGame().currentRoom;\n            if (room != null) {\n                room.roomItemManager.addFloorItemToRoom(id, x, y, z, rot as Direction, state, baseId);\n            }\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport { Direction } from \"../../../imagers/avatars/AvatarInfo\";\n\nexport default class HandleRoomUsers implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const count = request.popInt();\n        for (let i = 0; i < count; i++) {\n            const id = request.popInt();\n            const x = request.popInt();\n            const y = request.popInt();\n            const z = request.popFloat();\n            const rot = request.popInt();\n            const name = request.popString();\n            const look = request.popString();\n            const motto = request.popString();\n\n            const room = BobbaEnvironment.getGame().currentRoom;\n            if (room != null) {\n                room.roomUserManager.addUserToRoom(id, x, y, z, rot as Direction, name, look, motto);\n            }\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport { Direction } from \"../../../imagers/avatars/AvatarInfo\";\nimport { StatusContainer } from \"../../../rooms/users/RoomUser\";\n\nexport default class HandleRoomUserStatus implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const count = request.popInt();\n        for (let i = 0; i < count; i++) {\n            const id = request.popInt();\n            const x = request.popInt();\n            const y = request.popInt();\n            const z = request.popFloat();\n            const rot = request.popInt();\n            const statusesCount = request.popInt();\n            const statuses: { [key: string]: string } = {};\n\n            for (let j = 0; j < statusesCount; j++) {\n                const key = request.popString();\n                const value = request.popString();\n                statuses[key] = value;\n            }\n\n            const room = BobbaEnvironment.getGame().currentRoom;\n            if (room != null) {\n                room.roomUserManager.updateUserStatus(id, x, y, z, rot as Direction, statuses as StatusContainer);\n            }\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleRoomUserRemove implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const userId = request.popInt();\n        const room = BobbaEnvironment.getGame().currentRoom;\n        if (room != null) {\n            room.roomUserManager.removeUserFromRoom(userId, true);\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleIncomingChat implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const userId = request.popInt();\n        const text = request.popString();\n\n        const room = BobbaEnvironment.getGame().currentRoom;\n        if (room != null) {\n            room.chatManager.addChat(userId, text);\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleRoomUserWave implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const userId = request.popInt();\n        const room = BobbaEnvironment.getGame().currentRoom;\n        if (room != null) {\n            room.roomUserManager.userWave(userId);\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleRoomItemRemove implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const itemId = request.popInt();\n        const room = BobbaEnvironment.getGame().currentRoom;\n        if (room != null) {\n            room.roomItemManager.removeItemFromRoom(itemId, true);\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleRoomItemState implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const itemId = request.popInt();\n        const state = request.popInt();\n        const room = BobbaEnvironment.getGame().currentRoom;\n        if (room != null) {\n            room.roomItemManager.itemSetState(itemId, state);\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport { Direction } from \"../../../imagers/furniture/FurniImager\";\n\nexport default class HandleWallItems implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const count = request.popInt();\n        for (let i = 0; i < count; i++) {\n\n            const id = request.popInt();\n            const x = request.popInt();\n            const y  = request.popInt();\n            const rot = request.popInt();\n            const baseId = request.popInt();\n            const state = request.popInt();\n\n            const room = BobbaEnvironment.getGame().currentRoom;\n            if (room != null) {\n                room.roomItemManager.addWallItemToRoom(id, x, y, rot as Direction, state, baseId);\n            }\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport { ItemType } from \"../../../imagers/furniture/FurniImager\";\n\nexport default class HandleInventoryItems implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const count = request.popInt();\n        for (let i = 0; i < count; i++) {\n            const itemId = request.popInt();\n            const itemType = request.popString() === 'F' ? ItemType.FloorItem : ItemType.WallItem;\n            const baseId = request.popInt();\n            const state = request.popInt();\n            const isStackable = request.popBoolean();\n\n            BobbaEnvironment.getGame().inventory.addItem(itemId, baseId, state, isStackable, itemType);\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleInventoryItemRemove implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const itemId = request.popInt();\n        BobbaEnvironment.getGame().inventory.removeItem(itemId);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport { CatalogueIndex } from \"../../../catalogue/Catalogue\";\n\nexport default class HandleCatalogueIndex implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const mainTreeSize = request.popInt();\n        const pages: CatalogueIndex[] = [];\n        for (let i = 0; i < mainTreeSize; i++) {\n            pages.push(this.extractPage(request));\n        }\n\n        BobbaEnvironment.getGame().catalogue.setIndex(pages);\n    }\n\n    extractPage(request: ServerMessage): CatalogueIndex {\n        const visible = request.popBoolean();\n        const color = request.popInt();\n        const iconId = request.popInt();\n        const id = request.popInt();\n        const name = request.popString();\n        const childrenCount = request.popInt();\n        const children: CatalogueIndex[] = [];\n\n        for (let i = 0; i < childrenCount; i++) {\n            children.push(this.extractPage(request));\n        }\n\n        return {\n            id,\n            name,\n            iconId,\n            color,\n            visible,\n            children,\n        }\n    }\n}\n","import { ItemType } from \"../imagers/furniture/FurniImager\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport BaseItem from \"../items/BaseItem\";\n\nexport default class CatalogueItem {\n    itemId: number;\n    itemName: string;\n    cost: number;\n    itemType: ItemType;\n    baseId: number;\n    baseItem: BaseItem | null;\n    amount: number;\n\n    constructor(itemId: number, itemName: string, cost: number, itemType: ItemType, baseId: number, amount: number) {\n        this.itemId = itemId;\n        this.itemName = itemName;\n        this.cost = cost;\n        this.itemType = itemType;\n        this.baseId = baseId;\n        this.amount = amount;\n        this.baseItem = null;\n    }\n\n    loadBase(): Promise<BaseItem> {\n        return BobbaEnvironment.getGame().baseItemManager.getItem(this.itemType, this.baseId).then(baseItem => {\n            this.baseItem = baseItem;\n            return baseItem;\n        });\n    }\n}","import CatalogueItem from \"./CatalogueItem\";\n\nexport default class CataloguePage {\n    id: number;\n    layout: string;\n    imageHeadline: string;\n    imageTeaser: string;\n    textHeader: string;\n    textDetails: string;\n    textMisc: string;\n    textMisc2: string;\n    items: CatalogueItem[];\n\n    constructor(id: number, layout: string, imageHeadline: string, imageTeaser: string, textHeader: string, textDetails: string, textMisc: string, textMisc2: string, items: CatalogueItem[]) {\n        this.id = id;\n        this.layout = layout;\n        this.imageHeadline = imageHeadline;\n        this.imageTeaser = imageTeaser;\n        this.textHeader = textHeader;\n        this.textDetails = textDetails;\n        this.textMisc = textMisc;\n        this.textMisc2 = textMisc2;\n        this.items = items;\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport { ItemType } from \"../../../imagers/furniture/FurniImager\";\nimport CatalogueItem from \"../../../catalogue/CatalogueItem\";\nimport CataloguePage from \"../../../catalogue/CataloguePage\";\n\nexport default class HandleCataloguePage implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const pageId = request.popInt();\n        const layout = request.popString();\n        const imageHeadline = request.popString();\n        const imageTeaser = request.popString();\n        const textHeader = request.popString();\n        const textDetails = request.popString();\n        const textMisc = request.popString();\n        const textMisc2 = request.popString();\n\n        const itemCount = request.popInt();\n\n        const items: CatalogueItem[] = [];\n\n        for (let i = 0; i < itemCount; i++) {\n            const itemId = request.popInt();\n            const itemName = request.popString();\n            const cost = request.popInt();\n            const itemType = request.popString() === 'F' ? ItemType.FloorItem : ItemType.WallItem;\n            const baseId = request.popInt();\n            const amount = request.popInt();\n            items.push(new CatalogueItem(itemId, itemName, cost, itemType, baseId, amount));\n        }\n\n        const page = new CataloguePage(pageId, layout, imageHeadline, imageTeaser, textHeader, textDetails, textMisc, textMisc2, items);\n        BobbaEnvironment.getGame().catalogue.setCataloguePage(page);\n    }\n}\n","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleCataloguePurchaseError implements IIncomingEvent{\n    handle(request: ServerMessage): void {\n        const notEnoughCredits = request.popBoolean();\n        if (notEnoughCredits) {\n            BobbaEnvironment.getGame().uiManager.onShowNotification('Not enough credits');\n        }\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\n//import { ItemType } from \"../../../imagers/furniture/FurniImager\";\n\nexport default class HandleCataloguePurchaseInformation implements IIncomingEvent{\n    handle(request: ServerMessage): void {\n        /*const itemId = request.popInt();\n        const itemName = request.popString();\n        const cost = request.popInt();\n        const itemType = request.popString() === 'F' ? ItemType.FloorItem : ItemType.WallItem;\n        const baseId = request.popInt();*/\n\n        //TODO: notify purchase????\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleUpdateCreditsBalance implements IIncomingEvent{\n    handle(request: ServerMessage): void {\n        const credits = request.popInt();   \n        BobbaEnvironment.getGame().userManager.updateCreditsBalance(credits);\n    }\n}","export default class RoomModel {\n    maxX: number;\n    maxY: number;\n    doorX: number;\n    doorY: number;\n    heightMap: number[][];\n\n    constructor(maxX: number, maxY: number, doorX: number, doorY: number, heightMap: number[][]) {\n        this.maxX = maxX;\n        this.maxY = maxY;\n        this.doorX = doorX;\n        this.doorY = doorY;\n        this.heightMap = heightMap;\n    }\n    \n    isValidTile(x: number, y: number): boolean {\n        return (x >= 0 && x < this.maxX && y >= 0 && y < this.maxY && this.heightMap[x][y] !== 0);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport RoomModel from \"../../../rooms/RoomModel\";\n\nexport default class HandleHeightMap implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const cols = request.popInt();\n        const rows = request.popInt();\n        const doorX = request.popInt();\n        const doorY = request.popInt();\n\n        const heightmap: number[][] = [];\n\n        for (let i = 0; i < cols; i++) {\n            heightmap.push([]);\n            for (let j = 0; j < rows; j++) {\n                heightmap[i].push(request.popInt());\n            }\n        }\n\n        const model = new RoomModel(cols, rows, doorX, doorY, heightmap);\n        BobbaEnvironment.getGame().handleHeightMap(model);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleRoomModelInfo implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const modelId = request.popString();\n        const roomId = request.popInt();\n\n        BobbaEnvironment.getGame().handleRoomModelInfo(modelId, roomId);\n    }\n}","import User from \"../users/User\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport RequestMessengerSendMessage from \"../communication/outgoing/messenger/RequestMessengerSendMessage\";\nimport RequestMessengerFollowFriend from \"../communication/outgoing/messenger/RequestMessengerFollowFriend\";\nimport RequestMessengerRemoveFriend from \"../communication/outgoing/messenger/RequestMessengerRemoveFriend\";\nimport RequestMessengerAcceptFriend from \"../communication/outgoing/messenger/RequestMessengerAcceptFriend\";\nimport RequestMessengerDenyFriend from \"../communication/outgoing/messenger/RequestMessengerDenyFriend\";\nimport RequestMessengerSearchFriend from \"../communication/outgoing/messenger/RequestMessengerFriendSearch\";\nimport RequestMessengerAddFriend from \"../communication/outgoing/messenger/RequestMessengerAddFriend\";\n\nexport enum MessengerMessageType {\n    Me, Friend, Info\n}\n\nexport type MessengerMessage = {\n    text: string,\n    type: MessengerMessageType,\n};\n\nexport type MessengerChat = {\n    user: User,\n    chats: MessengerMessage[]\n}\n\nexport default class Messenger {\n    activeChats: { [id: number]: MessengerChat };\n    onlineFriends: User[];\n    offlineFriends: User[];\n\n    constructor() {\n        this.activeChats = {};\n        this.onlineFriends = [];\n        this.offlineFriends = [];\n    }\n\n    requestStartChat(userId: number) {\n        const user = BobbaEnvironment.getGame().userManager.getUser(userId);\n        if (user != null) {\n            this._tryInitializeChat(user);\n            BobbaEnvironment.getGame().uiManager.onOpenMessengerChat(this.activeChats[userId]);\n        }\n    }\n\n    getActiveChat(userId: number): MessengerChat | null {\n        const user = BobbaEnvironment.getGame().userManager.getUser(userId);\n        if (user != null) {\n            this._tryInitializeChat(user);\n            return this.activeChats[userId];\n        }\n        return null;\n    }\n\n    handleFriends(online: User[], offline: User[]) {\n        this.onlineFriends = online;\n        this.offlineFriends = offline;\n        this.notifyUiFriendsUpdate();\n    }\n\n    handleFriendsSearch(user: User[]) {\n\n    }\n\n    handleFriendRequests(user: User[]) {\n\n    }\n\n    notifyUiFriendsUpdate() {\n        BobbaEnvironment.getGame().uiManager.onSetFriends(this.onlineFriends, this.offlineFriends);\n    }\n\n    handleUpdateFriend(user: User, isOnline: boolean) {\n        this.offlineFriends = this.offlineFriends.filter(value => value.id !== user.id);\n        this.onlineFriends = this.onlineFriends.filter(value => value.id !== user.id);\n\n        if (isOnline) {\n            this.onlineFriends.push(user);\n        } else {\n            this.offlineFriends.push(user);\n        }\n\n        this.notifyUiFriendsUpdate();\n        const activeChat = this.activeChats[user.id]\n        if (activeChat != null) {\n            if (isOnline) {\n                this.handleMessengerMessage(user.id, \"Your friend went online.\", MessengerMessageType.Info);\n            } else {\n                this.handleMessengerMessage(user.id, \"Your friend went offline.\", MessengerMessageType.Info);\n            }\n        }\n    }\n\n    _tryInitializeChat(user: User) {\n        if (this.activeChats[user.id] == null) {\n            this.activeChats[user.id] = {\n                user,\n                chats: [],\n            };\n        }\n    }\n\n    getCurrentTime(): string {\n        const dateWithouthSecond = new Date();\n        return dateWithouthSecond.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: false });\n    }\n\n    handleMessengerMessage(userId: number, text: string, type: MessengerMessageType) {\n        const user = BobbaEnvironment.getGame().userManager.getUser(userId);\n        if (user != null) {\n            this._tryInitializeChat(user);\n\n            if (type !== MessengerMessageType.Info) {\n                text = this.getCurrentTime() + \": \" + text;\n            }\n\n            const message: MessengerMessage = {\n                text,\n                type\n            };\n\n            this.activeChats[userId].chats.push(message);\n\n            const isActive = BobbaEnvironment.getGame().uiManager.onReceiveMessengerMessage(this.activeChats[userId]);\n            if (!isActive && type === MessengerMessageType.Friend) {\n                BobbaEnvironment.getGame().soundManager.playConsoleReceiveSound();\n                BobbaEnvironment.getGame().uiManager.onShowMessengerAlert();\n            }\n        }\n    }\n\n    sendChatMessage(userId: number, text: string) {\n        const activeChat = this.activeChats[userId];\n        if (activeChat != null) {\n            if (activeChat.chats.length === 0) {\n                BobbaEnvironment.getGame().soundManager.playConsoleSentSound();\n            }\n        }\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestMessengerSendMessage(userId, text));\n    }\n\n    requestFollowFriend(userId: number) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestMessengerFollowFriend(userId));\n    }\n\n    requestAddFriend(userId: number) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestMessengerAddFriend(userId));\n    }\n\n    requestRemoveFriend(userId: number) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestMessengerRemoveFriend(userId));\n    }\n\n    requestFriendSearch(search: string) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestMessengerSearchFriend(search));\n    }\n\n    acceptFriendRequest(userId: number) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestMessengerAcceptFriend(userId));\n    }\n\n    denyFriendRequest(userId: number) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestMessengerDenyFriend(userId));\n    }\n}","import ServerMessage from \"../../protocol/ServerMessage\";\nimport IIncomingEvent from \"../IIncomingEvent\";\nimport RoomData, { LockType } from \"../../../navigator/RoomData\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport const getRoomData = (request: ServerMessage): RoomData => {\n    const id = request.popInt();\n    const name = request.popString();\n    const owner = request.popString();\n    const description = request.popString();\n    const lockTypeId = request.popInt();\n    const userCount = request.popInt();\n    const capacity = request.popInt();\n\n    let lockType = LockType.Open;\n    if (lockTypeId === 1) {\n        lockType = LockType.Locked;\n    } else if (lockTypeId === 2) {\n        lockType = LockType.Password;\n    }\n\n    return new RoomData(id, name, owner, description, capacity, userCount, false, lockType);\n};\nexport default class HandleRoomData implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const data = getRoomData(request);\n        \n        BobbaEnvironment.getGame().navigator.handleCurrentRoomData(data);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport { getRoomData } from \"../roomdata/HandleRoomData\";\nimport RoomData from \"../../../navigator/RoomData\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleRoomList implements IIncomingEvent {\n    handle(request: ServerMessage): void {\n        const count = request.popInt();\n        const roomDatas: RoomData[] = [];\n        for (let i = 0; i < count; i++) {\n            const data = getRoomData(request);\n            roomDatas.push(data);\n        }\n\n        BobbaEnvironment.getGame().navigator.handleRoomDataList(roomDatas);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleLeaveRoom implements IIncomingEvent {\n    handle(request: ServerMessage): void {\n        BobbaEnvironment.getGame().unloadRoom();\n    }\n    \n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport User from \"../../../users/User\";\n\nexport default class HandleMessengerFriends implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const count = request.popInt();\n        const onlineFriends: User[] = [];\n        const offlineFriends: User[] = [];\n\n        for (let i = 0; i < count; i++) {\n            const id = request.popInt();\n            const username = request.popString();\n            const look = request.popString();\n            const motto = request.popString();\n            const isOnline = request.popBoolean();\n\n            const user = BobbaEnvironment.getGame().userManager.setUser(id, username, motto, look);\n            if (isOnline) {\n                onlineFriends.push(user);\n            } else {\n                offlineFriends.push(user);\n            }\n        }\n\n        BobbaEnvironment.getGame().messenger.handleFriends(onlineFriends, offlineFriends);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MESSENGER_SEND_MESSAGE } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMessengerSendMessage extends ClientMessage {\n    constructor(userId: number, text: string) {\n        super(REQUEST_MESSENGER_SEND_MESSAGE);\n        this.appendInt(userId);\n        this.appendString(text);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MESSENGER_FOLLOW_FRIEND } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMessengerFollowFriend extends ClientMessage {\n    constructor(userId: number) {\n        super(REQUEST_MESSENGER_FOLLOW_FRIEND);\n        this.appendInt(userId);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MESSENGER_REMOVE_FRIEND } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMessengerRemoveFriend extends ClientMessage {\n    constructor(userId: number) {\n        super(REQUEST_MESSENGER_REMOVE_FRIEND);\n        this.appendInt(userId);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MESSENGER_ACCEPT_FRIEND } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMessengerAcceptFriend extends ClientMessage {\n    constructor(userId: number) {\n        super(REQUEST_MESSENGER_ACCEPT_FRIEND);\n        this.appendInt(userId);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MESSENGER_DENY_FRIEND } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMessengerDenyFriend extends ClientMessage {\n    constructor(userId: number) {\n        super(REQUEST_MESSENGER_DENY_FRIEND);\n        this.appendInt(userId);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MESSENGER_SEARCH_FRIEND } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMessengerSearchFriend extends ClientMessage {\n    constructor(search: string) {\n        super(REQUEST_MESSENGER_SEARCH_FRIEND);\n        this.appendString(search);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MESSENGER_ADD_FRIEND } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMessengerAddFriend extends ClientMessage {\n    constructor(userId: number) {\n        super(REQUEST_MESSENGER_ADD_FRIEND);\n        this.appendInt(userId);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport { MessengerMessageType } from \"../../../messenger/Messenger\";\n\nexport default class HandleMessengerMessage implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const userId = request.popInt();\n        const text = request.popString();\n        const isMe = request.popBoolean();\n\n        BobbaEnvironment.getGame().messenger.handleMessengerMessage(userId, text, isMe ? MessengerMessageType.Me : MessengerMessageType.Friend);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport User from \"../../../users/User\";\n\nexport default class HandleMessengerRequests implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const count = request.popInt();\n        const users: User[] = [];\n\n        for (let i = 0; i < count; i++) {\n            const id = request.popInt();\n            const username = request.popString();\n            const look = request.popString();\n            const motto = request.popString();\n            request.popBoolean();\n\n            const user = BobbaEnvironment.getGame().userManager.setUser(id, username, motto, look);\n            users.push(user);\n        }\n\n        BobbaEnvironment.getGame().messenger.handleFriendRequests(users);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\nimport User from \"../../../users/User\";\n\nexport default class HandleMessengerSearchResult implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const count = request.popInt();\n        const users: User[] = [];\n\n        for (let i = 0; i < count; i++) {\n            const id = request.popInt();\n            const username = request.popString();\n            const look = request.popString();\n            const motto = request.popString();\n            request.popBoolean();\n\n            const user = BobbaEnvironment.getGame().userManager.setUser(id, username, motto, look);\n            users.push(user);\n        }\n\n        BobbaEnvironment.getGame().messenger.handleFriendsSearch(users);\n    }\n}","import IIncomingEvent from \"../IIncomingEvent\";\nimport ServerMessage from \"../../protocol/ServerMessage\";\nimport BobbaEnvironment from \"../../../BobbaEnvironment\";\n\nexport default class HandleMessengerUpdateFriend implements IIncomingEvent {\n    handle(request: ServerMessage) {\n        const id = request.popInt();\n        const username = request.popString();\n        const look = request.popString();\n        const motto = request.popString();\n        const isOnline = request.popBoolean();\n\n        const user = BobbaEnvironment.getGame().userManager.setUser(id, username, motto, look);\n\n        BobbaEnvironment.getGame().messenger.handleUpdateFriend(user, isOnline);\n    }\n}","import IMessageHandler from \"../net/IMessageHandler\";\nimport WebSocketClient from \"../net/WebSocketClient\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport IIncomingEvent from \"./incoming/IIncomingEvent\";\nimport { LOGIN_OK, ROOM_DATA_HEIGHTMAP, ROOM_ITEM_DATA, PLAYERS_DATA, PLAYER_STATUS, PLAYER_REMOVE, CHAT, PLAYER_WAVE, ITEM_REMOVE, ITEM_STATE, WALL_ITEM_DATA, INVENTORY_ITEMS, INVENTORY_ITEM_REMOVE, CATALOGUE_INDEX, CATALOGUE_PAGE, CATALOGUE_PURCHASE_ERROR, CATALOGUE_PURCHASE_INFO, CREDITS_BALANCE, ROOM_DATA_MODEL_INFO, ROOM_DATA, NAVIGATOR_ROOM_LIST, NAVIGATOR_LEAVE_ROOM, MESSENGER_FRIENDS, MESSENGER_MESSAGE, MESSENGER_REQUESTS, MESSENGER_SEARCH_RESULT, MESSENGER_UPDATE_FRIEND } from \"./protocol/OpCodes/ServerOpCodes\";\nimport HandleLoginOk from \"./incoming/generic/HandleLoginOk\";\nimport ServerMessage from \"./protocol/ServerMessage\";\nimport ClientMessage from \"./protocol/ClientMessage\";\nimport HandleFloorItems from \"./incoming/rooms/HandleFloorItems\";\nimport HandleRoomUsers from \"./incoming/rooms/HandleRoomUsers\";\nimport HandleRoomUserStatus from \"./incoming/rooms/HandleRoomUserStatus\";\nimport HandleRoomUserRemove from \"./incoming/rooms/HandleRoomUserRemove\";\nimport HandleIncomingChat from \"./incoming/rooms/HandleIncomingChat\";\nimport HandleRoomUserWave from \"./incoming/rooms/HandleRoomUserWave\";\nimport HandleRoomItemRemove from \"./incoming/rooms/HandleRoomItemRemove\";\nimport HandleRoomItemState from \"./incoming/rooms/HandleRoomItemState\";\nimport HandleWallItems from \"./incoming/rooms/HandleWallItems\";\nimport HandleInventoryItems from \"./incoming/generic/HandleInventoryItems\";\nimport HandleInventoryItemRemove from \"./incoming/generic/HandleInventoryItemRemove\";\nimport HandleCatalogueIndex from \"./incoming/catalogue/HandleCatalogueIndex\";\nimport HandleCataloguePage from \"./incoming/catalogue/HandleCataloguePage\";\nimport HandleCataloguePurchaseError from \"./incoming/catalogue/HandleCataloguePurchaseError\";\nimport HandleCataloguePurchaseInformation from \"./incoming/catalogue/HandlePurchaseCatalogueInformation\";\nimport HandleUpdateCreditsBalance from \"./incoming/generic/HandleUpdateCreditsBalance\";\nimport HandleHeightMap from \"./incoming/roomdata/HandleHeightMap\";\nimport HandleRoomModelInfo from \"./incoming/roomdata/HandleRoomModelInfo\";\nimport HandleRoomData from \"./incoming/roomdata/HandleRoomData\";\nimport HandleRoomList from \"./incoming/navigator/HandleRoomList\";\nimport HandleLeaveRoom from \"./incoming/navigator/HandleLeaveRoom\";\nimport HandleMessengerFriends from \"./incoming/messenger/HandleMessengerFriends\";\nimport HandleMessengerMessage from \"./incoming/messenger/HandleMessengerMessage\";\nimport HandleMessengerRequests from \"./incoming/messenger/HandleMessengerRequests\";\nimport HandleMessengerSearchResult from \"./incoming/messenger/HandleMessengerSearchResult\";\nimport HandleMessengerUpdateFriend from \"./incoming/messenger/HandleMessengerUpdateFriend\";\n\nexport default class CommunicationManager implements IMessageHandler {\n    client: WebSocketClient;\n    requestHandlers: IncomingEventDictionary;\n\n    constructor() {\n        this.client = new WebSocketClient(this);\n        this.requestHandlers = {};\n        this._registerRequests();\n    }\n\n    _registerRequests() {\n        this.requestHandlers[LOGIN_OK] = new HandleLoginOk();\n        this.requestHandlers[ROOM_DATA_HEIGHTMAP] = new HandleHeightMap();\n        this.requestHandlers[PLAYERS_DATA] = new HandleRoomUsers();\n        this.requestHandlers[PLAYER_STATUS] = new HandleRoomUserStatus();\n        this.requestHandlers[PLAYER_REMOVE] = new HandleRoomUserRemove();\n        this.requestHandlers[CHAT] = new HandleIncomingChat();\n        this.requestHandlers[PLAYER_WAVE] = new HandleRoomUserWave();\n        this.requestHandlers[ROOM_ITEM_DATA] = new HandleFloorItems();\n        this.requestHandlers[ITEM_REMOVE] = new HandleRoomItemRemove();\n        this.requestHandlers[ITEM_STATE] = new HandleRoomItemState();\n        this.requestHandlers[WALL_ITEM_DATA] = new HandleWallItems();\n        this.requestHandlers[INVENTORY_ITEMS] = new HandleInventoryItems();\n        this.requestHandlers[INVENTORY_ITEM_REMOVE] = new HandleInventoryItemRemove();\n        this.requestHandlers[CATALOGUE_INDEX] = new HandleCatalogueIndex();\n        this.requestHandlers[CATALOGUE_PAGE] = new HandleCataloguePage();\n        this.requestHandlers[CATALOGUE_PURCHASE_ERROR] = new HandleCataloguePurchaseError();\n        this.requestHandlers[CATALOGUE_PURCHASE_INFO] = new HandleCataloguePurchaseInformation();\n        this.requestHandlers[CREDITS_BALANCE] = new HandleUpdateCreditsBalance();\n        this.requestHandlers[ROOM_DATA_MODEL_INFO] = new HandleRoomModelInfo();\n        this.requestHandlers[ROOM_DATA] = new HandleRoomData();\n        this.requestHandlers[NAVIGATOR_ROOM_LIST] = new HandleRoomList();\n        this.requestHandlers[NAVIGATOR_LEAVE_ROOM] = new HandleLeaveRoom();\n        this.requestHandlers[MESSENGER_FRIENDS] = new HandleMessengerFriends();\n        this.requestHandlers[MESSENGER_MESSAGE] = new HandleMessengerMessage();\n        this.requestHandlers[MESSENGER_REQUESTS] = new HandleMessengerRequests();\n        this.requestHandlers[MESSENGER_SEARCH_RESULT] = new HandleMessengerSearchResult();\n        this.requestHandlers[MESSENGER_UPDATE_FRIEND] = new HandleMessengerUpdateFriend();\n    }\n\n    sendMessage(message: ClientMessage) {\n        if (this.client.connected) {\n            //console.log('Sent [' + message.id + ']: ' + message.constructor.name);\n            this.client.send(message.body);\n        }\n    }\n\n    handleMessage = (rawMessage: string): void => {\n        const message = new ServerMessage(rawMessage);\n        const handler = this.requestHandlers[message.id];\n        if (handler == null) {\n            //console.log('No handler for: ' + message.id);\n        } else {\n            //console.log('Handled [' + message.id + ']: ' + handler.constructor.name);\n            handler.handle(message);\n        }\n    }\n\n    handleOpenConnection = (): void => {\n        BobbaEnvironment.getGame().uiManager.log(\"Connected!!1\");\n    }\n\n    handleCloseConnection = (): void => {\n        BobbaEnvironment.getGame().stop();\n    }\n\n    handleConnectionError = (): void => {\n\n    }\n\n    connect(connectionURL: string): Promise<void> {\n        return this.client.connect(connectionURL);\n    }\n}\n\ninterface IncomingEventDictionary {\n    [id: number]: IIncomingEvent;\n}","export const LOGIN_OK = 3;\nexport const ROOM_DATA_HEIGHTMAP = 4;\nexport const PLAYERS_DATA = 6;\nexport const PLAYER_STATUS = 8;\nexport const CHAT = 10;\nexport const PLAYER_REMOVE = 11;\nexport const PLAYER_WAVE = 14;\nexport const ROOM_ITEM_DATA = 16;\nexport const ITEM_REMOVE = 17;\nexport const ITEM_STATE = 19;\nexport const WALL_ITEM_DATA = 20;\nexport const INVENTORY_ITEMS = 21;\nexport const INVENTORY_ITEM_REMOVE = 22;\nexport const CATALOGUE_INDEX = 23;\nexport const CATALOGUE_PAGE = 24;\nexport const CATALOGUE_PURCHASE_ERROR = 25;\nexport const CATALOGUE_PURCHASE_INFO = 26;\nexport const CREDITS_BALANCE = 27;\nexport const ROOM_DATA_MODEL_INFO = 28;\nexport const ROOM_DATA = 29;\nexport const NAVIGATOR_ROOM_LIST = 30;\nexport const NAVIGATOR_LEAVE_ROOM = 31;\nexport const MESSENGER_FRIENDS = 32;\nexport const MESSENGER_SEARCH_RESULT = 33;\nexport const MESSENGER_MESSAGE = 34;\nexport const MESSENGER_REQUESTS = 35;\nexport const MESSENGER_UPDATE_FRIEND = 36;\n","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_ROOM_DATA } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestRoomData extends ClientMessage {\n    constructor() {\n        super(REQUEST_ROOM_DATA);\n    }\n}","export default class ChatStyle {\n    base: HTMLImageElement;\n    pointer: HTMLImageElement;\n    color: HTMLImageElement;\n    regPoints: RegPoints;\n\n    constructor(regPoints: RegPoints, base: HTMLImageElement, pointer: HTMLImageElement, color: HTMLImageElement) {\n        this.regPoints = regPoints;\n        this.base = base;\n        this.pointer = pointer;\n        this.color = color;\n    }\n}\n\nexport interface RegPoints {\n    sliceXY: number[],\n    sliceWH: number[],\n    colorXY: number[],\n    pointerY: number,\n    faceXY: number[],\n    textFieldMargins: number[],\n    textColorRGB: number,\n    fontFace: string,\n    fontSize: number,\n    overlapRect: number[],\n}","import ChatStyle, { RegPoints } from \"./ChatStyle\";\n\nexport default class ChatImager {\n    chatStyles: ChatStyleDictionary;\n\n    constructor() {\n        this.chatStyles = {};\n    }\n\n    initialize(): Promise<void> {\n        const base = \"assets/normal_chat/style_normal_chat_bubble_base.png\";\n        const color = \"assets/normal_chat/style_normal_chat_bubble_color.png\";\n        const pointer = \"assets/normal_chat/style_normal_chat_bubble_pointer.png\";\n        const regpoints = \"assets/normal_chat/regpoints.json\";\n        return this._downloadChatStyle(regpoints, base, pointer, color).then(style => {\n            this.chatStyles[0] = style;\n        });\n    }\n\n    _downloadChatStyle(regPoints: string, base: string, pointer: string, color: string): Promise<ChatStyle> {\n        return this._fetchJsonAsync(regPoints)\n            .then(regPointsData => this._downloadImageAsync(base)\n                .then(baseData => this._downloadImageAsync(pointer)\n                    .then(pointerData => this._downloadImageAsync(color).then(colorData => new ChatStyle(regPointsData as RegPoints, baseData, pointerData, colorData)))));\n    }\n\n    _fetchJsonAsync(URL: string): Promise<object> {\n        return new Promise((resolve, reject) => {\n\n            const options: RequestInit = {\n                method: 'GET',\n                mode: 'cors',\n                cache: 'default',\n            };\n\n            fetch(URL, options)\n                .then(response => response.json())\n                .then(data => resolve(data))\n                .catch(err => reject(err));\n        });\n    }\n\n    _downloadImageAsync(resourceName: string): Promise<HTMLImageElement> {\n        let img = new Image();\n        let d: Promise<HTMLImageElement> = new Promise((resolve, reject) => {\n            img.onload = () => {\n                //console.log(\"downloaded \" + this.itemName + \" -> \" + this.resourceName);\n                resolve(img);\n            };\n            img.onerror = () => {\n                //console.log(\"NOT DOWNLOADED \" + this.itemName + \" -> \" + this.resourceName);\n                reject('Could not load image: ' + img.src);\n            };\n        });\n        img.crossOrigin = \"anonymous\";\n        img.src = resourceName;\n        return d;\n    }\n\n    _getStyle(id: number): ChatStyle {\n        const style = this.chatStyles[id];\n        if (style != null) {\n            return style;\n        }\n        return this.chatStyles[0];\n    }\n\n    generateChatBubble(id: number, username: string, message: string, color: number, headImage: HTMLCanvasElement): HTMLCanvasElement {\n        const style = this._getStyle(id);\n        const tempCanvas = document.createElement('canvas');\n        const tempCtx = tempCanvas.getContext('2d');\n        const FONT = \"400 13px Ubuntu\";\n        const FONT_BOLD = \"600 13px Ubuntu\";\n        if (tempCtx != null) {\n            tempCtx.font = FONT_BOLD;\n            tempCtx.textBaseline = \"top\";\n            tempCtx.fillStyle = \"black\";\n\n            const right_width = 5;\n            const textMarginX = 32;\n            const textMarginY = 6;\n            const baseStartX = 24;\n\n            const usernameWidth = Math.round(tempCtx.measureText(username + \": \").width);\n            tempCtx.font = FONT;\n            const messageWidth = Math.round(tempCtx.measureText(message).width + 5);\n            const textWidth = usernameWidth + messageWidth;\n\n            tempCanvas.width = textMarginX + textWidth + right_width;\n            tempCanvas.height = style.base.height;\n\n            for (let i = baseStartX; i < textMarginX + textWidth; i++) {\n                tempCtx.drawImage(style.base, 32, 0, 1, style.base.height, i, 0, 1, style.base.height);\n            }\n\n            //Right side\n            tempCtx.drawImage(style.base, style.base.width - right_width, 0, right_width, style.base.height, textMarginX + textWidth, 0, right_width, style.base.height);\n\n            tempCtx.textBaseline = \"top\";\n            tempCtx.fillStyle = \"black\";\n            tempCtx.font = FONT_BOLD;\n\n            tempCtx.fillText(username + \": \", textMarginX, textMarginY);\n\n            tempCtx.font = FONT;\n            tempCtx.fillText(message, textMarginX + usernameWidth, textMarginY);\n\n            const colored = this._tintSprite(style.color, color);\n            tempCtx.drawImage(colored, 0, 0);\n            tempCtx.drawImage(headImage, -3, -7);\n        }\n\n        return tempCanvas;\n    }\n\n    _int2rgb(color: number): RGB {\n        return {\n            r: ((color >> 16) & 0xff),\n            g: ((color >> 8) & 0xff),\n            b: ((color) & 0xff)\n        }\n    }\n\n    _tintSprite(img: HTMLCanvasElement | HTMLImageElement, color: number): HTMLCanvasElement | HTMLImageElement {\n        let element = document.createElement('canvas');\n        let c = element.getContext(\"2d\");\n        if (c == null) {\n            return img;\n        }\n\n        let rgb = this._int2rgb(color);\n\n        let width = img.width;\n        let height = img.height;\n\n        element.width = width;\n        element.height = height;\n\n        c.drawImage(img, 0, 0);\n        let imageData = c.getImageData(0, 0, width, height);\n        for (let y = 0; y < height; y++) {\n            let inpos = y * width * 4;\n            for (let x = 0; x < width; x++) {\n                inpos++; //r\n                inpos++; //g\n                inpos++; //b\n                let pa = imageData.data[inpos++];\n                if (pa !== 0) {\n                    //imageData.data[inpos - 1] = alpha; //A\n                    imageData.data[inpos - 2] = Math.round(rgb.b * imageData.data[inpos - 2] / 255); //B\n                    imageData.data[inpos - 3] = Math.round(rgb.g * imageData.data[inpos - 3] / 255); //G\n                    imageData.data[inpos - 4] = Math.round(rgb.r * imageData.data[inpos - 4] / 255); //R\n                }\n            }\n        }\n        c.putImageData(imageData, 0, 0);\n        return element;\n    }\n}\ninterface ChatStyleDictionary {\n    [id: number]: ChatStyle\n}\ninterface RGB {\n    r: number, g: number, b: number\n}","const BASE_IMAGE_URL = \"assets/memenu/base.png\";\nconst POINTER_IMAGE_URL = \"assets/memenu/pointer.png\";\n\nexport default class MeMenuImager {\n    baseImage?: HTMLImageElement;\n    pointerImage?: HTMLImageElement;\n\n    initialize(): Promise<void[]> {\n        return Promise.all([\n            this._downloadImageAsync(BASE_IMAGE_URL).then(img => {\n                this.baseImage = img;\n            }),\n            this._downloadImageAsync(POINTER_IMAGE_URL).then(img => {\n                this.pointerImage = img;\n            })\n        ]);\n    }\n\n    _downloadImageAsync(resourceName: string): Promise<HTMLImageElement> {\n        let img = new Image();\n        let d: Promise<HTMLImageElement> = new Promise((resolve, reject) => {\n            img.onload = () => {\n                //console.log(\"downloaded \" + this.itemName + \" -> \" + this.resourceName);\n                resolve(img);\n            };\n            img.onerror = () => {\n                //console.log(\"NOT DOWNLOADED \" + this.itemName + \" -> \" + this.resourceName);\n                reject('Could not load image: ' + img.src);\n            };\n        });\n        img.crossOrigin = \"anonymous\";\n        img.src = resourceName;\n        return d;\n    }\n\n    generateSign(username: string): HTMLCanvasElement {\n        const tempCanvas = document.createElement('canvas');\n        const tempCtx = tempCanvas.getContext('2d');\n        const FONT = \"400 12px Ubuntu\";\n\n        if (tempCtx != null && this.baseImage != null && this.pointerImage != null) {\n            tempCtx.font = FONT;\n            tempCtx.textBaseline = \"top\";\n            tempCtx.fillStyle = \"white\";\n\n            const right_width = 18;\n            const textMarginX = 18;\n            const textMarginY = 7;\n\n            const textWidth = Math.round(tempCtx.measureText(username).width);\n\n            tempCanvas.width = textMarginX + textWidth + right_width;\n            tempCanvas.height = this.baseImage.height + this.pointerImage.height;\n\n            tempCtx.drawImage(this.baseImage, 0, 0, textMarginX, this.baseImage.height, 0, 0, textMarginX, this.baseImage.height);\n\n            for (let i = textMarginX; i < textMarginX + textWidth; i++) {\n                tempCtx.drawImage(this.baseImage, 32, 0, 1, this.baseImage.height, i, 0, 1, this.baseImage.height);\n            }\n\n            //Right side\n            tempCtx.drawImage(this.baseImage, this.baseImage.width - right_width, 0, right_width, this.baseImage.height, textMarginX + textWidth, 0, right_width, this.baseImage.height);\n\n            tempCtx.font = FONT;\n            tempCtx.textBaseline = \"top\";\n            tempCtx.fillStyle = \"white\";\n\n            tempCtx.drawImage(this.pointerImage, Math.floor(textWidth / 2) + textMarginX - 6, 24);\n\n            tempCtx.fillText(username, textMarginX, textMarginY);\n        }\n\n        return tempCanvas;\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { LOGIN } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestLogin extends ClientMessage {\n    constructor(username: string, look: string) {\n        super(LOGIN);\n        this.appendString(username);\n        this.appendString(look);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_CHANGE_LOOKS } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestChangeLooks extends ClientMessage {\n    constructor(look: string, gender: string) {\n        super(REQUEST_CHANGE_LOOKS);\n        this.appendString(look);\n        this.appendString(gender);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_CHANGE_MOTTO } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestChangeMotto extends ClientMessage {\n    constructor(motto: string) {\n        super(REQUEST_CHANGE_MOTTO);\n        this.appendString(motto);\n    }\n}","import Game from \"../Game\";\nimport RequestLogin from \"../communication/outgoing/users/RequestLogin\";\nimport User from \"../users/User\";\nimport RequestChangeLooks from \"../communication/outgoing/rooms/RequestChangeLooks\";\nimport RequestChangeMotto from \"../communication/outgoing/rooms/RequestChangeMotto\";\nimport UserItem from \"../inventory/UserItem\";\nimport CataloguePage from \"../catalogue/CataloguePage\";\nimport { CatalogueIndex } from \"../catalogue/Catalogue\";\nimport RoomData from \"../navigator/RoomData\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport { MessengerChat } from \"../messenger/Messenger\";\n\nexport default class UIManager {\n    game: Game;\n    //Log in    \n    onSetUserData: (user: User) => void;\n    //Room item info\n    onSelectFurni: FurniInfo;\n    onSelectUser: UserInfo;\n    onCloseSelectFurni: (furniId: number) => void;\n    onCloseSelectUser: (userId: number) => void;\n    //Misc\n    onFocusChat: () => void;\n    onLoadPost: (text: string) => void;\n    onGameStop: () => void;\n    onUpdateCreditsBalance: (amount: number) => void;\n    onShowNotification: (text: string) => void;\n    //Change looks\n    onOpenChangeLooks: (figure: string) => void;\n    onCloseChangeLooks: () => void;\n    //Inventory\n    onOpenInventory: () => void;\n    onUpdateInventory: (items: UserItem[]) => void;\n    onCloseInventory: () => void;\n    //Catalogue\n    onOpenCatalogue: () => void;\n    onLoadCataloguePage: (page: CataloguePage) => void;\n    onLoadCatalogueIndex: (index: CatalogueIndex[]) => void;\n    onCloseCatalogue: () => void;\n    //Navigator\n    onOpenNavigator: () => void;\n    onCloseNavigator: () => void;\n    onLoadRoomList: (rooms: RoomData[]) => void;\n    onOpenCreateRoom: () => void;\n    onCloseCreateRoom: () => void;\n    //Room Info\n    onCurrentRoomDataLoad: (data: RoomData) => void;\n    onCloseRoomInfo: () => void;\n    //Messenger\n    onOpenMessenger: () => void;\n    onCloseMessenger: () => void;\n    onCloseChat: () => void;\n    onSetFriends: (online: User[], offline: User[]) => void;\n    onSetFriendsSearch: (users: User[]) => void;\n    onSetFriendRequests: (users: User[]) => void;\n    onReceiveMessengerMessage: (chat: MessengerChat) => boolean;\n    onOpenMessengerChat: (chat: MessengerChat) => void;\n    onOpenChat: () => void;\n    onShowMessengerAlert: () => void;\n\n    constructor(game: Game) {\n        this.game = game;\n        this.onSetUserData = () => { };\n        this.onSelectFurni = () => { };\n        this.onSelectUser = () => { };\n        this.onLoadPost = () => { };\n        this.onFocusChat = () => { };\n        this.onGameStop = () => { };\n        this.onCloseSelectFurni = () => { };\n        this.onCloseSelectUser = () => { };\n        this.onOpenChangeLooks = () => { };\n        this.onCloseChangeLooks = () => { };\n        this.onOpenInventory = () => { };\n        this.onUpdateInventory = () => { };\n        this.onCloseInventory = () => { };\n        this.onOpenCatalogue = () => { };\n        this.onLoadCataloguePage = () => { };\n        this.onCloseCatalogue = () => { };\n        this.onLoadCatalogueIndex = () => { };\n        this.onUpdateCreditsBalance = () => { };\n        this.onShowNotification = () => { };\n        this.onOpenNavigator = () => { };\n        this.onCloseNavigator = () => { };\n        this.onLoadRoomList = () => { };\n        this.onCurrentRoomDataLoad = () => { };\n        this.onOpenCreateRoom = () => { };\n        this.onCloseCreateRoom = () => { };\n        this.onOpenMessenger = () => { };\n        this.onCloseMessenger = () => { };\n        this.onCloseChat = () => { };\n        this.onSetFriends = () => { };\n        this.onSetFriendsSearch = () => { };\n        this.onSetFriendRequests = () => { };\n        this.onReceiveMessengerMessage = () => false;\n        this.onOpenChat = () => { };\n        this.onOpenMessengerChat = () => { };\n        this.onShowMessengerAlert = () => { };\n        this.onCloseRoomInfo = () => { };\n    }\n\n    log(text: string) {\n        console.log(\"Log: \" + text);\n    }\n\n    postLoading(text: string) {\n        console.log(\"Loading: \" + text);\n        this.onLoadPost(text);\n    }\n\n    doChat(chat: string) {\n        const { currentRoom } = this.game;\n        if (currentRoom != null && chat.length > 0) {\n            currentRoom.chat(chat);\n        }\n    }\n\n    doLogin(username: string, look: string) {\n        this.game.communicationManager.sendMessage(new RequestLogin(username, look));\n    }\n\n    doFurniInteract(itemId: number) {\n        const { currentRoom } = this.game;\n        if (currentRoom != null) {\n            const item = currentRoom.roomItemManager.getItem(itemId);\n            if (item != null) {\n                item.handleDoubleClick(0);\n            }\n        }\n    }\n\n    doFurniPickUp(itemId: number) {\n        const { currentRoom } = this.game;\n        if (currentRoom != null) {\n            const item = currentRoom.roomItemManager.getItem(itemId);\n            if (item != null) {\n                item.pickUp();\n            }\n        }\n    }\n    doFurniRotate(itemId: number) {\n        const { currentRoom } = this.game;\n        if (currentRoom != null) {\n            const item = currentRoom.roomItemManager.getItem(itemId);\n            if (item != null) {\n                item.rotate();\n            }\n        }\n    }\n    doFurniMove(itemId: number) {\n        const { currentRoom } = this.game;\n        if (currentRoom != null) {\n            currentRoom.roomItemManager.startRoomItemMovement(itemId);\n        }\n    }\n\n    doFurniPlace(itemId: number) {\n        const { currentRoom, inventory } = this.game;\n        if (currentRoom != null) {\n            inventory.tryPlaceItem(itemId);\n        }\n    }\n\n    doWave() {\n        const { currentRoom } = this.game;\n        if (currentRoom != null) {\n            currentRoom.wave();\n        }\n    }\n\n    doChangeLooks(look: string, gender: string) {\n        const { currentRoom } = this.game;\n        if (currentRoom != null) {\n            this.game.communicationManager.sendMessage(new RequestChangeLooks(look, gender));\n        }\n    }\n\n    doOpenChangeLooks() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.onOpenChangeLooks(currentUser.look);\n        }\n    }\n\n    doOpenInventory() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.onOpenInventory();\n            this.game.inventory.updateInventory();\n        }\n    }\n\n    doOpenCreateRoom() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.onOpenCreateRoom();\n        }\n    }\n\n    doCloseCreateRoom() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.onCloseCreateRoom();\n        }\n    }\n\n    doChangeMotto(motto: string) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.communicationManager.sendMessage(new RequestChangeMotto(motto));\n        }\n    }\n\n    doOpenCatalogue() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.onOpenCatalogue();\n        }\n    }\n\n    doOpenNavigator() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.onOpenNavigator();\n        }\n    }\n\n    doRequestNavigatorSearch(search: string) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.navigator.requestSearchRooms(search);\n        }\n    }\n\n    doRequestNavigatorRooms() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.navigator.requestPopularRooms();\n        }\n    }\n\n    doRequestNavigatorMyRooms() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.navigator.requestOwnRooms();\n        }\n    }\n\n    doRequestGoToRoom(roomId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.navigator.requestGoToRoom(roomId);\n        }\n    }\n\n    doRequestLeaveRoom() {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.navigator.requestLeaveRoom();\n        }\n    }\n\n    doRequestCreateRoom(name: string, selectedModel: string) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.navigator.requestCreateRoom(name, selectedModel);\n        }\n    }\n\n    doRequestCataloguePage(pageId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.catalogue.requestPage(pageId);\n        }\n    }\n\n    doRequestCataloguePurchase(pageId: number, itemId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            this.game.catalogue.requestPurchase(pageId, itemId);\n        }\n    }\n\n    doRequestOpenChat() {\n        this.onOpenChat();\n    }\n\n    doRequestOpenMessenger(user?: User) {\n        this.onOpenMessenger();\n    }\n\n    doRequestAskForFriend(userId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            BobbaEnvironment.getGame().messenger.requestAddFriend(userId);\n        }\n    }\n\n    doRequestDenyFriendRequest(userId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            BobbaEnvironment.getGame().messenger.denyFriendRequest(userId);\n        }\n    }\n    doRequestAcceptFriendRequest(userId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            BobbaEnvironment.getGame().messenger.acceptFriendRequest(userId);\n        }\n    }\n    doRequestFriendSearch(search: string) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            BobbaEnvironment.getGame().messenger.requestFriendSearch(search);\n        }\n    }\n    doRequestRemoveFriend(userId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            BobbaEnvironment.getGame().messenger.requestRemoveFriend(userId);\n        }\n    }\n    doRequestFollowFriend(userId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            BobbaEnvironment.getGame().messenger.requestFollowFriend(userId);\n        }\n    }\n    doRequestStartChat(userId: number) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            BobbaEnvironment.getGame().messenger.requestStartChat(userId);\n        }\n    }\n\n    doRequestSendChatMessage(userId: number, text: string) {\n        const { currentUser } = this.game.userManager;\n        if (currentUser != null) {\n            BobbaEnvironment.getGame().messenger.sendChatMessage(userId, text);\n        }\n    }\n}\n\nexport type FurniInfo = (id: number, baseId: number, name: string, description: string, image: HTMLCanvasElement, isUpdate: boolean, canMove: boolean, canRotate: boolean, canPickUp: boolean, canUse: boolean) => void;\nexport type UserInfo = (id: number, name: string, motto: string, look: string, isMe: boolean, image: HTMLCanvasElement, isUpdate: boolean) => void;\n","export default class User {\n    id: number\n    name: string\n    motto: string\n    look: string;\n    \n    constructor(id: number, name: string, motto: string, look: string) {\n        this.id = id;\n        this.name = name;\n        this.motto = motto;\n        this.look = look;\n    }\n\n}","import User from \"./User\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\n\nexport default class UserManager {\n    users: UserDictionary;\n    currentUser?: User;\n    credits: number;\n    clubDays: number;\n\n    constructor() {\n        this.users = {};\n        this.credits = -1;\n        this.clubDays = 69;\n    }\n\n    setUser(id: number, name: string, motto: string, look: string): User {\n        const user = this.getUser(id);\n        if (user == null) {\n            this.users[id] = new User(id, name, motto, look);\n        } else {\n            user.look = look;\n            user.motto = motto;\n            user.name = name;\n        }\n        return this.users[id];\n    }\n\n    getUser(id: number): User | null {\n        return this.users[id];\n    }\n\n    setCurrentUser(id: number, name: string, motto: string, look: string): User {\n        this.currentUser = this.setUser(id, name, motto, look);\n        return this.currentUser;\n    }\n\n    updateCreditsBalance(balance: number) {\n        if (this.credits !== -1) {\n            BobbaEnvironment.getGame().soundManager.playCreditsSound();\n        }\n        this.credits = balance;\n        BobbaEnvironment.getGame().uiManager.onUpdateCreditsBalance(balance);\n    }\n}\n\ninterface UserDictionary {\n    [id: number]: User;\n}","import BaseItem from \"../items/BaseItem\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport { ItemType } from \"../imagers/furniture/FurniImager\";\n\nexport default class UserItem {\n    id: number;\n    baseItem: BaseItem | null;\n    baseId: number;\n    state: number;\n    stackable: boolean;\n    itemType: ItemType;\n\n    constructor(id: number, baseId: number, state: number, stackable: boolean, itemType: ItemType) {\n        this.id = id;\n        this.baseId = baseId;\n        this.state = state;\n        this.stackable = stackable;\n        this.itemType = itemType;\n        this.baseItem = null;\n    }\n\n    loadBase(): Promise<void> {\n        return BobbaEnvironment.getGame().baseItemManager.getItem(this.itemType, this.baseId).then(baseItem => {\n            this.baseItem = baseItem;\n        });\n    }\n}","import UserItem from \"./UserItem\";\nimport { ItemType } from \"../imagers/furniture/FurniImager\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport BaseItem from \"../items/BaseItem\";\n\nexport default class Inventory {\n    items: UserItemDictionary;\n    lastPlacedBaseItem?: BaseItem;\n    constructor() {\n        this.items = {};\n    }\n\n    getItem(id: number): UserItem | null {\n        return (id in this.items) ? this.items[id] : null;\n    }\n\n    addItem(itemId: number, baseId: number, state: number, stackable: boolean, itemType: ItemType) {\n        if (this.getItem(itemId) == null) {\n            const newItem = new UserItem(itemId, baseId, state, stackable, itemType);\n            this.items[itemId] = newItem;\n            this.updateInventory();\n            newItem.loadBase().then(() => {\n                this.updateInventory();\n            });\n        }\n    }\n\n    removeItem(itemId: number) {\n        const item = this.getItem(itemId);\n        if (item != null) {\n            delete (this.items[itemId]);\n            this.updateInventory();\n        }\n    }\n\n    tryPlaceItem(itemId: number) {\n        const item = this.getItem(itemId);\n        const { currentRoom } = BobbaEnvironment.getGame();\n        if (item != null && currentRoom != null && item.baseItem != null) {\n            BobbaEnvironment.getGame().uiManager.onCloseInventory();\n            currentRoom.roomItemManager.startRoomItemPlacement(item);\n            this.lastPlacedBaseItem = item.baseItem;\n        }\n    }\n\n    findItemByBase(baseId: number): UserItem | null {\n        for (let userItemId in this.items) {\n            const currentItem = this.items[userItemId];\n            if (currentItem.baseId === baseId) {\n                return currentItem;\n            }\n        }\n        return null;\n    }\n\n    tryPlaceBaseItem(baseId: number) {\n        const item = this.findItemByBase(baseId);\n        const { currentRoom } = BobbaEnvironment.getGame();\n        if (item != null && currentRoom != null && item.baseItem != null) {\n            BobbaEnvironment.getGame().uiManager.onCloseInventory();\n            currentRoom.roomItemManager.startRoomItemPlacement(item);\n            this.lastPlacedBaseItem = item.baseItem;\n        }\n    }\n\n    updateInventory() {\n        BobbaEnvironment.getGame().uiManager.onUpdateInventory(Object.values(this.items));\n    }\n}\n\n\n\ntype UserItemDictionary = {\n    [id: number]: UserItem\n};","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_INVENTORY_ITEMS } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestInventoryItems extends ClientMessage {\n    constructor() {\n        super(REQUEST_INVENTORY_ITEMS);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_CATALOGUE_PAGE } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestCataloguePage extends ClientMessage {\n    constructor(pageId: number) {\n        super(REQUEST_CATALOGUE_PAGE);\n        this.appendInt(pageId);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_CATALOGUE_PURCHASE } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestCataloguePurchase extends ClientMessage {\n    constructor(pageId: number, itemId: number) {\n        super(REQUEST_CATALOGUE_PURCHASE);\n        this.appendInt(pageId);\n        this.appendInt(itemId);\n    }\n}","import CataloguePage from \"./CataloguePage\";\nimport BobbaEnvironment from \"../BobbaEnvironment\";\nimport RequestCataloguePage from \"../communication/outgoing/catalogue/RequestCataloguePage\";\nimport RequestCataloguePurchase from \"../communication/outgoing/catalogue/RequestCataloguePurchase\";\n\nexport type CatalogueIndex = {\n    id: number;\n    name: string;\n    iconId: number;\n    color: number;\n    visible: boolean,\n    children: CatalogueIndex[];\n};\n\nexport default class Catalogue {\n    catalogueIndex: CatalogueIndex[];\n    pages: { [id: number]: CataloguePage };\n\n    constructor() {\n        this.catalogueIndex = [];\n        this.pages = {};\n    }\n\n    setIndex(index: CatalogueIndex[]) {\n        this.catalogueIndex = index;\n        BobbaEnvironment.getGame().uiManager.onLoadCatalogueIndex(index);\n        if (index.length > 0) {\n            this.requestPage(index[0].id);\n        }\n    }\n\n    setCataloguePage(page: CataloguePage) {\n        this.pages[page.id] = page;\n        BobbaEnvironment.getGame().uiManager.onLoadCataloguePage(page);\n    }\n\n    getPage(pageId: number) {\n        return this.pages[pageId];\n    }\n\n    requestPage(pageId: number) {\n        const cachedPage = this.getPage(pageId);\n        if (cachedPage == null) {\n            BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestCataloguePage(pageId));\n        } else {\n            BobbaEnvironment.getGame().uiManager.onLoadCataloguePage(cachedPage);\n        }\n    }\n\n    requestPurchase(pageId: number, itemId: number) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestCataloguePurchase(pageId, itemId));\n    }\n}\n","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_CATALOGUE_INDEX } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestCatalogueIndex extends ClientMessage {\n    constructor() {\n        super(REQUEST_CATALOGUE_INDEX);\n    }\n}","export const SOUND_CREDITS = 'audio/cash_register.mp3';\nexport const SOUND_PIXELS = 'audio/pixels.mp3';\nexport const SOUND_CONSOLE_SENT = 'audio/sent_msg.mp3';\nexport const SOUND_CONSOLE_RECEIVE = 'audio/tururu.mp3';","import { SOUND_CREDITS, SOUND_PIXELS, SOUND_CONSOLE_SENT, SOUND_CONSOLE_RECEIVE } from \"./GenericSounds\";\n\nexport default class SoundManager {\n    _credits: HTMLAudioElement;\n    _pixels: HTMLAudioElement;\n    _consoleSent: HTMLAudioElement;\n    _consoleReceive: HTMLAudioElement;\n\n    constructor() {\n        this._credits = new Audio(SOUND_CREDITS);\n        this._pixels = new Audio(SOUND_PIXELS);\n        this._consoleSent = new Audio(SOUND_CONSOLE_SENT);\n        this._consoleReceive = new Audio(SOUND_CONSOLE_RECEIVE);\n    }\n    \n    playCreditsSound() {\n        this._credits.play();\n    }\n\n    playPixelsSound() {\n        this._pixels.play();\n    }\n\n    playConsoleSentSound() {\n        this._consoleSent.play();\n    }\n\n    playConsoleReceiveSound() {\n        this._consoleReceive.play();\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_NAVIGATOR_SEARCH_ROOMS } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestNavigatorSearchRooms extends ClientMessage {\n    constructor(search: string) {\n        super(REQUEST_NAVIGATOR_SEARCH_ROOMS);\n        this.appendString(search);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_NAVIGATOR_POPULAR_ROOMS } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestNavigatorPopularRooms extends ClientMessage {\n    constructor() {\n        super(REQUEST_NAVIGATOR_POPULAR_ROOMS);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_NAVIGATOR_OWN_ROOMS } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestNavigatorOwnRooms extends ClientMessage {\n    constructor() {\n        super(REQUEST_NAVIGATOR_OWN_ROOMS);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_NAVIGATOR_LEAVE_ROOM } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestNavigatorLeaveRoom extends ClientMessage {\n    constructor() {\n        super(REQUEST_NAVIGATOR_LEAVE_ROOM);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_NAVIGATOR_GO_TO_ROOM } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestNavigatorGoToRoom extends ClientMessage {\n    constructor(roomId: number) {\n        super(REQUEST_NAVIGATOR_GO_TO_ROOM);\n        this.appendInt(roomId);\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_NAVIGATOR_CREATE_ROOM } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestNavigatorCreateRoom extends ClientMessage {\n    constructor(roomName: string, modelId: string) {\n        super(REQUEST_NAVIGATOR_CREATE_ROOM);\n        this.appendString(roomName);\n        this.appendString(modelId);\n    }\n}","import BobbaEnvironment from \"../BobbaEnvironment\";\nimport RequestNavigatorSearchRooms from \"../communication/outgoing/navigator/RequestNavigatorSearchRooms\";\nimport RequestNavigatorPopularRooms from \"../communication/outgoing/navigator/RequestNavigatorPopularRooms\";\nimport RequestNavigatorOwnRooms from \"../communication/outgoing/navigator/RequestNavigatorOwnRooms\";\nimport RequestNavigatorLeaveRoom from \"../communication/outgoing/navigator/RequestNavigatorLeaveRoom\";\nimport RequestNavigatorGoToRoom from \"../communication/outgoing/navigator/RequestNavigatorGoToRoom\";\nimport RoomData from \"./RoomData\";\nimport RequestNavigatorCreateRoom from \"../communication/outgoing/navigator/RequestNavigatorCreateRoom\";\n\nexport default class Nav {\n    requestSearchRooms(search: string) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestNavigatorSearchRooms(search));\n    }\n\n    requestPopularRooms() {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestNavigatorPopularRooms());\n    }\n\n    requestOwnRooms() {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestNavigatorOwnRooms());\n    }\n\n    requestGoToRoom(roomId: number) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestNavigatorGoToRoom(roomId));\n    }\n\n    requestLeaveRoom() {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestNavigatorLeaveRoom());\n    }\n\n    handleRoomDataList(data: RoomData[]) {\n        BobbaEnvironment.getGame().uiManager.onLoadRoomList(data);\n    }\n\n    handleCurrentRoomData(data: RoomData) {\n        BobbaEnvironment.getGame().uiManager.onCurrentRoomDataLoad(data);\n    }\n\n    requestCreateRoom(roomName: string, modelId: string) {\n        BobbaEnvironment.getGame().communicationManager.sendMessage(new RequestNavigatorCreateRoom(roomName, modelId));\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_HEIGHT_MAP } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestHeightMap extends ClientMessage {\n    constructor() {\n        super(REQUEST_HEIGHT_MAP);\n    }\n}","import { Texture } from 'pixi.js-legacy';\nimport BobbaEnvironment from \"../../BobbaEnvironment\";\nimport { flipImage } from \"../furniture/FurniBase\";\n\nexport default class RoomImager {\n    roomTileTexture?: Texture;\n    roomStairLTexture?: Texture;\n    roomStairRTexture?: Texture;\n    initialize() {\n        this.roomTileTexture = BobbaEnvironment.getGame().engine.getTextureFromImage(this.generateFloorTile(7));\n        this.roomStairLTexture = BobbaEnvironment.getGame().engine.getTextureFromImage(this.generateStairL());\n        const stairRCanvas = this.generateStairR();\n        if (stairRCanvas != null) {\n            this.roomStairRTexture = BobbaEnvironment.getGame().engine.getTextureFromImage(stairRCanvas);\n        }\n    }\n\n    generateRoomWallL(z: number): Texture {\n        return BobbaEnvironment.getGame().engine.getTextureFromImage(this.generateWallL(122 + (z * 32)));\n    }\n\n    generateRoomWallR(z: number): Texture {\n        return BobbaEnvironment.getGame().engine.getTextureFromImage(this.generateWallR(122 + (z * 32)));\n    }\n\n    generateRoomDoorL(): Texture {\n        return BobbaEnvironment.getGame().engine.getTextureFromImage(this.generateWallL(28));\n    }\n\n    generateRoomDoorBeforeL(z: number): Texture {\n        return BobbaEnvironment.getGame().engine.getTextureFromImage(this.generateWallBeforeDoorL(122 + (z * 32)));\n    }\n\n    generateStairL(): HTMLCanvasElement {\n        return this.generateStair('rgba(142,142,94,127)', '#989865', '#7A7A51', '#838357', '#676744', '#6F6F49', false);\n    }\n\n    generateStairR(): HTMLCanvasElement | null {\n        return flipImage(this.generateStair('rgba(142,142,94,127)', '#989865', '#676744', '#6F6F49', '#7A7A51', '#838357', true));\n    }\n\n    generateStair(strokeColor: string, floorColor: string, leftColorStroke: string, leftColor: string, rightColorStroke: string, rightColor: string, rightSide: boolean): HTMLCanvasElement {\n        const tempCanvas = document.createElement('canvas');\n        const ctx = tempCanvas.getContext(\"2d\");\n\n        tempCanvas.width = 99;\n        tempCanvas.height = 88;\n\n        if (ctx != null) {\n\n            const topFloorPoints = [\n                {\n                    x: 32,\n                    y: 0\n                },\n                {\n                    x: 0,\n                    y: 16\n                },\n                {\n                    x: 24,\n                    y: 28\n                },\n                {\n                    x: 56,\n                    y: 12\n                }\n            ];\n\n            const stairPoints = [\n                {\n                    x: 32,\n                    y: 0\n                },\n                {\n                    x: 0,\n                    y: 16\n                },\n                {\n                    x: 8 + 2,\n                    y: 20 + 1\n                },\n                {\n                    x: 40 + 2,\n                    y: 4 + 1\n                }\n            ];\n\n            ctx.strokeStyle = strokeColor;\n            ctx.fillStyle = floorColor;\n            ctx.beginPath();\n            ctx.moveTo(topFloorPoints[0].x, topFloorPoints[0].y);\n            ctx.lineTo(topFloorPoints[1].x, topFloorPoints[1].y);\n            ctx.lineTo(topFloorPoints[2].x, topFloorPoints[2].y);\n            ctx.lineTo(topFloorPoints[3].x, topFloorPoints[3].y);\n            ctx.lineTo(topFloorPoints[0].x, topFloorPoints[0].y);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n\n            const thickness = 7;\n\n            //thickness l\n            ctx.strokeStyle = leftColorStroke;\n            ctx.fillStyle = leftColor;\n            ctx.beginPath();\n            ctx.moveTo(topFloorPoints[1].x - 0.5, topFloorPoints[1].y);\n            ctx.lineTo(topFloorPoints[1].x - 0.5, topFloorPoints[1].y + thickness);\n            ctx.lineTo(topFloorPoints[2].x - 0.5, topFloorPoints[2].y + thickness);\n            ctx.lineTo(topFloorPoints[2].x - 0.5, topFloorPoints[2].y);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n\n            //thickness r\n            ctx.strokeStyle = rightColorStroke;\n            ctx.fillStyle = rightColor;\n            ctx.beginPath();\n            ctx.moveTo(topFloorPoints[3].x + 0.5, topFloorPoints[3].y);\n            ctx.lineTo(topFloorPoints[3].x + 0.5, topFloorPoints[3].y + thickness);\n            ctx.lineTo(topFloorPoints[2].x + 0.5, topFloorPoints[2].y + thickness);\n            ctx.lineTo(topFloorPoints[2].x + 0.5, topFloorPoints[2].y);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n\n            for (let i = 3; i >= 0; i--) {\n                let offsetX = (10 * i) + 26;\n                let offsetY = (13 * i) + 19;\n                let fixedThickness = thickness;\n                if (rightSide) {\n                    if (i === 1) {\n                        fixedThickness += 2;\n                    }\n                    if (i === 3 || i === 2) {\n                        offsetY += 1;\n                    }\n                }\n                ctx.strokeStyle = strokeColor;\n                ctx.fillStyle = floorColor;\n                ctx.beginPath();\n                ctx.moveTo(stairPoints[0].x + offsetX, stairPoints[0].y + offsetY);\n                ctx.lineTo(stairPoints[1].x + offsetX, stairPoints[1].y + offsetY);\n                ctx.lineTo(stairPoints[2].x + offsetX, stairPoints[2].y + offsetY);\n                ctx.lineTo(stairPoints[3].x + offsetX, stairPoints[3].y + offsetY);\n                ctx.lineTo(stairPoints[0].x + offsetX, stairPoints[0].y + offsetY);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n\n                //thickness l\n                ctx.strokeStyle = leftColorStroke;\n                ctx.fillStyle = leftColor;\n                ctx.beginPath();\n                ctx.moveTo(stairPoints[1].x - 0.5 + offsetX, stairPoints[1].y + offsetY);\n                ctx.lineTo(stairPoints[1].x - 0.5 + offsetX, stairPoints[1].y + fixedThickness + offsetY);\n                ctx.lineTo(stairPoints[2].x - 0.5 + offsetX, stairPoints[2].y + fixedThickness + offsetY);\n                ctx.lineTo(stairPoints[2].x - 0.5 + offsetX, stairPoints[2].y + offsetY);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n\n                //thickness r\n                ctx.strokeStyle = rightColorStroke;\n                ctx.fillStyle = rightColor;\n                ctx.beginPath();\n                ctx.moveTo(stairPoints[3].x + 0.5 + offsetX, stairPoints[3].y + offsetY);\n                ctx.lineTo(stairPoints[3].x + 0.5 + offsetX, stairPoints[3].y + fixedThickness + offsetY);\n                ctx.lineTo(stairPoints[2].x + 0.5 + offsetX, stairPoints[2].y + fixedThickness + offsetY);\n                ctx.lineTo(stairPoints[2].x + 0.5 + offsetX, stairPoints[2].y + offsetY);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n            }\n\n        }\n\n        return tempCanvas;\n    }\n    generateFloorTile(thickness: number): HTMLCanvasElement {\n        const tempCanvas = document.createElement('canvas');\n        const ctx = tempCanvas.getContext(\"2d\");\n\n        const TILE_H = 32;\n        const TILE_W = 64;\n\n        tempCanvas.width = 64;\n        tempCanvas.height = 39;\n\n        if (ctx != null) {\n            const startX = 32;\n            const startY = 0;\n\n            const points = [\n                {\n                    x: startX,\n                    y: startY\n                },\n                {\n                    x: startX - TILE_W / 2,\n                    y: startY + TILE_H / 2\n                },\n                {\n                    x: startX,\n                    y: startY + TILE_H\n                },\n                {\n                    x: startX + TILE_W / 2,\n                    y: startY + TILE_H / 2\n                }\n            ];\n\n            ctx.strokeStyle = 'rgba(142,142,94,127)';\n            ctx.fillStyle = '#989865';\n            ctx.beginPath();\n            ctx.moveTo(points[0].x, points[0].y);\n            ctx.lineTo(points[1].x, points[1].y);\n            ctx.lineTo(points[2].x, points[2].y);\n            ctx.lineTo(points[3].x, points[3].y);\n            ctx.lineTo(points[0].x, points[0].y);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n\n            if (thickness > 0) {\n\n                ctx.strokeStyle = '#7A7A51';\n                ctx.fillStyle = '#838357';\n                ctx.beginPath();\n                ctx.moveTo(points[1].x - 0.5, points[1].y);\n                ctx.lineTo(points[1].x - 0.5, points[1].y + thickness);\n                ctx.lineTo(points[2].x - 0.5, points[2].y + thickness);\n                ctx.lineTo(points[2].x - 0.5, points[2].y);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n\n\n                ctx.strokeStyle = '#676744';\n                ctx.fillStyle = '#6F6F49';\n                ctx.beginPath();\n                ctx.moveTo(points[3].x + 0.5, points[3].y);\n                ctx.lineTo(points[3].x + 0.5, points[3].y + thickness);\n                ctx.lineTo(points[2].x + 0.5, points[2].y + thickness);\n                ctx.lineTo(points[2].x + 0.5, points[2].y);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n            }\n        }\n\n        return tempCanvas;\n    }\n    generateWallBeforeDoorL(height: number) {\n        const tempCanvas = document.createElement('canvas');\n        const ctx = tempCanvas.getContext(\"2d\");\n\n        tempCanvas.width = 40;\n        tempCanvas.height = 24 + height;\n\n        if (ctx != null) {\n\n            const points = [\n                {\n                    x: 32,\n                    y: 0\n                },\n                {\n                    x: 0,\n                    y: 16\n                },\n                {\n                    x: 8,\n                    y: 20\n                },\n                {\n                    x: 40,\n                    y: 4\n                }\n            ];\n\n            ctx.strokeStyle = '#6f717a';\n            ctx.fillStyle = '#70727a';\n            ctx.beginPath();\n            ctx.moveTo(points[0].x, points[0].y);\n            ctx.lineTo(points[1].x, points[1].y);\n            ctx.lineTo(points[2].x, points[2].y);\n            ctx.lineTo(points[3].x, points[3].y);\n            ctx.lineTo(points[0].x, points[0].y);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n\n\n            if (height > 0) {\n\n                ctx.strokeStyle = '#90929e';\n                ctx.fillStyle = '#90929e';\n                ctx.beginPath();\n                ctx.moveTo(points[3].x, points[3].y);\n                ctx.lineTo(points[3].x, points[3].y + height);\n                ctx.lineTo(points[2].x, points[2].y + height);\n                ctx.lineTo(points[2].x, points[2].y);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n            }\n        }\n\n        return tempCanvas;\n    }\n\n    generateWallR(height: number) {\n        const tempCanvas = document.createElement('canvas');\n        const ctx = tempCanvas.getContext(\"2d\");\n\n        tempCanvas.width = 40;\n        tempCanvas.height = 24 + height;\n\n        if (ctx != null) {\n\n            const points = [\n                {\n                    x: 8,\n                    y: 0\n                },\n                {\n                    x: 40,\n                    y: 16\n                },\n                {\n                    x: 32,\n                    y: 20\n                },\n                {\n                    x: 0,\n                    y: 4\n                }\n            ];\n\n            ctx.strokeStyle = '#70727a';\n            ctx.fillStyle = '#70727a';\n            ctx.beginPath();\n            ctx.moveTo(points[0].x - 0.5, points[0].y);\n            ctx.lineTo(points[1].x - 0.5, points[1].y);\n            ctx.lineTo(points[2].x - 0.5, points[2].y);\n            ctx.lineTo(points[3].x - 0.5, points[3].y);\n            ctx.lineTo(points[0].x - 0.5, points[0].y);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n\n\n            if (height > 0) {\n                ctx.strokeStyle = '#90929e';\n                ctx.fillStyle = '#90929e';\n                ctx.beginPath();\n                ctx.moveTo(points[1].x - 0.5, points[1].y);\n                ctx.lineTo(points[1].x - 0.5, points[1].y + height);\n                ctx.lineTo(points[2].x - 0.5, points[2].y + height);\n                ctx.lineTo(points[2].x - 0.5, points[2].y);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n\n                ctx.strokeStyle = '#b6b9c8';\n                ctx.fillStyle = '#b6b9c8';\n                ctx.beginPath();\n                ctx.moveTo(points[3].x, points[3].y);\n                ctx.lineTo(points[3].x, points[3].y + height);\n                ctx.lineTo(points[2].x, points[2].y + height);\n                ctx.lineTo(points[2].x, points[2].y);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n            }\n\n        }\n\n        return tempCanvas;\n    }\n\n    generateWallL(height: number) {\n        const tempCanvas = document.createElement('canvas');\n        const ctx = tempCanvas.getContext(\"2d\");\n\n        tempCanvas.width = 40;\n        tempCanvas.height = 24 + height;\n\n        if (ctx != null) {\n\n            const points = [\n                {\n                    x: 32,\n                    y: 0\n                },\n                {\n                    x: 0,\n                    y: 16\n                },\n                {\n                    x: 8,\n                    y: 20\n                },\n                {\n                    x: 40,\n                    y: 4\n                }\n            ];\n\n            ctx.strokeStyle = '#70727a';\n            ctx.fillStyle = '#70727a';\n            ctx.beginPath();\n            ctx.moveTo(points[0].x, points[0].y);\n            ctx.lineTo(points[1].x, points[1].y);\n            ctx.lineTo(points[2].x, points[2].y);\n            ctx.lineTo(points[3].x, points[3].y);\n            ctx.lineTo(points[0].x, points[0].y);\n            ctx.closePath();\n            ctx.stroke();\n            ctx.fill();\n\n\n            if (height > 0) {\n                ctx.strokeStyle = '#bbbecd';\n                ctx.fillStyle = '#bbbecd';\n                ctx.beginPath();\n                ctx.moveTo(points[1].x - 0.5, points[1].y);\n                ctx.lineTo(points[1].x - 0.5, points[1].y + height);\n                ctx.lineTo(points[2].x - 0.5, points[2].y + height);\n                ctx.lineTo(points[2].x - 0.5, points[2].y);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n\n\n                ctx.strokeStyle = '#90929e';\n                ctx.fillStyle = '#90929e';\n                ctx.beginPath();\n                ctx.moveTo(points[3].x, points[3].y);\n                ctx.lineTo(points[3].x, points[3].y + height);\n                ctx.lineTo(points[2].x, points[2].y + height);\n                ctx.lineTo(points[2].x, points[2].y);\n                ctx.closePath();\n                ctx.stroke();\n                ctx.fill();\n            }\n        }\n\n        return tempCanvas;\n    }\n}","import ClientMessage from \"../../protocol/ClientMessage\";\nimport { REQUEST_MESSENGER_LOAD_FRIENDS } from \"../../protocol/OpCodes/ClientOpCodes\";\n\nexport default class RequestMessengerLoadFriends extends ClientMessage {\n    constructor() {\n        super(REQUEST_MESSENGER_LOAD_FRIENDS);\n    }\n}","export default class Constants {\n    public static readonly WS_URL = \"wss://game.bobba.io/\"\n\n    public static readonly AVATAR_RESOURCES_URL = \"https://images.bobba.io/gordon/PRODUCTION-202006192205-424220153/\";\n    public static readonly FURNI_RESOURCES_URL = \"https://images.bobba.io/dcr/hof_furni/\";\n    public static readonly CATALOGUE_RESOURCES_URL = \"https://images.bobba.io/c_images/catalogue/\";\n    public static readonly TOP_STORY_RESOURCES_URL = \"https://images.bobba.io/c_images/Top_Story_Images/\";\n    public static readonly BADGE_RESOURCES_URL = \"https://images.bobba.io/c_images/album1584/\";\n}\n","import Room from \"./rooms/Room\";\nimport MainEngine from './graphics/MainEngine';\nimport AvatarImager from \"./imagers/avatars/AvatarImager\";\nimport FurniImager from \"./imagers/furniture/FurniImager\";\nimport BaseItemManager from \"./items/BaseItemManager\";\nimport { ROOM_SELECTED_TILE, ROOM_TILE_SHADOW, FLOOR_ITEM_PLACEHOLDER, WALL_ITEM_PLACEHOLDER } from \"./graphics/GenericSprites\";\nimport AvatarContainer, { GHOST_LOOK } from \"./rooms/users/AvatarContainer\";\nimport CommunicationManager from \"./communication/CommunicationManager\";\nimport RoomModel from \"./rooms/RoomModel\";\nimport RequestRoomData from \"./communication/outgoing/roomdata/RequestRoomData\";\nimport ChatImager from \"./imagers/bubbles/ChatImager\";\nimport MeMenuImager from \"./imagers/bubbles/MeMenuImager\";\nimport UIManager from \"./ui/UIManager\";\nimport UserManager from \"./users/UserManager\";\nimport Inventory from \"./inventory/Inventory\";\nimport RequestInventoryItems from \"./communication/outgoing/users/RequestInventoryItems\";\nimport Catalogue from \"./catalogue/Catalogue\";\nimport RequestCatalogueIndex from \"./communication/outgoing/catalogue/RequestCatalogueIndex\";\nimport SoundManager from \"./sound/SoundManager\";\nimport Nav from \"./navigator/Nav\";\nimport RequestHeightMap from \"./communication/outgoing/roomdata/RequestHeightMap\";\nimport RequestNavigatorGoToRoom from \"./communication/outgoing/navigator/RequestNavigatorGoToRoom\";\nimport RoomImager from \"./imagers/rooms/RoomImager\";\nimport Messenger from \"./messenger/Messenger\";\nimport RequestMessengerLoadFriends from \"./communication/outgoing/messenger/RequestMessengerLoadFriends\";\nimport Constants from \"../Constants\";\n\nexport default class Game {\n    currentRoom?: Room;\n    engine: MainEngine;\n    avatarImager: AvatarImager;\n    furniImager: FurniImager;\n    chatImager: ChatImager;\n    meMenuImager: MeMenuImager;\n    roomImager: RoomImager;\n    baseItemManager: BaseItemManager;\n    userManager: UserManager;\n    ghostTextures: AvatarContainer;\n    communicationManager: CommunicationManager;\n    inventory: Inventory;\n    catalogue: Catalogue;\n    navigator: Nav;\n    messenger: Messenger;\n    uiManager: UIManager;\n    soundManager: SoundManager;\n    isStarting: boolean;\n\n    constructor() {\n        this.engine = new MainEngine(this.gameLoop, this.onResize, this.onMouseMove, this.onTouchStart, this.onTouchMove, this.onMouseClick, this.onMouseDoubleClick);\n        this.soundManager = new SoundManager();\n        this.ghostTextures = new AvatarContainer(GHOST_LOOK, true);\n        this.avatarImager = new AvatarImager(Constants.AVATAR_RESOURCES_URL);\n        this.furniImager = new FurniImager(Constants.FURNI_RESOURCES_URL);\n        this.chatImager = new ChatImager();\n        this.roomImager = new RoomImager();\n        this.meMenuImager = new MeMenuImager();\n        this.userManager = new UserManager();\n        this.baseItemManager = new BaseItemManager(this.furniImager);\n        this.communicationManager = new CommunicationManager();\n        this.inventory = new Inventory();\n        this.catalogue = new Catalogue();\n        this.navigator = new Nav();\n        this.messenger = new Messenger();\n        this.uiManager = new UIManager(this);\n        this.isStarting = false;\n    }\n\n    loadGame(): Promise<void> {\n        this.isStarting = true;\n        const sprites: string[] = [\n            ROOM_SELECTED_TILE,\n            FLOOR_ITEM_PLACEHOLDER,\n            WALL_ITEM_PLACEHOLDER,\n            ROOM_TILE_SHADOW\n        ];\n        this.uiManager.postLoading(\"Initializing game engine\");\n        return Promise.all([\n            this.avatarImager.initialize().then(() => this.ghostTextures.initialize()),\n            this.furniImager.initialize(),\n            this.chatImager.initialize(),\n            this.meMenuImager.initialize(),\n            this.roomImager.initialize(),\n            this.engine.loadGlobalTextures(sprites),\n        ]).then(() => {\n            this.uiManager.postLoading(\"Connecting to server\");\n            return this.communicationManager.connect(Constants.WS_URL);\n        });\n    }\n\n    handleUserData(id: number, name: string, look: string, motto: string) {\n        this.uiManager.onSetUserData(this.userManager.setCurrentUser(id, name, motto, look));\n        if (this.currentRoom == null) {\n            this.uiManager.log(\"Logged in!\");\n            this.communicationManager.sendMessage(new RequestInventoryItems());\n            this.communicationManager.sendMessage(new RequestCatalogueIndex());\n            this.communicationManager.sendMessage(new RequestMessengerLoadFriends());\n            this.soundManager.playPixelsSound();\n\n            this.uiManager.doOpenNavigator();\n            this.uiManager.doRequestOpenMessenger();\n            this.uiManager.onCloseRoomInfo();\n\n            this.communicationManager.sendMessage(new RequestNavigatorGoToRoom(-1));\n        }\n    }\n\n    handleRoomModelInfo(modelId: string, roomId: number) {\n        this.communicationManager.sendMessage(new RequestHeightMap());\n    }\n\n    handleHeightMap(model: RoomModel) {\n        this.unloadRoom();\n        this.engine.onEnterRoom();\n\n        this.currentRoom = new Room(model);\n        this.engine.getLogicStage().addChild(this.currentRoom.engine.getLogicStage());\n        this.engine.getMainStage().addChild(this.currentRoom.engine.getStage());\n        this.uiManager.log(\"Loaded heightmap\");\n        this.uiManager.onCloseNavigator();\n        this.uiManager.onCloseCreateRoom();\n        this.uiManager.onCloseCatalogue();\n        this.uiManager.onCloseInventory();\n        this.uiManager.onCloseChangeLooks();\n        this.communicationManager.sendMessage(new RequestRoomData());\n    }\n\n    unloadRoom() {\n        if (this.currentRoom != null) {\n            this.currentRoom.dispose();\n            this.engine.onLeaveRoom();\n            this.uiManager.onCloseSelectFurni(-1);\n            this.uiManager.onCloseSelectUser(-1);\n            this.uiManager.onCloseRoomInfo();\n            this.uiManager.doOpenNavigator();\n        }\n        this.currentRoom = undefined;\n    }\n\n    onMouseMove = (x: number, y: number, isMouseDragging: boolean) => {\n        if (this.currentRoom != null) {\n            this.currentRoom.engine.handleMouseMovement(x, y, isMouseDragging);\n        }\n    }\n\n    onTouchStart = (x: number, y: number) => {\n        if (this.currentRoom != null) {\n            this.currentRoom.engine.handleTouchStart(x, y);\n        }\n    }\n\n    onTouchMove = (x: number, y: number) => {\n        if (this.currentRoom != null) {\n            this.currentRoom.engine.handleTouchMove(x, y);\n        }\n    }\n\n    onMouseClick = (x: number, y: number, shiftKey: boolean, ctrlKey: boolean, altKey: boolean) => {\n        if (this.currentRoom != null) {\n            this.currentRoom.engine.handleMouseClick(x, y, shiftKey, ctrlKey, altKey, true);\n        }\n    }\n\n    onMouseDoubleClick = (x: number, y: number) => {\n        if (this.currentRoom != null) {\n            this.currentRoom.engine.handleMouseDoubleClick(x, y);\n        }\n    }\n\n    onResize = () => {\n        if (this.currentRoom != null) {\n            this.currentRoom.engine.onResize();\n        }\n    }\n\n    gameLoop = (delta: number) => {\n        if (this.currentRoom != null) {\n            this.currentRoom.tick(delta * (1 / 60) * 1000);\n        }\n    }\n\n    stop() {\n        this.unloadRoom();\n        this.uiManager.onGameStop();\n        console.log(\"Stopping game...\");\n    }\n}","import Game from \"./Game\";\n\nexport default class BobbaEnvironment {\n    static _gameInstance: Game;\n    static getGame(): Game {\n        if (this._gameInstance == null) {\n            this._gameInstance = new Game();\n        }\n        return this._gameInstance;\n    }\n}","import React, { Component } from 'react';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\nimport FurniInfo, { FurniInfoProps } from './FurniInfo';\nimport UserInfo, { UserInfoProps } from './UserInfo';\nimport { canvas2Image } from '../misc/GraphicsUtilities';\nimport './iteminfo.css';\nenum Showing {\n    USER, FURNI, NONE\n}\ntype ItemInfoContainerProps = {};\ntype ItemInfoContainerState = {\n    showing: Showing,\n    furniProps: FurniInfoProps,\n    userProps: UserInfoProps,\n};\nconst initialFurniProps = {\n    showing: true,\n    name: '',\n    description: '',\n    itemId: -1,\n    canRotate: false,\n    canMove: false,\n    canPickUp: false,\n    canUse: false,\n};\nconst initialUserProps = {\n    showing: true,\n    name: '',\n    motto: '',\n    userId: -1,\n    isMe: false,\n};\nconst initialState: ItemInfoContainerState = {\n    showing: Showing.NONE,\n    furniProps: initialFurniProps,\n    userProps: initialUserProps,\n};\nclass ItemInfoContainer extends Component<ItemInfoContainerProps, ItemInfoContainerState> {\n    constructor(props: ItemInfoContainerProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    close = () => {\n        this.setState({\n            showing: Showing.NONE,\n        });\n    }\n\n    showFurniView = (id: number, baseId: number, name: string, description: string, image: HTMLCanvasElement, isUpdate: boolean, canMove: boolean, canRotate: boolean, canPickUp: boolean, canUse: boolean) => {\n        const currentId = this.state.furniProps.itemId;\n        if ((isUpdate && this.state.showing === Showing.FURNI && currentId === id) || !isUpdate) {\n            this.setState({\n                furniProps: {\n                    itemId: id,\n                    name,\n                    description,\n                    image: canvas2Image(image),\n                    canRotate,\n                    canMove,\n                    canPickUp,\n                    canUse,\n                },\n                showing: Showing.FURNI\n            });\n        }\n    }\n\n    showUserView = (id: number, name: string, motto: string, look: string, isMe: boolean, image: HTMLCanvasElement, isUpdate: boolean) => {\n        const currentId = this.state.userProps.userId;\n        if ((isUpdate && this.state.showing === Showing.USER && currentId === id) || !isUpdate) {\n            this.setState({\n                userProps: {\n                    userId: id,\n                    name,\n                    motto,\n                    image: canvas2Image(image),\n                    isMe,\n                },\n                showing: Showing.USER\n            });\n        }\n    }\n\n    tryCloseFurniView = (itemId: number) => {\n        const id = this.state.furniProps.itemId;\n        if (itemId === id || itemId === -1) {\n            this.close();\n        }\n    }\n\n    tryCloseUserView = (userId: number) => {\n        const id = this.state.userProps.userId;\n        if (userId === id || userId === -1) {\n            this.close();\n        }\n    }\n\n    componentDidMount() {\n        BobbaEnvironment.getGame().uiManager.onSelectFurni = this.showFurniView;\n        BobbaEnvironment.getGame().uiManager.onSelectUser = this.showUserView;\n        BobbaEnvironment.getGame().uiManager.onCloseSelectFurni = this.tryCloseFurniView;\n        BobbaEnvironment.getGame().uiManager.onCloseSelectUser = this.tryCloseUserView;\n    }\n\n    render() {\n        const { showing, furniProps, userProps } = this.state;\n\n        if (showing === Showing.FURNI) {\n            return (\n                <FurniInfo {...furniProps} onClose={this.close} />\n            );\n        } else if (showing === Showing.USER) {\n            return (\n                <UserInfo {...userProps} onClose={this.close} />\n            )\n        }\n        return (\n            <></>\n        );\n    }\n}\n\nexport default ItemInfoContainer;","import React, { Component, SyntheticEvent, RefObject } from 'react';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\nimport './footer.css';\n\nconst MAX_CHAT_LENGTH = 95;\nconst initialState = {\n    chat: '',\n    messengerAlert: false,\n};\ntype FooterProps = {\n    headImage?: HTMLImageElement,\n    focuser: (handler: () => void) => void;\n};\ntype FooterState = {\n    chat: string,\n    messengerAlert: boolean,\n};\nclass Footer extends Component<FooterProps, FooterState> {\n\n    chatInput: RefObject<HTMLInputElement>;\n    constructor(props: FooterProps) {\n        super(props);\n        this.state = initialState;\n        this.chatInput = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.focuser(this.focusChatInput);\n\n        BobbaEnvironment.getGame().uiManager.onShowMessengerAlert = (()=> {\n            this.setState({\n                messengerAlert: true,\n            });\n        });\n    }\n\n    focusChatInput = () => {\n        if (this.chatInput.current != null) {\n            this.chatInput.current.focus();\n        }\n    }\n\n    handleSubmit = (event: SyntheticEvent) => {\n        const { chat } = this.state;\n        event.preventDefault();\n\n        if (chat.length > 0 && chat.length <= MAX_CHAT_LENGTH) {\n            BobbaEnvironment.getGame().uiManager.doChat(chat);\n        }\n\n        this.setState(initialState);\n    }\n\n    handleInputChange = (event: SyntheticEvent) => {\n        const target = event.target as HTMLInputElement;\n        const value = target.value;\n        this.setState({\n            chat: value,\n        });\n    }\n\n    changeLooks = () => {\n        BobbaEnvironment.getGame().uiManager.doOpenChangeLooks();\n    }\n\n    openInventory = () => {\n        BobbaEnvironment.getGame().uiManager.doOpenInventory();\n    }\n\n    openCatalogue = () => {\n        BobbaEnvironment.getGame().uiManager.doOpenCatalogue();\n    }\n\n    openNavigator = () => {\n        BobbaEnvironment.getGame().uiManager.doOpenNavigator();\n    }\n\n    leaveRoom = () => {\n        BobbaEnvironment.getGame().uiManager.doRequestLeaveRoom();\n    }\n\n    openMessenger = () => {\n        BobbaEnvironment.getGame().uiManager.doRequestOpenMessenger();\n    }\n\n    openChat = () => {\n        this.setState({\n            messengerAlert: false,\n        });\n        BobbaEnvironment.getGame().uiManager.doRequestOpenChat();\n    }\n\n    render() {\n        const { chat, messengerAlert } = this.state;\n        const { headImage } = this.props;\n\n        let userface = (\n            <button>\n                <img src=\"images/bottom_bar/ghosthead.png\" alt=\"Me\" />\n            </button>\n        );\n        if (headImage !== undefined) {\n            userface = (\n                <button className=\"user_face\" onClick={this.changeLooks}>\n                    <img src={headImage.src} alt=\"Me\" />\n                </button>\n            );\n        }\n        return (\n            <footer>\n                <div className=\"footer_container\">\n                    <div className=\"left_section\">\n                        <button onClick={this.leaveRoom}>\n                            <img src=\"images/bottom_bar/logo.png\" alt=\"Return\" />\n                        </button>\n                        <button onClick={this.openNavigator}>\n                            <img src=\"images/bottom_bar/rooms.png\" alt=\"Rooms\" />\n                        </button>\n                        <button onClick={this.openCatalogue}>\n                            <img src=\"images/bottom_bar/shop.png\" alt=\"Shop\" />\n                        </button>\n                        <button onClick={this.openInventory}>\n                            <img src=\"images/bottom_bar/inventory.png\" alt=\"Me\" />\n                        </button>\n                    </div>\n                    <div className=\"middle_section\">\n                        {userface}\n                        <form onSubmit={this.handleSubmit}>\n                            <input type=\"text\" ref={this.chatInput} maxLength={MAX_CHAT_LENGTH} name=\"chat\" value={chat} autoComplete=\"off\" placeholder=\"Click here to chat\" onChange={this.handleInputChange} />\n                            <button>\n                                <img src=\"images/bottom_bar/chat_styles.png\" alt=\"Chat styles\" />\n                            </button>\n                        </form>\n                    </div>\n                    <div className=\"right_section\">\n                        <button onClick={this.openMessenger}>\n                            <img src=\"images/bottom_bar/all_friends.png\" alt=\"Friends\" />\n                        </button>\n                        <button onClick={this.openChat}>\n                            <img src={\"images/bottom_bar/\" + (messengerAlert ? 'messenger_notify0': 'messenger') + \".png\"} alt=\"Messenger\" />\n                        </button>\n                    </div>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Draggable from 'react-draggable';\nimport './roominfo.css';\nimport RoomData, { LockType } from '../../bobba/navigator/RoomData';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\n\ntype RoomInfoProps = {};\ntype RoomInfoState = {\n    visible: boolean,\n    roomData: RoomData,\n};\nconst initialState = {\n    visible: true,\n    roomData: new RoomData(1, \"The deep forest\", \"Relevance\", \"Cool room\", 0, 0, false, LockType.Open),\n};\n\nclass RoomInfo extends Component<RoomInfoProps, RoomInfoState> {\n\n    constructor(props: RoomInfoProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        BobbaEnvironment.getGame().uiManager.onCurrentRoomDataLoad = (roomData => {\n            this.setState({\n                roomData,\n                visible: true,\n            })\n        });\n\n        BobbaEnvironment.getGame().uiManager.onCloseRoomInfo = () => {\n            this.setState({\n                visible: false,\n            })\n        };\n    }\n\n    render() {\n        const { visible, roomData } = this.state;\n        if (!visible) {\n            return <></>;\n        }\n        return (\n            <Draggable>\n                <div className=\"room_info\">\n                    <h2 className=\"title\">{roomData.name}</h2>\n                    <p className=\"owner_info\">Owner: <span className=\"owner_name\">{roomData.owner}</span></p>\n                    <div className=\"buttons_container\">\n                        <button>\n                            <img src=\"images/room_info/clear_favourite.png\" alt=\"Favorite\" />\n                        </button>\n                        <button>\n                            <img src=\"images/room_info/settings_icon.png\" alt=\"Settings\" />\n                        </button>\n                        <button>\n                            <img src=\"images/room_info/chat_history.png\" alt=\"Chat history\" />\n                        </button>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nexport default RoomInfo;","import React, { Component } from 'react';\n\nclass TopBar extends Component {\n\n    render() {\n        return (\n            <div className=\"top_bar\">\n                <button className=\"bar_content\">\n                    <img src=\"images/top_bar/settings.png\" alt=\"Settings\" />\n                </button>\n                <button className=\"bar_content\">\n                    <img src=\"images/top_bar/logout.png\" alt=\"Logout\" />\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default TopBar;\n","import React, { Component } from 'react';\nimport './header.css';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\ntype HeaderProps = {};\ntype HeaderState = {\n    credits: number,\n};\n\nconst initialState = {\n    credits: 420,\n};\nclass Header extends Component<HeaderProps, HeaderState> {\n    constructor(props: HeaderProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        BobbaEnvironment.getGame().uiManager.onUpdateCreditsBalance = ((amount: number) => {\n            this.setState({\n              credits: amount,  \n            })\n        });\n    }\n\n    getMoneyNumber(value: number): string {\n        return value.toLocaleString(navigator.language, {minimumFractionDigits: 0});\n    }\n\n    render() {\n        const { credits } = this.state;\n        return (\n            <header>\n                <div className=\"bar_content\">\n                    <span>{this.getMoneyNumber(credits)}</span>\n                    <img src=\"images/top_bar/credits.png\" alt=\"Credits\" />\n                </div>\n                <div className=\"bar_content\">\n                    <span className=\"logo\">bobba.io</span>\n                </div>\n                <div className=\"bar_content\">\n                    <span>69</span>\n                    <img src=\"images/top_bar/hc.png\" alt=\"Habbo club\" />\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { SyntheticEvent } from 'react';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\n\nconst MAX_NAME_LENGTH = 20;\nexport interface LookGroup {\n    figure: string,\n    image: HTMLImageElement,\n};\n\ntype JoinFormProps = {\n    looks: LookGroup[],\n};\n\nconst initialState = {\n    username: '',\n    look: '',\n    wrongUsername: false,\n    queuedLogin: false,\n};\n\ntype JoinFormState = {\n    username: string,\n    look: string,\n    wrongUsername: boolean,\n    queuedLogin: boolean,\n};\nclass JoinForm extends React.Component<JoinFormProps, JoinFormState> {\n\n    constructor(props: JoinFormProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    handleInputChange = (event: SyntheticEvent) => {\n        const target = event.target as HTMLInputElement;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value\n        } as JoinFormState);\n    }\n\n    handleSubmit = (event: SyntheticEvent) => {\n        const { username, look } = this.state;\n        event.preventDefault();\n\n        if (username.length > 0 || username.length > MAX_NAME_LENGTH) {\n            BobbaEnvironment.getGame().uiManager.doLogin(username, look);\n            this.setState({\n                queuedLogin: true,\n            });\n        }\n        else {\n            this.setState({\n                wrongUsername: true,\n            });\n        }\n    }\n\n    componentDidMount() {\n        const { look } = this.state;\n        const { looks } = this.props;\n\n        if (look === '') {\n            const randomElement = looks[Math.floor(Math.random() * looks.length)];\n            if (randomElement != null) {\n                this.setState({\n                    look: randomElement.figure,\n                });\n            }\n        }\n    }\n\n    getLooks() {\n        let i = 0;\n        const { look } = this.state;\n        const { looks } = this.props;\n\n        return looks.map(value => {\n            const checked = value.figure === look;\n            return (\n                <div key={i++} className=\"look_item\">\n                    <img src={value.image.src} alt=\"look\" />\n                    <br />\n                    <input checked={checked} type=\"radio\" onChange={this.handleInputChange} name=\"look\" value={value.figure} />\n                </div>\n            );\n        });\n    }\n\n    render() {\n        const { username, wrongUsername, queuedLogin } = this.state;\n        const classname = wrongUsername ? \"wrong\" : \"\";\n\n        const button = queuedLogin ? <button disabled>Loading...</button> : <button>Join</button>\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\" autoComplete=\"off\" maxLength={MAX_NAME_LENGTH} className={classname} placeholder=\"Username\" name=\"username\" onChange={this.handleInputChange} value={username} />\n                <br /><br />\n                <div className=\"looks\">\n                    {this.getLooks()}\n                </div>\n                <br />\n                <br />\n                {button}\n            </form>\n        );\n    }\n}\n\nexport default JoinForm;","import React from 'react';\nimport './logo.css';\n\nclass Logo extends React.Component {\n    render() {\n        return (\n            <div className=\"logo\">\n                <div>\n                    <img src=\"images/bottom_bar/ghosthead.png\" alt=\"Bobba\" />\n                    <h1>bobba</h1>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Logo;","import React from 'react';\n\nconst Credits = () => {\n    return (\n        <p className=\"main_content_footer\">\n            Habbo is a registered trademark of Sulake Oy. All rights reserved to their respective owners.\n            <br />\n            <span style={{fontFamily: \"'Volter'\", fontSize: '9px'}}>Made with | by Relevance. Follow me on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.instagram.com/josednn/\">instagram</a>.</span>\n        </p>\n    );\n};\n\nexport default Credits;","import React, { Component } from 'react';\nimport Logo from './Logo';\nimport Credits from './Credits';\nimport './splash.css';\nimport Draggable from 'react-draggable';\n\nclass GenericSplash extends Component {\n\n    render() {\n        return (\n            <div className=\"main_wrapper\">\n                <Draggable handle=\".logo\">\n                    <div className=\"main_container\">\n                        <div className=\"main_content\">\n                            <button className=\"close\">\n                                X\n                            </button>\n                            <Logo />\n                            <hr />\n                            {this.props.children}\n                        </div>\n                        <Credits />\n                    </div>\n\n                </Draggable>\n            </div>\n        );\n    }\n}\n\nexport default GenericSplash;\n","import React, { Component } from 'react';\nimport GenericSplash from './GenericSplash';\n\ntype LoadingProps = {\n    loadingText: string,\n};\nclass Loading extends Component<LoadingProps> {\n\n    render() {\n        const { loadingText } = this.props;\n        return (\n            <GenericSplash>\n                <div className=\"loading\">\n                    <img src=\"images/loading.gif\" alt=\"Loading\" />\n                    <p>Loading...</p>\n                    <p className=\"loading_info\">\n                        {loadingText}\n                    </p>\n                </div>\n            </GenericSplash>\n        );\n    }\n}\n\nexport default Loading;\n","export const canvas2Image = (canvas: HTMLCanvasElement): HTMLImageElement => {\n    const imgFoo = document.createElement('img');\n    imgFoo.src = canvas.toDataURL();\n    return imgFoo;\n};","import React, { Component } from 'react';\nimport JoinForm, { LookGroup } from './JoinForm';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\nimport AvatarInfo from '../../bobba/imagers/avatars/AvatarInfo';\nimport GenericSplash from './GenericSplash';\nimport Loading from './Loading';\nimport { canvas2Image } from '../misc/GraphicsUtilities';\n\nconst skins = [\n    \"hd-190-10.lg-3023-1408.ch-215-91.hr-893-45\",\n    \"hr-828-1407.sh-3089-110.ha-1013-110.ch-3323-110-92.lg-3058-82.hd-180-10\",\n    \"ch-3050-104-62.ea-987462904-62.sh-305-1185.lg-275-1193.hd-185-1.hr-828-1034\",\n    \"sh-725-68.he-3258-1410-92.hr-3012-45.ch-665-110.lg-3006-110-110.hd-600-28\",\n    \"ha-1003-85.ch-665-92.lg-3328-1338-1338.hd-3105-10.sh-3035-64.hr-3012-1394.ea-3169-110.cc-3008-110-110\",\n    \"ca-1811-62.lg-3018-81.hr-836-45.ch-669-1193.hd-627-10\",\n];\n\nconst initialState = {\n    looks: [],\n    looksLoaded: 0,\n};\ntype SplashScreenState = {\n    looks: LookGroup[],\n    looksLoaded: number,\n};\ntype SplashScreenProps = {};\n\nconst getPercent = (current: number, max: number) => {\n    return Math.trunc((current / max) * 100);\n};\n\nclass SplashScreen extends Component<SplashScreenProps, SplashScreenState> {\n    constructor(props: SplashScreenProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        const avatarImager = BobbaEnvironment.getGame().avatarImager;\n\n        skins.forEach(skin => {\n            avatarImager.generateGeneric(new AvatarInfo(skin, 4, 4, [\"wlk\"], \"std\", 2, false, false, \"n\"), false).then(canvas => {\n                const looks = this.state.looks.concat({ figure: skin, image: canvas2Image(canvas) });\n                this.setState({\n                    looks,\n                });\n            });\n        });\n\n    }\n\n    render() {\n        const { looks } = this.state;\n\n        if (looks.length !== skins.length) {\n            return <Loading loadingText={\"Loading sample looks (\" + getPercent(looks.length, skins.length) + \"%)\"} />;\n        }\n        return (\n            <GenericSplash>\n                <p>\n                    Please enter your username and pick a look!\n                </p>\n                <JoinForm looks={looks} />\n            </GenericSplash>\n        );\n    }\n}\n\nexport default SplashScreen;\n","import React, { Component, ReactNode } from 'react';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\nimport { FLOOR_ITEM_PLACEHOLDER } from '../../bobba/graphics/GenericSprites';\n\nexport type FurniInfoProps = {\n    name: string,\n    description: string,\n    itemId: number,\n    image?: HTMLImageElement,\n    canRotate: boolean,\n    canMove: boolean,\n    canPickUp: boolean,\n    canUse: boolean,\n    onClose?: () => void,\n};\n\nclass FurniInfo extends Component<FurniInfoProps> {\n\n    useItem = () => {\n        const { itemId } = this.props;\n        if (itemId !== -1) {\n            BobbaEnvironment.getGame().uiManager.doFurniInteract(itemId);\n        }\n    }\n\n    moveItem = () => {\n        const { itemId } = this.props;\n        if (itemId !== -1) {\n            BobbaEnvironment.getGame().uiManager.doFurniMove(itemId);\n        }\n    }\n\n    rotateItem = () => {\n        const { itemId } = this.props;\n        if (itemId !== -1) {\n            BobbaEnvironment.getGame().uiManager.doFurniRotate(itemId);\n        }\n    }\n\n    pickUpItem = () => {\n        const { itemId } = this.props;\n        if (itemId !== -1) {\n            BobbaEnvironment.getGame().uiManager.doFurniPickUp(itemId);\n        }\n    }\n\n    render() {\n        const { name, description, image, onClose, canRotate, canMove, canPickUp, canUse } = this.props;\n        let src = FLOOR_ITEM_PLACEHOLDER;\n        if (image != null && image.src != null) {\n            src = image.src;\n        }\n        let buttons: ReactNode[] = [];\n\n        if (canMove) {\n            buttons.push(\n                <button key=\"move\" onClick={this.moveItem}>\n                    Move\n                </button>\n            );\n        }\n\n        if (canRotate) {\n            buttons.push(\n                <button key=\"rotate\" onClick={this.rotateItem}>\n                    Rotate\n                </button>\n            );\n        }\n\n        if (canPickUp) {\n            buttons.push(\n                <button key=\"pickup\" onClick={this.pickUpItem}>\n                    Pick up\n                </button>\n            );\n        }\n\n        if (canUse) {\n            buttons.push(\n                <button key=\"use\" onClick={this.useItem}>\n                    Use\n                </button>\n            );\n        }\n\n        return (\n            <>\n                <div className={\"item_info\" + (buttons.length === 0 ? \" no_buttons\" : \"\")}>\n                    <button className=\"close\" onClick={onClose}>\n                        X\n                    </button>\n                    <h2 className=\"title\">{name}</h2>\n                    <hr />\n                    <div className=\"image_container\">\n                        <img src={src} alt={name} />\n                    </div>\n                    <hr />\n                    <p>\n                        {description}\n                    </p>\n                </div >\n                <div className=\"item_info_button_container\">\n                    {buttons}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default FurniInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { RIEInput } from 'riek';\n\nexport default class MottoEdit extends React.Component {\n    render() {\n        const { motto, onMottoChange } = this.props;\n        return (\n            <RIEInput\n                value={motto}\n                change={(data) => onMottoChange(data.motto)}\n                classLoading=\"loading\"\n                propName='motto'\n                editProps={{ maxLength: 80 }}\n            />\n        );\n    }\n}\n\nMottoEdit.propTypes = {\n    motto: PropTypes.string,\n    onMottoChange: PropTypes.func,\n};","import React, { Component, ReactNode } from 'react';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\nimport { FLOOR_ITEM_PLACEHOLDER } from '../../bobba/graphics/GenericSprites';\nimport MottoEdit from './MottoEdit';\nimport Constants from '../../Constants';\n\nexport type UserInfoProps = {\n    name: string,\n    motto: string,\n    userId: number,\n    image?: HTMLImageElement,\n    isMe: boolean,\n    onClose?: () => void,\n};\n\nclass UserInfo extends Component<UserInfoProps> {\n\n    handleWave = () => {\n        const { userId } = this.props;\n        if (userId !== -1) {\n            BobbaEnvironment.getGame().uiManager.doWave();\n        }\n    }\n\n    handleChangeLooks = () => {\n        BobbaEnvironment.getGame().uiManager.doOpenChangeLooks();\n    }\n\n    handleChangeMotto = (motto: string) => {\n        BobbaEnvironment.getGame().uiManager.doChangeMotto(motto);\n    }\n\n    render() {\n        const { name, motto, image, onClose, isMe } = this.props;\n        let src = FLOOR_ITEM_PLACEHOLDER;\n        if (image != null && image.src != null) {\n            src = image.src;\n        }\n        let className = \"item_info no_buttons\";\n        let buttons = (\n            <></>\n        );\n\n        let mottoNode: ReactNode = <>{motto}</>;\n\n        if (isMe) {\n            buttons = (\n                <>\n                    <button onClick={this.handleChangeLooks}>\n                        <span>Change looks</span>\n                    </button>\n                    <button onClick={this.handleWave}>\n                        <span>Wave</span>\n                    </button>\n\n                </>\n            );\n            mottoNode = <MottoEdit motto={motto} onMottoChange={this.handleChangeMotto} />;\n            className = \"item_info\";\n        }\n\n        return (\n            <>\n                <div className={className}>\n                    <button className=\"close\" onClick={onClose}>\n                        X\n                    </button>\n                    <h2 className=\"title\">{name}</h2>\n                    <hr />\n                    <div className=\"user_container\">\n                        <div className=\"avatar_container\">\n                            <img src={src} alt={name} />\n                        </div>\n                        <div className=\"badge_container\">\n                            <button>\n                                <img src={Constants.BADGE_RESOURCES_URL + \"J0S3.gif\"} alt={\"ADM\"} />\n                            </button>\n                            <button>\n                                <img src={Constants.BADGE_RESOURCES_URL + \"ADM.gif\"} alt={\"ADM\"} />\n                            </button>\n                            <button>\n                                <img src={Constants.BADGE_RESOURCES_URL + \"Z64.gif\"} alt={\"ADM\"} />\n                            </button>\n                        </div>\n                    </div>\n                    <hr />\n                    <p className=\"motto\">\n                        {mottoNode}\n                    </p>\n                </div >\n                <div className=\"item_info_button_container\">\n                    {buttons}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default UserInfo;","import React, { Component } from 'react';\nimport GenericSplash from './GenericSplash';\n\ntype ErrorProps = {\n    errorText: string,\n};\nclass ErrorSplash extends Component<ErrorProps> {\n\n    render() {\n        const { errorText } = this.props;\n        return (\n            <GenericSplash>\n                <p>{errorText}</p>\n            </GenericSplash>\n        );\n    }\n}\n\nexport default ErrorSplash;\n","export default class WindowManager {\n    static currentZIndex = 10;\n\n    static getNextZIndex(): number {\n        return this.currentZIndex++;\n    }\n}","import React, { ReactNode, RefObject } from 'react';\nimport Draggable from 'react-draggable';\nimport './changelooks.css';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\nimport { canvas2Image } from '../misc/GraphicsUtilities';\nimport AvatarInfo, { Gender, extractFigureParts, FigurePart, generateFigureString } from '../../bobba/imagers/avatars/AvatarInfo';\nimport WindowManager from '../windows/WindowManager';\n\ntype MainTabId = 'generic' | 'head' | 'torso' | 'legs';\ntype MainTab = {\n    id: MainTabId,\n    tabs: SecondaryTab[],\n};\n\ntype SecondaryTab = {\n    type: string,\n    name: string,\n    image: string,\n    required: boolean,\n};\n\nconst avatarMainTabs: MainTab[] = [\n    {\n        id: \"generic\",\n        tabs: [\n            {\n                type: \"hd\",\n                name: \"Skin\",\n                image: \"avatar_editor_download_icon\",\n                required: true,\n            }\n        ]\n    },\n    {\n        id: \"head\",\n        tabs: [\n            {\n                type: \"hr\",\n                name: \"Hair\",\n                image: \"head_hair\",\n                required: false,\n            },\n            {\n                type: \"ha\",\n                name: \"Hat\",\n                image: \"head_hats\",\n                required: false,\n            },\n            {\n                type: \"he\",\n                name: \"Accesories\",\n                image: \"head_accessories\",\n                required: false,\n            },\n            {\n                type: \"ea\",\n                name: \"Glass\",\n                image: \"head_eyewear\",\n                required: false,\n            },\n            {\n                type: \"fa\",\n                name: \"Masks\",\n                image: \"head_face_accessories\",\n                required: false,\n            }\n        ]\n    },\n    {\n        id: \"torso\",\n        tabs: [\n            {\n                type: \"ch\",\n                name: \"Top\",\n                image: \"top_shirt\",\n                required: true,\n            },\n            {\n                type: \"cc\",\n                name: \"Jacket\",\n                image: \"top_jacket\",\n                required: false,\n            },\n            {\n                type: \"ca\",\n                name: \"Collar\",\n                image: \"top_accessories\",\n                required: false,\n            },\n            {\n                type: \"cp\",\n                name: \"More\",\n                image: \"top_prints\",\n                required: false,\n            }\n        ]\n    },\n    {\n        id: \"legs\",\n        tabs: [\n            {\n                type: \"lg\",\n                name: \"Pants\",\n                image: \"bottom_trousers\",\n                required: true,\n            },\n            {\n                type: \"sh\",\n                name: \"Shoes\",\n                image: \"bottom_shoes\",\n                required: false,\n            },\n            {\n                type: \"wa\",\n                name: \"Belts\",\n                image: \"bottom_accessories\",\n                required: false,\n            }\n        ]\n    }\n];\n\ntype ChangeLooksProps = {};\n\ntype ChangeLooksState = {\n    visible: boolean,\n    mainTab: MainTabId,\n    secondTabId: number,\n    look: string,\n    gender: Gender,\n    zIndex: number,\n};\n\nconst initialState: ChangeLooksState = {\n    visible: false,\n    mainTab: 'generic',\n    secondTabId: 0,\n    look: '',\n    gender: 'M',\n    zIndex: WindowManager.getNextZIndex(),\n};\n\nclass ChangeLooks extends React.Component<ChangeLooksProps, ChangeLooksState>  {\n    constructor(props: ChangeLooksProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        const game = BobbaEnvironment.getGame();\n        game.uiManager.onOpenChangeLooks = (look => {\n            this.setState({\n                visible: true,\n                look,\n                zIndex: WindowManager.getNextZIndex()\n            });\n        });\n\n        game.uiManager.onCloseChangeLooks = (() => {\n            this.setState({\n                visible: false,\n            });\n        });\n    }\n\n    getMainTabs(): ReactNode {\n        const { mainTab } = this.state;\n        return avatarMainTabs.map(mainTabDef => {\n            return (\n                <button key={mainTabDef.id} onClick={this.handleMainTabChange(mainTabDef.id)} className={mainTab === mainTabDef.id ? 'selected' : ''}>\n                    <img src={\"images/avatar_editor/ae_tabs_\" + mainTabDef.id + \".png\"} alt={mainTabDef.id} />\n                </button>\n            );\n        });\n    }\n\n    getSecondTab(): ReactNode {\n        const { mainTab, secondTabId, gender } = this.state;\n        const mainDef = avatarMainTabs.find(value => value.id === mainTab);\n        if (mainDef !== undefined) {\n            let i = 0;\n            if (mainDef.id === 'generic') {\n                const maleImage = \"images/avatar_editor/gender_male.png\";\n                const femaleImage = \"images/avatar_editor/gender_female.png\";\n                const maleName = 'Boy';\n                const femaleName = 'Girl';\n                const maleSelected = gender === 'M';\n                return (\n                    <>\n                        <button onClick={this.handleToggleGender('M')} className={'gender ' + (maleSelected ? 'selected' : '')}>\n                            <img src={maleImage} alt={maleName} />\n                            <span>{maleName}</span>\n                        </button>\n                        <button onClick={this.handleToggleGender('F')} className={'gender ' + (!maleSelected ? 'selected' : '')}>\n                            <img src={femaleImage} alt={femaleName} />\n                            <span>{femaleName}</span>\n                        </button>\n                    </>\n                );\n            } else {\n                return mainDef.tabs.map(secondTabDef => {\n                    const selected = secondTabId === i;\n                    const name = secondTabDef.name;\n                    const image = \"images/avatar_editor/\" + secondTabDef.image + \".png\";\n                    return (\n                        <button key={secondTabDef.name} onClick={this.handleSecondTabChange(i++)} className={selected ? 'selected' : ''}>\n                            <img src={image} alt={name} />\n                        </button>\n                    );\n                });\n            }\n\n        }\n        return [];\n    }\n\n    calculateCurrentColor(colorId: number): number {\n        const { mainTab, secondTabId, look } = this.state;\n        const mainDef = avatarMainTabs.find(value => value.id === mainTab);\n        if (mainDef !== undefined) {\n            const typeId = mainDef.tabs[secondTabId];\n            const parts = extractFigureParts(look);\n            const value = parts.find(value => {\n                return value.type === typeId.type;\n            });\n            if (value !== undefined) {\n                return parseInt(value.colors[colorId]);\n            }\n        }\n        return 0;\n    }\n\n    calculateCurrentPart(): FigurePart | null {\n        const { mainTab, secondTabId, look } = this.state;\n        const mainDef = avatarMainTabs.find(value => value.id === mainTab);\n        if (mainDef !== undefined) {\n            const typeId = mainDef.tabs[secondTabId];\n            const parts = extractFigureParts(look);\n            const value = parts.find(value => {\n                return value.type === typeId.type;\n            });\n            if (value !== undefined) {\n                return value;\n            }\n        }\n        return null;\n    }\n\n    generatePalette(paletteId: number): ReactNode {\n        const { mainTab, secondTabId } = this.state;\n        const mainDef = avatarMainTabs.find(value => value.id === mainTab);\n        if (mainDef !== undefined) {\n            const typeId = mainDef.tabs[secondTabId];\n            if (typeId != null) {\n                const ogPalettes = BobbaEnvironment.getGame().avatarImager.getPartPalette(typeId.type);\n                const colors: ReactNode[] = [];\n                const currentColor = this.calculateCurrentColor(paletteId);\n                for (let colorIdStr in ogPalettes) {\n                    const colorId = parseInt(colorIdStr);\n                    const colorData = ogPalettes[colorId];\n                    const selected = colorId === currentColor;\n                    const isHc = colorData.club !== 0;\n                    colors.push(\n                        <button onClick={this.handleChangeColor(paletteId, colorId)} key={colorId} className={(selected ? 'selected ' : '') + (isHc ? 'hc ' : '')}>\n                            <div className=\"palette\" style={{ backgroundColor: '#' + colorData.color }}></div>\n                        </button>\n                    );\n                }\n                return colors;\n            }\n        }\n        return [];\n    }\n\n    generatePalettes(): ReactNode {\n        const currentPart = this.calculateCurrentPart();\n        const palettes: ReactNode[] = [];\n        let colorCount = 1;\n        if (currentPart != null) {\n            colorCount = BobbaEnvironment.getGame().avatarImager.getPartPaletteCount(currentPart.type, currentPart.id);\n        }\n        for (let i = 0; i < colorCount; i++) {\n            palettes.push(\n                <div key={i} className=\"colors_container\" >\n                    {this.generatePalette(i)}\n                </div>\n            );\n        }\n\n\n        return palettes;\n    }\n\n    generatePartImage(figure: string, selected: boolean, type: MainTabId): ReactNode {\n        const ref: RefObject<HTMLImageElement> = React.createRef();\n        const avatarImager = BobbaEnvironment.getGame().avatarImager;\n\n        avatarImager.generateGeneric(new AvatarInfo(figure, 4, 4, [\"std\"], \"std\", 0, type === 'generic', false, \"n\"), false).then(canvas => {\n            const image = canvas2Image(canvas);\n            const renderedImg = ref.current;\n            if (renderedImg != null) {\n                renderedImg.src = image.src;\n                renderedImg.className = type + (selected ? ' selected ' : '');\n            }\n        });\n\n        return (\n            <img className={selected ? 'selected ' : ''} ref={ref} src=\"images/avatar_editor/avatar_editor_download_icon.png\" alt={figure} />\n        );\n    }\n\n    generatePlatform(): ReactNode {\n        const { look } = this.state;\n        if (look === '') {\n            return (<></>);\n        }\n\n        const ref: RefObject<HTMLImageElement> = React.createRef();\n        const avatarImager = BobbaEnvironment.getGame().avatarImager;\n\n        avatarImager.generateGeneric(new AvatarInfo(look, 4, 4, [\"std\"], \"std\", 0, false, false, \"n\"), false).then(canvas => {\n            const image = canvas2Image(canvas);\n            const renderedImg = ref.current;\n            if (renderedImg != null) {\n                renderedImg.src = image.src;\n                renderedImg.className += ' loaded';\n            }\n        });\n\n        return (\n            <img ref={ref} alt=\"Me\" />\n        );\n    }\n\n    generateGrid(): ReactNode {\n        const { mainTab, secondTabId, gender } = this.state;\n        const mainDef = avatarMainTabs.find(value => value.id === mainTab);\n        if (mainDef !== undefined) {\n            const typeId = mainDef.tabs[secondTabId];\n            if (typeId != null) {\n                const partSet = BobbaEnvironment.getGame().avatarImager.getPartSet(typeId.type);\n                const parts: ReactNode[] = [];\n                const currentPart = this.calculateCurrentPart();\n                let currentColor = this.calculateCurrentColor(0).toString();\n                if (currentPart != null && currentPart.colors.length > 1) {\n                    currentColor += \"-\" + this.calculateCurrentColor(1);\n                }\n                if (!typeId.required) {\n                    parts.push(\n                        <button onClick={this.handleRemovePart(typeId.type)} key={-1} className={(currentPart == null ? 'selected ' : '')}>\n                            <img src=\"images/avatar_editor/removeSelection.png\" alt=\"Remove\" />\n                        </button>\n                    );\n                }\n                for (let partId in partSet) {\n                    const part = partSet[partId];\n                    const selected = currentPart != null && currentPart.id === partId;\n                    const isHc = part.club !== 0;\n                    const figure = typeId.type + \"-\" + partId + \"-\" + currentColor;\n                    if ((part.gender === gender || part.gender === 'U') && part.selectable) {\n                        parts.push(\n                            <button onClick={this.handleChangePart(figure)} key={partId} className={(selected ? 'selected ' : '') + (isHc ? 'hc ' : '')}>\n                                {this.generatePartImage(figure, selected, mainDef.id)}\n                            </button>\n                        );\n                    }\n                }\n                return parts;\n            }\n        }\n        return [];\n    }\n\n    handleMainTabChange = (mainTab: MainTabId) => () => {\n        this.setState({\n            mainTab,\n            secondTabId: 0,\n        });\n    }\n\n    handleSecondTabChange = (secondTabId: number) => () => {\n        this.setState({\n            secondTabId,\n        });\n    }\n\n    handleChangePart = (figure: string) => () => {\n        const { look } = this.state;\n        const newLook = generateFigureString(extractFigureParts(look + \".\" + figure));\n\n        this.setState({\n            look: newLook,\n        });\n    }\n\n    handleChangeColor = (paletteId: number, colorId: number) => () => {\n        const { look } = this.state;\n        const currentPart = this.calculateCurrentPart();\n        if (currentPart != null) {\n            currentPart.colors[paletteId] = colorId.toString();\n            const newLook = generateFigureString(extractFigureParts(look + \".\" + generateFigureString([currentPart])));\n            this.setState({\n                look: newLook,\n            });\n        }\n    }\n\n    handleRemovePart = (type: string) => () => {\n        const { look } = this.state;\n        const newLook = generateFigureString(extractFigureParts(look).filter(value => value.type !== type));\n\n        this.setState({\n            look: newLook,\n        });\n    }\n\n    handleToggleGender = (gender: Gender) => () => {\n        this.setState({\n            gender,\n        });\n    }\n\n    handleSaveChanges = () => {\n        this.setState({ visible: false });\n        const { look, gender } = this.state;\n        BobbaEnvironment.getGame().uiManager.doChangeLooks(look, gender);\n    }\n\n    handleClose = () => {\n        this.setState({ visible: false });\n    }\n    upgradeZIndex = () => {\n        this.setState({\n            zIndex: WindowManager.getNextZIndex(),\n        });\n    }\n    render() {\n        const { visible, zIndex } = this.state;\n        if (!visible) {\n            return <></>;\n        }\n        return (\n            <Draggable defaultClassName=\"avatar_editor\" handle=\".title\" onStart={() => this.upgradeZIndex()} onMouseDown={() => this.upgradeZIndex()}>\n                <div style={{ zIndex }}>\n                    <button className=\"close\" onClick={this.handleClose}>\n                        X\n                    </button>\n                    <h2 className=\"title\">\n                        Change your looks\n                    </h2>\n                    <hr />\n                    <div className=\"main_tab_container\">\n                        {this.getMainTabs()}\n                    </div>\n                    <div className=\"parts_container\">\n                        <div className=\"second_tab_container\">\n                            {this.getSecondTab()}\n                        </div>\n                        <div className=\"first_row\">\n                            <div className=\"parts_grid\">\n                                {this.generateGrid()}\n                            </div>\n                            <div className=\"platform\">\n                                {this.generatePlatform()}\n                            </div>\n                        </div>\n                        <div className=\"palette_container\">\n                            {this.generatePalettes()}\n                        </div>\n                    </div>\n                    <div className=\"button_container\">\n                        <button onClick={this.handleClose}>\n                            Cancel\n                        </button>\n                        <button onClick={this.handleSaveChanges}>\n                            Save changes\n                        </button>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n\nexport default ChangeLooks;","import React, { ReactNode, FormEvent, ChangeEvent } from 'react';\nimport WindowManager from \"../windows/WindowManager\";\nimport Draggable from 'react-draggable';\nimport './messenger.css';\nimport User from '../../bobba/users/User';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\n\nenum Tabs {\n    Friends, Search, Requests, None,\n};\n\ntype MessengerProps = {};\ntype MessengerState = {\n    visible: boolean,\n    zIndex: number,\n    search: string,\n    currentTab: Tabs,\n    firstRowActive: boolean,\n    secondRowActive: boolean,\n    onlineFriends: User[],\n    offlineFriends: User[],\n    friendsRequests: User[],\n    searchResult: User[],\n    currentSelectedFriendId: number,\n};\nconst initialState: MessengerState = {\n    visible: true,\n    zIndex: WindowManager.getNextZIndex(),\n    search: '',\n    currentTab: Tabs.Friends,\n    firstRowActive: true,\n    secondRowActive: true,\n    currentSelectedFriendId: -1,\n    onlineFriends: [],\n    offlineFriends: [],\n    friendsRequests: [],\n    searchResult: [],\n};\n\nexport default class Messenger extends React.Component<MessengerProps, MessengerState> {\n    constructor(props: MessengerProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        const { uiManager } = BobbaEnvironment.getGame();\n        uiManager.onOpenMessenger = (() => {\n            this.setState({\n                visible: true,\n                zIndex: WindowManager.getNextZIndex(),\n            })\n        });\n\n        uiManager.onCloseMessenger = (() => {\n            this.setState({\n                visible: false,\n            })\n        });\n\n        uiManager.onSetFriends = ((onlineFriends, offlineFriends) => {\n            this.setState({\n                onlineFriends,\n                offlineFriends\n            });\n        });\n\n        uiManager.onSetFriendRequests = (friendsRequests => {\n            this.setState({\n                friendsRequests\n            });\n        });\n\n        uiManager.onSetFriendsSearch = (searchResult => {\n            this.setState({\n                searchResult\n            });\n        });\n    }\n\n    close = () => {\n        this.setState({\n            visible: false,\n        });\n    }\n\n    upgradeZIndex = () => {\n        this.setState({\n            zIndex: WindowManager.getNextZIndex(),\n        });\n    }\n\n    requestStartChat = (userId: number) => () => {\n        BobbaEnvironment.getGame().uiManager.doRequestStartChat(userId);\n    }\n\n    requestFollowFriend = (userId: number) => () => {\n        BobbaEnvironment.getGame().uiManager.doRequestFollowFriend(userId);\n    }\n\n    requestAddFriend = (userId: number) => () => {\n        BobbaEnvironment.getGame().uiManager.doRequestAskForFriend(userId);\n    }\n\n    requestRemoveFriend = (userId: number) => () => {\n        if (userId !== -1) {\n            BobbaEnvironment.getGame().uiManager.doRequestRemoveFriend(userId);\n        }\n    }\n\n    requestSearch = (search: string) => () => {\n        BobbaEnvironment.getGame().uiManager.doRequestFriendSearch(search);\n    }\n\n    requestAcceptFriendRequest = (userId: number) => () => {\n        BobbaEnvironment.getGame().uiManager.doRequestAcceptFriendRequest(userId);\n    }\n\n    requestDenyFriendRequest = (userId: number) => () => {\n        BobbaEnvironment.getGame().uiManager.doRequestDenyFriendRequest(userId);\n    }\n\n    requestAcceptAllFriendRequests = () => {\n        const { friendsRequests } = this.state;\n        friendsRequests.forEach(request => {\n            this.requestAcceptFriendRequest(request.id)();\n        });\n    }\n\n    requestDenyAllFriendRequests = () => {\n        const { friendsRequests } = this.state;\n        friendsRequests.forEach(request => {\n            this.requestDenyFriendRequest(request.id)();\n        });\n    }\n\n    generateRequestsGrid(friends: User[]): ReactNode {\n        return friends.map(friend => {\n            return (\n                <div key={friend.id} className=\"friend\">\n                    <img src={\"https://www.habbo.com/habbo-imaging/avatarimage?figure=\" + friend.look + \"&direction=2&head_direction=2&size=s&headonly=1\"} alt={friend.name} />\n                    <span>{friend.name}</span>\n                    <div className=\"icons_container\">\n                        <button onClick={this.requestAcceptFriendRequest(friend.id)} className=\"accept\" />\n                        <button onClick={this.requestDenyFriendRequest(friend.id)} className=\"decline\" />\n                    </div>\n                </div>\n            );\n        });\n    }\n\n    generateOnlineFriendsGrid(friends: User[]): ReactNode {\n        return friends.map(friend => {\n            return (\n                <div key={friend.id} className=\"friend\">\n                    <img src={\"https://www.habbo.com/habbo-imaging/avatarimage?figure=\" + friend.look + \"&direction=2&head_direction=2&size=s&headonly=1\"} alt={friend.name} />\n                    <span>{friend.name}</span>\n                    <div className=\"icons_container\">\n                        <button onClick={this.requestStartChat(friend.id)} className=\"start_chat\" />\n                        <button onClick={this.requestFollowFriend(friend.id)} className=\"follow_friend\" />\n                    </div>\n                </div>\n            );\n        });\n    }\n\n    generateOfflineFriendsGrid(friends: User[]): ReactNode {\n        return friends.map(friend => {\n            return (\n                <div key={friend.id} className=\"friend\">\n                    <img src={\"https://www.habbo.com/habbo-imaging/avatarimage?figure=\" + friend.look + \"&direction=2&head_direction=2&size=s&headonly=1\"} alt={friend.name} />\n                    <span>{friend.name}</span>\n                </div>\n            );\n        });\n    }\n\n    generateSearchGrid(friends: User[]): ReactNode {\n        return friends.map(friend => {\n            return (\n                <div key={friend.id} className=\"friend\">\n                    <img src={\"https://www.habbo.com/habbo-imaging/avatarimage?figure=\" + friend.look + \"&direction=2&head_direction=2&size=s&headonly=1\"} alt={friend.name} />\n                    <span>{friend.name}</span>\n                    <div className=\"icons_container\">\n                        <button onClick={this.requestAddFriend(friend.id)} className=\"ask_for_friend\" />\n                    </div>\n                </div>\n            );\n        });\n    }\n\n    toggleFirstRow = () => {\n        const { firstRowActive } = this.state;\n        this.setState({\n            firstRowActive: !firstRowActive,\n        })\n    }\n\n    toggleSecondRow = () => {\n        const { secondRowActive } = this.state;\n        this.setState({\n            secondRowActive: !secondRowActive,\n        })\n    }\n\n    generateFriendsTab(): React.ReactNode {\n        const { currentTab, firstRowActive, secondRowActive, onlineFriends, offlineFriends, currentSelectedFriendId } = this.state;\n\n        if (currentTab === Tabs.Friends) {\n            return (\n                <>\n                    <div onClick={this.handleChangeTab(Tabs.None)} className=\"main_tab selected\">\n                        <span>Friends</span>\n                        <button className=\"close_arrow\" />\n                    </div>\n                    <div className=\"wrapper\">\n                        <div className=\"friends_container\">\n                            <button onClick={this.toggleFirstRow} className=\"second_tab\">\n                                Friends ({onlineFriends.length})\n                            </button>\n                            <div className=\"friend_list\">\n                                {firstRowActive ? this.generateOnlineFriendsGrid(onlineFriends) : <></>}\n                            </div>\n                            <button onClick={this.toggleSecondRow} className=\"second_tab\">\n                                Offline friends ({offlineFriends.length})\n                            </button>\n                            <div className=\"friend_list\">\n                                {secondRowActive ? this.generateOfflineFriendsGrid(offlineFriends) : <></>}\n                            </div>\n                        </div>\n                        <div className=\"actions_container\">\n                            <button onClick={this.requestRemoveFriend(currentSelectedFriendId)}>\n                                <img src=\"/images/messenger/remove_friend.png\" alt=\"Remove friend\" />\n                            </button>\n                            <button onClick={this.requestStartChat(currentSelectedFriendId)}>\n                                <img src=\"/images/messenger/open_inbox.png\" alt=\"Open inbox\" />\n                            </button>\n                        </div>\n                    </div>\n                </>\n            );\n        } else {\n            return (\n                <div onClick={this.handleChangeTab(Tabs.Friends)} className=\"main_tab selected\">\n                    <span>Friends</span>\n                    <button className=\"open_arrow\" />\n                </div>\n            );\n        }\n    }\n\n    generateSearchTab(): React.ReactNode {\n        const { currentTab, search, firstRowActive, secondRowActive, onlineFriends, offlineFriends, searchResult } = this.state;\n        const filteredFriends = [...onlineFriends, ...offlineFriends].filter(user => {\n            return user.name.toLowerCase().includes(search.toLowerCase());\n        });\n\n        if (currentTab === Tabs.Search) {\n            return (\n                <>\n                    <div onClick={this.handleChangeTab(Tabs.None)} className=\"main_tab\">\n                        <span>Search</span>\n                        <button className=\"close_arrow\" />\n                    </div>\n                    <div className=\"wrapper search\">\n                        <div className=\"friends_container\">\n                            <button onClick={this.toggleFirstRow} className=\"second_tab\">\n                                Friends ({filteredFriends.length})\n                            </button>\n                            <div className=\"friend_list\">\n                                {firstRowActive ? this.generateOfflineFriendsGrid(filteredFriends) : <></>}\n                            </div>\n                            <button onClick={this.toggleSecondRow} className=\"second_tab\">\n                                Other users ({searchResult.length})\n                            </button>\n                            <div className=\"friend_list\">\n                                {secondRowActive ? this.generateSearchGrid(searchResult) : <></>}\n                            </div>\n                        </div>\n                        <div className=\"actions_container\">\n                            <form onSubmit={this.handleSearch}>\n                                <input autoComplete=\"off\" type=\"text\" onChange={this.handleSearchChange} value={search} name=\"room_search\" placeholder=\"Search...\" />\n                                <button>Search</button>\n                            </form>\n                        </div>\n                    </div>\n                </>\n            );\n        } else {\n            return (\n                <div onClick={this.handleChangeTab(Tabs.Search)} className=\"main_tab\">\n                    <span>Search</span>\n                    <button className=\"open_arrow\" />\n                </div>\n            );\n        }\n    }\n    handleChangeTab = (currentTab: Tabs) => () => {\n        this.setState({\n            currentTab,\n        });\n    }\n\n    generateRequestsTab(): React.ReactNode {\n        const { currentTab, friendsRequests } = this.state;\n        const className = \"main_tab \" + (friendsRequests.length > 0 ? 'active' : '');\n\n        if (currentTab === Tabs.Requests) {\n            return (\n                <>\n                    <div onClick={this.handleChangeTab(Tabs.None)} className={className}>\n                        <span>Friend requests</span>\n                        <button className=\"close_arrow\" />\n                    </div>\n                    <div className=\"wrapper\">\n                        <div className=\"friends_container\">\n                            <div className=\"friend_list\">\n                                {this.generateRequestsGrid(friendsRequests)}\n                            </div>\n                        </div>\n                        <div className=\"actions_container requests\">\n                            <button onClick={this.requestAcceptAllFriendRequests}>\n                                <img src=\"/images/messenger/accept.png\" alt=\"Remove friend\" />\n                                <span>Accept all</span>\n                            </button>\n                            <button onClick={this.requestDenyAllFriendRequests}>\n                                <img src=\"/images/messenger/decline.png\" alt=\"Remove friend\" />\n                                <span>Deny all</span>\n                            </button>\n                        </div>\n                    </div>\n                </>\n            );\n        } else {\n            return (\n                <>\n                    <div onClick={this.handleChangeTab(Tabs.Requests)} className={className}>\n                        <span>Friend requests</span>\n                        <button className=\"open_arrow\" />\n                    </div>\n                </>\n            );\n        }\n\n\n    }\n\n    generateFooter(): React.ReactNode {\n        return (\n            <>\n                <div className=\"footer\">\n                    <button>\n                        <img src=\"/images/messenger/open_edit_ctgs.png\" alt=\"Settings\" />\n                        <span>Settings</span>\n                    </button>\n                </div>\n            </>\n        );\n    }\n\n    handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            search: event.target.value,\n        });\n    }\n\n    handleSearch = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const { search } = this.state;\n        BobbaEnvironment.getGame().uiManager.doRequestFriendSearch(search);\n    }\n\n    render() {\n        const { visible, zIndex } = this.state;\n        if (!visible) {\n            return <></>;\n        }\n        return (\n            <Draggable defaultClassName=\"messenger\" handle=\".title\" onStart={() => this.upgradeZIndex()} onMouseDown={() => this.upgradeZIndex()}>\n                <div style={{ zIndex }}>\n                    <button className=\"close\" onClick={this.close}>\n                        X\n                    </button>\n                    <h2 className=\"title\">\n                        Friends\n                    </h2>\n                    {this.generateFriendsTab()}\n                    {this.generateSearchTab()}\n                    {this.generateRequestsTab()}\n                    {this.generateFooter()}\n                </div>\n            </Draggable>\n        );\n    }\n\n}","import React, { ReactNode } from \"react\";\nimport Draggable from \"react-draggable\";\nimport './inventory.css';\nimport BobbaEnvironment from \"../../bobba/BobbaEnvironment\";\nimport UserItem from \"../../bobba/inventory/UserItem\";\nimport { canvas2Image } from \"../misc/GraphicsUtilities\";\nimport { ItemType } from \"../../bobba/imagers/furniture/FurniImager\";\nimport { FLOOR_ITEM_PLACEHOLDER } from \"../../bobba/graphics/GenericSprites\";\nimport WindowManager from \"../windows/WindowManager\";\ntype InventoryContainerProps = {};\ntype InventoryContainerState = {\n    visible: boolean,\n    selectedId: number,\n    currentType: ItemType,\n    items: UserItem[],\n    zIndex: number,\n};\nconst initialState = {\n    visible: false,\n    selectedId: -1,\n    currentType: ItemType.FloorItem,\n    items: [],\n    zIndex: WindowManager.getNextZIndex(),\n};\nexport default class InventoryContainer extends React.Component<InventoryContainerProps, InventoryContainerState> {\n    constructor(props: InventoryContainerProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        const game = BobbaEnvironment.getGame();\n        game.uiManager.onOpenInventory = (() => {\n            this.setState({\n                visible: true,\n                zIndex: WindowManager.getNextZIndex()\n            });\n        });\n\n        game.uiManager.onUpdateInventory = (items => {\n            this.setState({\n                items,\n            });\n        });\n\n        game.uiManager.onCloseInventory = (() => {\n            this.setState({\n                visible: false,\n            });\n        });\n    }\n\n    handleSelectItem = (selectedId: number) => () => {\n        this.setState({\n            selectedId\n        });\n    }\n\n    placeItem = () => {\n        const { selectedId } = this.state;\n        BobbaEnvironment.getGame().uiManager.doFurniPlace(selectedId);\n    }\n\n    close = () => {\n        this.setState({\n            visible: false,\n        });\n    }\n\n    generateGrid(): ReactNode {\n        const { selectedId, items, currentType } = this.state;\n        const stackableItems: { [id: number]: number } = {};\n        const stackableItemsDrawn: { [id: number]: number } = {};\n        const displayItems: ReactNode[] = [];\n        items.forEach(item => {\n            if (stackableItems[item.baseId] == null) {\n                stackableItems[item.baseId] = 1;\n            } else {\n                stackableItems[item.baseId]++;\n            }\n            stackableItemsDrawn[item.baseId] = 0;\n        });\n\n        items.filter(item => (currentType === item.itemType))\n            .forEach(item => {\n                const count = stackableItems[item.baseId];\n                if ((item.stackable && stackableItemsDrawn[item.baseId]++ === 0) || !item.stackable) {\n                    if (item.baseItem != null) {\n                        const image = canvas2Image(item.baseItem.iconImage);\n                        displayItems.push(\n                            <button key={item.id} onClick={this.handleSelectItem(item.id)} className={item.id === selectedId ? 'selected' : ''}>\n                                <img src={image.src} alt={item.baseItem.furniBase.itemData.name} />\n                                {count > 1 ? <span>{count}</span> : <></>}\n                            </button>\n                        );\n                    } else {\n                        displayItems.push(\n                            <button key={item.id} onClick={this.handleSelectItem(item.id)} className={item.id === selectedId ? 'selected' : ''}>\n                                <img src=\"images/avatar_editor/avatar_editor_download_icon.png\" alt={\"Loading\"} />\n                                {count > 1 ? <span>{count}</span> : <></>}\n                            </button>\n                        );\n                    }\n                }\n            });\n\n        return displayItems;\n    }\n\n    generateItemInfo(): ReactNode {\n        const { selectedId } = this.state;\n        const selectedItem = BobbaEnvironment.getGame().inventory.getItem(selectedId);\n        if (selectedItem == null || selectedItem.baseItem == null) {\n            return (\n                <div className=\"item_preview\">\n                    <div className=\"image_container\">\n                        <img src={FLOOR_ITEM_PLACEHOLDER} alt=\"Furni\" />\n                    </div>\n                    <div className=\"item_data\">\n                        <h2>\n                            Select an item\n                        </h2>\n                    </div>\n                </div>\n            );\n        }\n        const { itemData } = selectedItem.baseItem.furniBase;\n        const image = canvas2Image(selectedItem.baseItem.infoImage);\n        return (\n            <div className=\"item_preview\">\n                <div className=\"image_container\">\n                    <img src={image.src} alt=\"Furni\" />\n                </div>\n                <div className=\"item_data\">\n                    <h2>\n                        {itemData.name}\n                    </h2>\n                    <p>\n                        {itemData.description}\n                    </p>\n                    <button onClick={this.placeItem}>\n                        Place to room\n                    </button>\n                </div>\n            </div>\n        );\n    }\n\n    upgradeZIndex = () => {\n        this.setState({\n            zIndex: WindowManager.getNextZIndex(),\n        });\n    }\n\n    render() {\n        const { visible, zIndex } = this.state;\n        if (!visible) {\n            return <></>;\n        }\n        return (\n            <Draggable defaultClassName=\"inventory\" handle=\".title\" onStart={() => this.upgradeZIndex()} onMouseDown={() => this.upgradeZIndex()}>\n                <div style={{ zIndex }}>\n                    <button className=\"close\" onClick={this.close}>\n                        X\n                    </button>\n                    <h2 className=\"title\">\n                        Inventory\n                    </h2>\n                    <hr />\n                    <div className=\"main_tab_container\">\n                        <button className=\"selected\">\n                            Furniture\n                        </button>\n                        <button>\n                            Badges\n                        </button>\n                    </div>\n                    <div className=\"items_container\">\n                        <div className=\"second_tab_container\">\n                            {this.generateSecondTab()}\n                        </div>\n                        <div className=\"grid_container\">\n                            <div className=\"grid\">\n                                {this.generateGrid()}\n                            </div>\n                            {this.generateItemInfo()}\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n    generateSecondTab(): ReactNode {\n        const floorSelected = this.state.currentType === ItemType.FloorItem;\n        return (\n            <>\n                <button onClick={this.toggleType(ItemType.FloorItem)} className={floorSelected ? 'selected' : ''}>\n                    Floor\n                </button>\n                <button onClick={this.toggleType(ItemType.WallItem)} className={!floorSelected ? 'selected' : ''}>\n                    Wall\n                </button>\n            </>\n        );\n    }\n\n    toggleType = (type: ItemType) => () => {\n        this.setState({\n            currentType: type\n        });\n    }\n}","import React from \"react\";\nimport Draggable from \"react-draggable\";\nimport './confirmpurchase.css';\nimport CatalogueItem from \"../../bobba/catalogue/CatalogueItem\";\nimport { canvas2Image } from \"../misc/GraphicsUtilities\";\n\ntype ConfirmPurchaseProps = {\n    item: CatalogueItem,\n    onClose: () => void,\n    onPurchase: () => void,\n    zIndex: number,\n};\ntype ConfirmPurchaseState = {\n    visible: boolean,\n};\nconst initialState: ConfirmPurchaseState = {\n    visible: true,\n};\n\nexport default class ConfirmPurchase extends React.Component<ConfirmPurchaseProps, ConfirmPurchaseState> {\n\n    constructor(props: ConfirmPurchaseProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    render() {\n        const { item, onClose, onPurchase, zIndex } = this.props;\n        if (item.baseItem == null) {\n            return <></>;\n        }\n        const image = canvas2Image(item.baseItem.iconImage);\n        return (\n            <Draggable handle=\".handle\">\n                <div className=\"catalogue_confirm_purchase\" style={{ zIndex }}>\n                    <button className=\"close\" onClick={onClose}>\n                        X\n                    </button>\n                    <h2 className=\"handle\">Confirmar compra</h2>\n                    <hr />\n                    <div className=\"wrapper\">\n                        <div className=\"first_row\">\n                            <button>\n                                <img src={image.src} alt={item.baseItem.furniBase.itemData.name} />\n                            </button>\n                            <h2>\n                                {item.baseItem.furniBase.itemData.name}\n                            </h2>\n                        </div>\n                        <div className=\"second_row\">\n                            <p>\n                                {item.baseItem.furniBase.itemData.name} cuesta {item.cost} crédito{item.cost === 1 ? '' : 's'}.\n                            </p>\n                            <p>\n                                Tienes 420 créditos.\n                            </p>\n                        </div>\n                        <div className=\"third_row\">\n                            <button onClick={onPurchase}>Comprar</button>\n                            <button>Regalar</button>\n                            <button onClick={onClose}>Cancelar</button>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}","import React, { ReactNode, Fragment, RefObject } from \"react\";\nimport Draggable from \"react-draggable\";\nimport './catalogue.css';\nimport ConfirmPurchase from \"./ConfirmPurchase\";\nimport { CatalogueIndex } from \"../../bobba/catalogue/Catalogue\";\nimport CataloguePage from \"../../bobba/catalogue/CataloguePage\";\nimport BobbaEnvironment from \"../../bobba/BobbaEnvironment\";\nimport { canvas2Image } from \"../misc/GraphicsUtilities\";\nimport WindowManager from \"../windows/WindowManager\";\nimport CatalogueItem from \"../../bobba/catalogue/CatalogueItem\";\nimport Constants from \"../../Constants\";\n\ntype CatalogueProps = {};\n\ntype CatalogueState = {\n    pages: CatalogueIndex[];\n    currentPage?: CataloguePage;\n    currentTabId: number;\n    currentPageId: number;\n    currentItemId: number;\n    visible: boolean;\n    purchaseWindowVisible: boolean,\n    zIndex: number,\n};\n\nconst initialState = {\n    pages: [],\n    currentPage: undefined,\n    currentPageId: -1,\n    currentTabId: -1,\n    currentItemId: -1,\n    visible: false,\n    purchaseWindowVisible: false,\n    zIndex: WindowManager.getNextZIndex(),\n};\n\nconst pageColors = [4293190884, 4293914607, 0xFFFFDB54, 4289454682, 4289431551, 4285716709, 4294016606, 4293326172, 4293694138, 4285383659, 4293082689, 4288782753];\n\nexport default class Catalogue extends React.Component<CatalogueProps, CatalogueState> {\n    constructor(props: CatalogueProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        const game = BobbaEnvironment.getGame();\n\n        game.uiManager.onOpenCatalogue = (() => {\n            this.setState({\n                visible: true,\n                zIndex: WindowManager.getNextZIndex()\n            });\n        });\n\n        game.uiManager.onCloseCatalogue = (() => {\n            this.setState({\n                visible: false,\n            });\n        });\n\n        game.uiManager.onLoadCatalogueIndex = (index => {\n            this.setState({\n                pages: index,\n                currentPage: undefined,\n                currentItemId: -1,\n                currentPageId: -1,\n                currentTabId: -1,\n            });\n        });\n\n        game.uiManager.onLoadCataloguePage = (page => {\n            this.setState({\n                currentPage: page,\n            });\n        });\n    }\n\n    handleClose = () => {\n        this.setState({\n            visible: false,\n        });\n    }\n\n    generateTabs(): ReactNode {\n        const { pages, currentPageId, currentTabId } = this.state;\n\n        return pages.map(currentPage => {\n            const children = currentPage.children.map(child => {\n                return (\n                    <button onClick={this.handleChangePage(child.id)} key={child.id} className={\"second_tab\" + (currentPageId === child.id ? ' selected' : '')}>\n                        <div className=\"icon\">\n                            <img src={Constants.CATALOGUE_RESOURCES_URL + \"icon_\" + child.iconId + \".png\"} alt={child.name} />\n                        </div>\n                        <span>{child.name}</span>\n                    </button>\n                );\n            });\n\n            const calculatedColor = pageColors[currentPage.color % pageColors.length].toString(16).substr(2);\n\n            return (\n                <Fragment key={currentPage.id}>\n                    <button onClick={this.handleChangePage(currentPage.id)} className={\"main_tab\" + (currentPageId === currentPage.id ? ' selected' : '') + (currentTabId === currentPage.id ? ' open' : '')}>\n                        <div className=\"icon\" style={{ backgroundColor: '#' + calculatedColor }}>\n                            <img src={Constants.CATALOGUE_RESOURCES_URL + \"icon_\" + currentPage.iconId + \".png\"} alt={currentPage.name} />\n                        </div>\n                        <span>{currentPage.name}</span>\n                    </button>\n                    {currentTabId === currentPage.id ? children : <></>}\n                </Fragment>\n            );\n        });\n    }\n\n    handleSelectItem = (id: number) => () => {\n        this.setState({\n            currentItemId: id,\n        });\n    }\n\n    handleChangePage = (id: number) => () => {\n        const { pages, currentTabId } = this.state;\n        const isMain = pages.find(value => value.id === id);\n\n        if (isMain) {\n            if (isMain.children.length > 0 && currentTabId !== id) {\n                this.setState({\n                    currentPageId: id,\n                    currentTabId: id,\n                    currentItemId: -1,\n                    purchaseWindowVisible: false,\n                });\n            } else {\n                this.setState({\n                    currentPageId: id,\n                    currentTabId: -1,\n                    currentItemId: -1,\n                    purchaseWindowVisible: false,\n                });\n            }\n        } else {\n            this.setState({\n                currentPageId: id,\n                currentItemId: -1,\n                purchaseWindowVisible: false,\n            });\n        }\n\n        BobbaEnvironment.getGame().uiManager.doRequestCataloguePage(id);\n    }\n\n    generateDescription(): ReactNode {\n        const { currentItemId, currentPage } = this.state;\n        if (currentPage == null) {\n            return <></>;\n        }\n        if (currentItemId !== -1) {\n            const item = currentPage.items.find(value => value.itemId === currentItemId);\n            if (item != null && item.baseItem != null) {\n                const image = canvas2Image(item.baseItem.infoImage);\n                return (\n                    <>\n                        <div className=\"image_container\">\n                            <img src={image.src} alt={item.baseItem.furniBase.itemData.name} />\n                        </div>\n                        <div className=\"description_container\">\n                            <h2>{item.baseItem.furniBase.itemData.name}</h2>\n                            <p>{item.baseItem.furniBase.itemData.description}</p>\n                        </div>\n                        <div className=\"button_container\">\n                            <span>{item.cost} crédito{item.cost === 1 ? '' : 's'}</span>\n                            <button onClick={this.handleTryPurchase}>Comprar</button>\n                        </div>\n                    </>\n                );\n            } else {\n                return <></>;\n            }\n        }\n\n        return (\n            <>\n                <div className=\"image_container\">\n                    {currentPage.imageTeaser.length > 0 ? <img src={Constants.CATALOGUE_RESOURCES_URL + \"\" + currentPage.imageTeaser + \".gif\"} alt=\"Furniture\" /> : <></>}\n                </div>\n                <div className=\"description_container\">\n                    {currentPage.textDetails}\n                </div>\n            </>\n        );\n    }\n\n    handleTryPurchase = () => {\n        this.setState({\n            purchaseWindowVisible: true,\n        });\n    }\n\n    handlePurchase = () => {\n        const { currentItemId, currentPageId } = this.state;\n        BobbaEnvironment.getGame().uiManager.doRequestCataloguePurchase(currentPageId, currentItemId);\n        this.setState({\n            purchaseWindowVisible: false,\n        });\n    }\n\n    handlePurchaseWindowClose = () => {\n        this.setState({\n            purchaseWindowVisible: false,\n        });\n    }\n\n    generateFurniButton(item: CatalogueItem): ReactNode {\n        const { currentItemId } = this.state;\n        const ref: RefObject<HTMLImageElement> = React.createRef();\n\n        item.loadBase().then(base => {\n            const image = canvas2Image(base.iconImage);\n            const renderedImg = ref.current;\n            if (renderedImg != null) {\n                renderedImg.src = image.src;\n                renderedImg.alt = base.furniBase.itemData.name;\n            }\n        }).catch(err => {\n            \n        });\n\n        return (\n            <button key={item.itemId} onClick={this.handleSelectItem(item.itemId)} className={currentItemId === item.itemId ? 'selected' : ''}>\n                <img ref={ref} src=\"images/avatar_editor/avatar_editor_download_icon.png\" alt={\"Loading\"} />\n            </button>\n        );\n    }\n\n    generateGrid(): ReactNode {\n        const { currentPage } = this.state;\n        if (currentPage == null) {\n            return <></>;\n        }\n\n        return currentPage.items.map(item => this.generateFurniButton(item));\n    }\n\n    generateFrontPage(currentPage: CataloguePage): ReactNode {\n        return (\n            <>\n                <div className=\"frontpage_teaser\">\n                    <img alt=\"border\" src={Constants.CATALOGUE_RESOURCES_URL + \"front_page_border.gif\"} className=\"border\" />\n                    <img alt=\"article\" src={Constants.TOP_STORY_RESOURCES_URL + currentPage.imageTeaser + \".gif\"} className=\"top_story\" />\n                    <h2>\n                        {currentPage.textHeader}\n                    </h2>\n                    <p>\n                        {currentPage.textDetails}\n                    </p>\n                </div>\n                <div className=\"frontpage_content\">\n                    <h2>{currentPage.textMisc}</h2>\n                    <p>{currentPage.textMisc2}</p>\n                </div>\n                <div className=\"frontpage_vouchers\">\n                    <span>Voucher code:</span>\n                    <input type=\"text\" name=\"voucher\" />\n                    <button>Redeem</button>\n                </div>\n            </>\n        );\n    }\n\n    generateDefaultPage(currentPage: CataloguePage): ReactNode {\n        return (\n            <>\n                <div className=\"description\">\n                    {currentPage.textHeader}\n                </div>\n                <div className=\"second_row\">\n                    <div className=\"grid_container\">\n                        <div className=\"title\">\n                            Pick a furni\n                            </div>\n                        <div className=\"grid\">\n                            {this.generateGrid()}\n                        </div>\n                    </div>\n                    <div className=\"item_description\">\n                        {this.generateDescription()}\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    generatePage(): ReactNode {\n        const { currentPage } = this.state;\n        if (currentPage != null) {\n            let page = null;\n            if (currentPage.layout === 'frontpage') {\n                page = this.generateFrontPage(currentPage);\n            } else {\n                page = this.generateDefaultPage(currentPage);\n            }\n            return (\n                <div className=\"wrapper\">\n                    <div className=\"header_container\">\n                        {currentPage.imageHeadline.length > 0 ? <img alt=\"Furniture\" src={Constants.CATALOGUE_RESOURCES_URL + \"\" + currentPage.imageHeadline + \".gif\"} /> : <></>}\n                    </div>\n                    {page}\n                </div>\n            );\n        }\n        return <></>;\n    }\n    upgradeZIndex = () => {\n        this.setState({\n            zIndex: WindowManager.getNextZIndex(),\n        });\n    }\n    render() {\n        const { visible, purchaseWindowVisible, currentItemId, currentPage, zIndex } = this.state;\n        if (!visible) {\n            return <></>;\n        }\n        let purchaseWindow = <></>;\n        if (currentPage != null && purchaseWindowVisible) {\n            const item = currentPage.items.find(value => value.itemId === currentItemId);\n            if (item != null && item.baseItem != null) {\n                purchaseWindow = <ConfirmPurchase zIndex={WindowManager.getNextZIndex()} item={item} onClose={this.handlePurchaseWindowClose} onPurchase={this.handlePurchase} />\n            }\n        }\n\n        return (\n            <>\n                <Draggable handle=\".handle\" onStart={() => this.upgradeZIndex()} onMouseDown={() => this.upgradeZIndex()}>\n                    <div className=\"catalogue\" style={{ zIndex }}>\n                        <div className=\"content\">\n                            <div className=\"handle\" />\n                            {this.generatePage()}\n                        </div>\n                        <div className=\"navigator\">\n                            <button className=\"close\" onClick={this.handleClose}>\n                                X\n                            </button>\n                            <h2 className=\"handle\">Shop</h2>\n                            <hr />\n                            <div className=\"tab_container\">\n                                {this.generateTabs()}\n                            </div>\n                        </div>\n                    </div>\n                </Draggable>\n                {purchaseWindow}\n            </>\n        );\n    }\n}","import React from \"react\";\nimport Draggable from \"react-draggable\";\nimport './notifications.css';\nimport WindowManager from \"../windows/WindowManager\";\n\ntype NotifProps = {\n    text: string,\n    id: number,\n};\ntype NotifState = {\n    visible: boolean,\n    zIndex: number,\n};\nexport default class Notif extends React.Component<NotifProps, NotifState> {\n    constructor(props: NotifProps) {\n        super(props);\n        this.state = {\n            visible: true,\n            zIndex: WindowManager.getNextZIndex(),\n        };\n    }\n    handleClose = () => {\n        this.setState({\n            visible: false,\n        });\n    }\n    upgradeZIndex = () => {\n        this.setState({\n            zIndex: WindowManager.getNextZIndex(),\n        });\n    }\n    render() {\n        const { visible, zIndex } = this.state;\n        const { text, id } = this.props;\n        if (!visible) {\n            return <></>;\n        }\n\n        return (\n            <Draggable key={id} handle=\".handle\" onStart={() => this.upgradeZIndex()} onMouseDown={() => this.upgradeZIndex()}>\n                <div className=\"notification\" style={{ zIndex }}>\n                    <button className=\"close\" onClick={this.handleClose}>\n                        X\n                    </button>\n                    <h2 className=\"handle\">Alert</h2>\n                    <hr />\n                    <div className=\"wrapper\">\n                        <div className=\"first_row\">\n                            <span>{text}</span>\n                        </div>\n                        <div className=\"second_row\">\n                            <button onClick={this.handleClose}>Ok</button>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}\n","import React from \"react\";\nimport BobbaEnvironment from \"../../bobba/BobbaEnvironment\";\nimport Notif from \"./Notif\";\n\ntype NotificationsProps = {};\ntype NotificationsState = {\n    notifications: string[],\n};\n\nconst initialState = {\n    notifications: [],\n};\n\nexport default class Notifications extends React.Component<NotificationsProps, NotificationsState> {\n    constructor(props: NotificationsProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        BobbaEnvironment.getGame().uiManager.onShowNotification = ((text: string) => {\n            const { notifications } = this.state;\n            this.setState({\n                notifications: notifications.concat(text),\n            });\n        });\n    }\n\n    render() {\n        const { notifications } = this.state;\n        let i = 0;\n        return notifications.map(text => {\n            return <Notif id={i++} text={text} />\n        });\n    }\n}","import React, { ReactNode, ChangeEvent, FormEvent } from 'react';\nimport WindowManager from '../windows/WindowManager';\nimport Draggable from 'react-draggable';\nimport './nav.css';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\nimport RoomData, { LockType } from '../../bobba/navigator/RoomData';\n\ntype MainTabId = 'rooms' | 'me' | 'search';\ntype NavigatorProps = {};\ntype NavigatorState = {\n    visible: boolean,\n    zIndex: number,\n    mainTabId: MainTabId,\n    search: string,\n    currentRooms?: RoomData[],\n};\nconst initialState: NavigatorState = {\n    visible: true,\n    mainTabId: 'rooms',\n    search: '',\n    zIndex: WindowManager.getNextZIndex(),\n    currentRooms: undefined,\n};\nexport default class Navigator extends React.Component<NavigatorProps, NavigatorState> {\n    constructor(props: NavigatorProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        const game = BobbaEnvironment.getGame();\n\n        game.uiManager.onOpenNavigator = (() => {\n            const { mainTabId } = this.state;\n            this.requestRoomList(mainTabId);\n            this.setState({\n                visible: true,\n                zIndex: WindowManager.getNextZIndex(),\n            });\n        });\n\n        game.uiManager.onCloseNavigator = (() => {\n            this.setState({\n                visible: false,\n            });\n        });\n\n        game.uiManager.onLoadRoomList = ((rooms) => {\n            this.setState({\n                currentRooms: rooms,\n            });\n        });\n    }\n\n    close = () => {\n        this.setState({\n            visible: false,\n        });\n    }\n\n    upgradeZIndex = () => {\n        this.setState({\n            zIndex: WindowManager.getNextZIndex(),\n        });\n    }\n\n    generateTabs(): ReactNode {\n        const { mainTabId } = this.state;\n        return (\n            <>\n                <button onClick={this.handleMainTabChange('rooms')} className={mainTabId === 'rooms' ? 'selected' : ''}>\n                    Rooms\n                </button>\n                <button onClick={this.handleMainTabChange('me')} className={mainTabId === 'me' ? 'selected' : ''}>\n                    Me\n                </button>\n                <button onClick={this.handleMainTabChange('search')} className={mainTabId === 'search' ? 'selected' : ''}>\n                    Search\n                </button>\n            </>\n        );\n    }\n\n    requestRoomList(mainTabId: MainTabId) {\n        switch (mainTabId) {\n            case 'me':\n                BobbaEnvironment.getGame().uiManager.doRequestNavigatorMyRooms();\n                break;\n            case 'rooms':\n                BobbaEnvironment.getGame().uiManager.doRequestNavigatorRooms();\n                break;\n        }\n    }\n\n    handleMainTabChange = (mainTabId: MainTabId) => () => {\n        const { search } = this.state;\n        if (mainTabId === 'search') {\n            this.setState({\n                mainTabId,\n                currentRooms: [],\n            });\n            if (search.length > 0) {\n                BobbaEnvironment.getGame().uiManager.doRequestNavigatorSearch(search);\n            }\n        } else {\n            this.setState({\n                mainTabId,\n                currentRooms: undefined,\n            });\n            this.requestRoomList(mainTabId);\n        }\n    }\n\n    handleSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            search: event.target.value,\n        });\n    }\n\n    handleSearch = (event: FormEvent<HTMLFormElement>) => {\n        const { search } = this.state;\n        event.preventDefault();\n        this.setState({\n            mainTabId: 'search',\n            currentRooms: undefined,\n        });\n        BobbaEnvironment.getGame().uiManager.doRequestNavigatorSearch(search);\n    }\n\n    handleGoToRoom = (roomId: number) => () => {\n        BobbaEnvironment.getGame().uiManager.doRequestGoToRoom(roomId);\n    }\n\n    handleCreateRoom = () => {\n        BobbaEnvironment.getGame().uiManager.doOpenCreateRoom();\n    }\n\n    calculateUserCountColor(userCount: number, capacity: number): string {\n        if (userCount === 0) {\n            return '';\n        }\n        return 'g';\n    }\n\n    generateGrid(): ReactNode {\n        const { currentRooms } = this.state;\n        if (currentRooms == null) {\n            return (\n                <p>\n                    Loading...\n                </p>\n            );\n        }\n        return currentRooms\n            .sort((a, b) => b.userCount - a.userCount)\n            .map(roomData => {\n                let lockIcon = <></>;\n                if (roomData.lockType === LockType.Locked) {\n                    lockIcon = <button className=\"door_bell\" />;\n                } else if (roomData.lockType === LockType.Password) {\n                    lockIcon = <button className=\"door_password\" />;\n                }\n                return (\n\n                    <div className=\"room_button\" key={roomData.id} onClick={this.handleGoToRoom(roomData.id)}>\n                        <span>{roomData.name.substr(0, 30)}</span>\n                        <div className=\"icons_container\">\n                            {lockIcon}\n                            <button className={roomData.isFavourite ? 'favourite' : 'make_favourite'} />\n                            <button className={\"usercount \" + this.calculateUserCountColor(roomData.userCount, roomData.capacity)}>{roomData.userCount}</button>\n                        </div>\n\n                    </div>\n                )\n            });\n    }\n\n    render() {\n        const { visible, zIndex, search } = this.state;\n        if (!visible) {\n            return <></>;\n        }\n\n        return (\n            <Draggable defaultClassName=\"nav\" handle=\".title\" onStart={() => this.upgradeZIndex()} onMouseDown={() => this.upgradeZIndex()}>\n                <div style={{ zIndex }}>\n                    <button className=\"close\" onClick={this.close}>\n                        X\n                    </button>\n                    <h2 className=\"title\">\n                        Navigator\n                    </h2>\n                    <hr />\n                    <div className=\"main_tab_container\">\n                        {this.generateTabs()}\n                    </div>\n                    <div className=\"wrapper\">\n                        <div className=\"search_bar\">\n                            <form onSubmit={this.handleSearch}>\n                                <input autoComplete=\"off\" type=\"text\" onChange={this.handleSearchChange} value={search} name=\"room_search\" placeholder=\"Search a room...\" />\n                                <button>Search</button>\n                            </form>\n                        </div>\n                        <div className=\"basic_rooms\">\n                            {this.generateGrid()}\n                        </div>\n                        <div className=\"more_rooms\">\n                            <div className=\"info\">\n                                <img src=\"images/navigator/create_room.png\" alt=\"More rooms\" />\n                                <span>More rooms?</span>\n                            </div>\n                            <button onClick={this.handleCreateRoom}>Create room</button>\n                        </div>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}","import React, { FormEvent, ChangeEvent } from \"react\";\nimport Draggable from \"react-draggable\";\nimport WindowManager from \"../windows/WindowManager\";\nimport './createroom.css';\nimport BobbaEnvironment from \"../../bobba/BobbaEnvironment\";\n\ntype Model = {\n    id: string,\n    tileCount: number,\n};\n\nconst models: Model[] = [\n    { tileCount: 104, id: 'model_a' },\n    { tileCount: 94, id: 'model_b' },\n    { tileCount: 36, id: 'model_c' },\n    { tileCount: 84, id: 'model_d' },\n    { tileCount: 80, id: 'model_e' },\n    { tileCount: 80, id: 'model_f' },\n    { tileCount: 416, id: 'model_i' },\n    { tileCount: 320, id: 'model_j' },\n    { tileCount: 448, id: 'model_k' },\n    { tileCount: 352, id: 'model_l' },\n    { tileCount: 384, id: 'model_m' },\n    { tileCount: 372, id: 'model_n' },\n    { tileCount: 80, id: 'model_g' },\n    { tileCount: 74, id: 'model_h' },\n    { tileCount: 416, id: 'model_o' },\n    { tileCount: 352, id: 'model_p' },\n    { tileCount: 304, id: 'model_q' },\n    { tileCount: 336, id: 'model_r' },\n    { tileCount: 748, id: 'model_u' },\n    { tileCount: 438, id: 'model_v' },\n    { tileCount: 540, id: 'model_t' },\n    { tileCount: 512, id: 'model_w' },\n    { tileCount: 396, id: 'model_x' },\n    { tileCount: 440, id: 'model_y' },\n    { tileCount: 456, id: 'model_z' },\n    { tileCount: 208, id: 'model_0' },\n];\n\ntype CreateRoomProps = {};\ntype CreateRoomState = {\n    zIndex: number,\n    visible: boolean,\n    selectedModel: string,\n    name: string,\n};\nconst initialState = {\n    zIndex: WindowManager.getNextZIndex(),\n    visible: false,\n    selectedModel: models[0].id,\n    name: '',\n};\n\nexport default class CreateRoom extends React.Component<CreateRoomProps, CreateRoomState> {\n    constructor(props: CreateRoomProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        const game = BobbaEnvironment.getGame();\n\n        game.uiManager.onOpenCreateRoom = (() => {\n            this.setState({\n                visible: true,\n                zIndex: WindowManager.getNextZIndex(),\n            });\n        });\n\n        game.uiManager.onCloseCreateRoom = (() => {\n            this.setState({\n                visible: false,\n            });\n        });\n    }\n\n    close = () => {\n        this.setState({\n            visible: false,\n        });\n    }\n\n    upgradeZIndex = () => {\n        this.setState({\n            zIndex: WindowManager.getNextZIndex(),\n        });\n    }\n\n    handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        const { name, selectedModel } = this.state;\n        event.preventDefault();\n        if (name.length > 0) {\n            BobbaEnvironment.getGame().uiManager.doRequestCreateRoom(name, selectedModel);\n        }\n    }\n\n    handleNameChange = (event: ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            name: event.target.value,\n        });\n    }\n\n    handleSelect = (selectedModel: string) => () => {\n        this.setState({\n            selectedModel\n        });\n    }\n\n    generateGrid(): React.ReactNode {\n        const { selectedModel } = this.state;\n        return models.map(model => {\n            return (\n                <button key={model.id} onClick={this.handleSelect(model.id)} className={selectedModel === model.id ? 'selected' : ''}>\n                    <img src={\"images/navigator/\" + model.id + \".png\"} alt={model.id} />\n                    <div className=\"tile_count\">\n                        <img src=\"images/navigator/tile_icon_black.png\" alt={model.tileCount + \" tiles\"} />\n                        <span>{model.tileCount} tiles</span>\n                    </div>\n                </button>\n            );\n        });\n    }\n\n    render() {\n        const { visible, zIndex, name } = this.state;\n        if (!visible) {\n            return <></>;\n        }\n        return (\n            <Draggable defaultClassName=\"createroom\" handle=\".title\" onStart={() => this.upgradeZIndex()} onMouseDown={() => this.upgradeZIndex()}>\n                <div style={{ zIndex }}>\n                    <button className=\"close\" onClick={this.close}>\n                        X\n                    </button>\n                    <h2 className=\"title\">\n                        Create a room\n                    </h2>\n                    <hr />\n                    <div className=\"wrapper\">\n                        <h2>Choose style</h2>\n                        <div className=\"grid\">\n                            {this.generateGrid()}\n                        </div>\n                        <form onSubmit={this.handleSubmit}>\n                            <h2>Room name</h2>\n                            <input maxLength={33} onChange={this.handleNameChange} value={name} type=\"text\" placeholder=\"Room name\" />\n                            <div className=\"button_container\">\n                                <button>\n                                    Create room\n                                </button>\n                                <button onClick={this.close}>\n                                    Cancel\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </Draggable>\n        );\n    }\n}","import React, { ChangeEvent, ReactNode, RefObject } from 'react';\nimport WindowManager from \"../windows/WindowManager\";\nimport Draggable from 'react-draggable';\nimport './chat.css';\nimport BobbaEnvironment from '../../bobba/BobbaEnvironment';\nimport User from '../../bobba/users/User';\nimport { MessengerMessage, MessengerMessageType, MessengerChat } from '../../bobba/messenger/Messenger';\n\ntype ChatProps = {};\ntype ChatState = {\n    visible: boolean,\n    zIndex: number,\n    text: string,\n    messages: MessengerMessage[],\n    notifications: number[]\n    currentActiveChatId: number,\n    currentTabOffset: number,\n    activeChats: User[]\n};\nconst initialState: ChatState = {\n    visible: false,\n    zIndex: WindowManager.getNextZIndex(),\n    text: '',\n    messages: [],\n    currentActiveChatId: 0,\n    currentTabOffset: 0,\n    activeChats: [],\n    notifications: [],\n};\n\nexport default class Chat extends React.Component<ChatProps, ChatState> {\n    chatWrapper: RefObject<HTMLDivElement>;\n    constructor(props: ChatProps) {\n        super(props);\n        this.state = initialState;\n        this.chatWrapper = React.createRef();\n    }\n\n    scrollDown() {\n        if (this.chatWrapper.current != null) {\n            (window as any).wrapper = this.chatWrapper.current;\n            this.chatWrapper.current.scrollTop = this.chatWrapper.current.scrollHeight - this.chatWrapper.current.clientHeight;\n        }\n    }\n\n    componentDidMount() {\n        const { uiManager } = BobbaEnvironment.getGame();\n        uiManager.onOpenChat = (() => {\n            const { activeChats } = this.state;\n            this.setState({\n                visible: activeChats.length > 0,\n                zIndex: WindowManager.getNextZIndex(),\n            });\n        });\n\n        uiManager.onCloseChat = (() => {\n            this.setState({\n                visible: false,\n            })\n        });\n\n        uiManager.onOpenMessengerChat = ((chat: MessengerChat) => {\n            const { activeChats } = this.state;\n            if (activeChats.find(user => user.id === chat.user.id)) {\n                this.setState({\n                    visible: true,\n                    zIndex: WindowManager.getNextZIndex(),\n                    messages: chat.chats,\n                    currentActiveChatId: chat.user.id,\n                });\n            } else {\n                this.setState({\n                    visible: true,\n                    zIndex: WindowManager.getNextZIndex(),\n                    activeChats: [...activeChats, chat.user],\n                    messages: chat.chats,\n                    currentActiveChatId: chat.user.id,\n                });\n            }\n            this.scrollDown();\n        });\n\n        uiManager.onReceiveMessengerMessage = ((chat: MessengerChat) => {\n            const { currentActiveChatId, notifications, activeChats, visible } = this.state;\n            if (activeChats.find(value => value.id === chat.user.id)) {\n                if (currentActiveChatId === chat.user.id) {\n                    this.setState({\n                        messages: chat.chats,\n                    });\n                    this.scrollDown();\n                    return visible;\n                } else {\n                    this.setState({\n                        notifications: [...notifications, chat.user.id],\n                    });\n                }\n            } else if (activeChats.length === 0) {\n                this.setState({\n                    activeChats: [...activeChats, chat.user],\n                    messages: chat.chats,\n                    currentActiveChatId: chat.user.id,\n                });\n                this.scrollDown();\n            } else {\n                this.setState({\n                    activeChats: [...activeChats, chat.user],\n                    notifications: [...notifications, chat.user.id],\n                });\n            }\n            return false;\n        });\n    }\n\n    close = () => {\n        this.setState({\n            visible: false,\n        });\n    }\n\n    upgradeZIndex = () => {\n        this.setState({\n            zIndex: WindowManager.getNextZIndex(),\n        });\n    }\n\n    //TypeScript or React bug: KeyboardEvent is not a generic type\n    handleKeyDown = (evt: any) => {\n        const event = evt as KeyboardEvent;\n        const isEnter = event.which === 13;\n        const { currentActiveChatId, text } = this.state;\n        if (isEnter) {\n            event.preventDefault();\n            if (text.length > 0) {\n                BobbaEnvironment.getGame().uiManager.doRequestSendChatMessage(currentActiveChatId, text);\n            }\n\n            this.setState({\n                text: '',\n            });\n        }\n    }\n\n    handleChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n        this.setState({\n            text: event.target.value,\n        });\n    }\n\n    requestFollowFriend = () => {\n        const { currentActiveChatId } = this.state;\n        BobbaEnvironment.getGame().uiManager.doRequestFollowFriend(currentActiveChatId);\n    }\n\n    requestCloseChat = () => {\n        const { activeChats, currentActiveChatId } = this.state;\n        const newChats = activeChats.filter(value => {\n            return value.id !== currentActiveChatId;\n        });\n        if (newChats.length === 0) {\n            this.setState({\n                activeChats: newChats,\n                currentActiveChatId: 0,\n                visible: false,\n            });\n        } else {\n            this.setState({\n                activeChats: newChats,\n            });\n            BobbaEnvironment.getGame().uiManager.doRequestStartChat(newChats[0].id);\n        }\n    }\n\n    handleTabChange = (userId: number) => () => {\n        const { notifications } = this.state;\n        if (notifications.includes(userId)) {\n            this.setState({\n                notifications: notifications.filter(friend => friend !== userId),\n            });\n        }\n        BobbaEnvironment.getGame().uiManager.doRequestStartChat(userId);\n    }\n\n    generateFriendTab(friend: User) {\n        const { currentActiveChatId, notifications } = this.state;\n        let className = friend.id === currentActiveChatId ? 'selected' : '';\n        if (notifications.includes(friend.id)) {\n            className = 'alert';\n        }\n        return (\n            <button onClick={this.handleTabChange(friend.id)} key={friend.id} className={className}>\n                <img src={\"https://www.habbo.com/habbo-imaging/avatarimage?figure=\" + friend.look + \"&direction=2&head_direction=2&size=s&headonly=1\"} alt={friend.name} />\n            </button>\n        );\n    }\n\n    handleOffsetChange = (increment: number) => () => {\n        const { currentTabOffset } = this.state;\n        this.setState({\n            currentTabOffset: currentTabOffset + increment\n        });\n    }\n\n    generateLeftArrow(): ReactNode {\n        const { currentTabOffset } = this.state;\n        if (currentTabOffset !== 0) {\n            return (\n                <button onClick={this.handleOffsetChange(currentTabOffset === 2 ? -2 : -1)} className=\"arrow\">\n                    <img src=\"/images/messenger/prev.png\" alt=\"\" />\n                </button>\n            );\n        }\n        return <></>;\n    }\n\n    generateRightArrow(): ReactNode {\n        const { activeChats, currentTabOffset } = this.state;\n        if (activeChats.length - currentTabOffset !== 6) {\n            return (\n                <button onClick={this.handleOffsetChange(currentTabOffset === 0 ? 2 : 1)} className=\"arrow\">\n                    <img src=\"/images/messenger/next.png\" alt=\"\" />\n                </button>\n            );\n        }\n        return <></>;\n    }\n\n    generateMainTabs(): ReactNode {\n        const { activeChats, currentTabOffset } = this.state;\n\n        if (activeChats.length > 7) {\n            const friends: ReactNode[] = [];\n            let friendsToShow = 7;\n            if (currentTabOffset === 0) {\n                friendsToShow--;\n            }\n            if (activeChats.length - currentTabOffset === 6) {\n                friendsToShow--;\n            } else if (currentTabOffset > 0) {\n                friendsToShow -= 2;\n            }\n            for (let i = 0; i < friendsToShow; i++) {\n                friends.push(this.generateFriendTab(activeChats[i + Math.max(0, currentTabOffset)]));\n            }\n            return (\n                <>\n                    {this.generateLeftArrow()}\n                    {friends}\n                    {this.generateRightArrow()}\n                </>\n            );\n        }\n\n        return activeChats.map(friend => this.generateFriendTab(friend));\n    }\n\n    generateChats(): ReactNode {\n        const { messages } = this.state;\n        let key = 0;\n        return messages.map(chat => {\n            let className = '';\n            if (chat.type === MessengerMessageType.Me) {\n                className = 'me';\n            }\n            if (chat.type === MessengerMessageType.Info) {\n                className = 'info';\n            }\n            return (\n                <p key={key++} className={className}>\n                    {chat.text}\n                </p>\n            );\n        });\n    }\n\n    render() {\n        const { visible, zIndex, text, activeChats, currentActiveChatId } = this.state;\n        if (!visible || activeChats.length === 0) {\n            return <></>;\n        }\n\n        let title = \"Chat\";\n        const activeFriend = activeChats.find(friend => friend.id === currentActiveChatId);\n        if (activeFriend !== undefined) {\n            title = activeFriend.name;\n        }\n\n        return (\n            <Draggable defaultClassName=\"chat\" handle=\".title\" onStart={() => this.upgradeZIndex()} onMouseDown={() => this.upgradeZIndex()}>\n                <div style={{ zIndex }}>\n                    <button className=\"close\" onClick={this.close}>\n                        X\n                    </button>\n                    <h2 className=\"title\">\n                        {title}\n                    </h2>\n                    <div className=\"main_tab_container\">\n                        {this.generateMainTabs()}\n                    </div>\n                    <div className=\"actions_container\">\n                        <button onClick={this.requestFollowFriend}>\n                            <img src=\"/images/messenger/follow_friend.png\" alt=\"Follow friend\" />\n                        </button>\n                        <button onClick={this.requestCloseChat} className=\"close_chat\">\n                            <img src=\"/images/messenger/close.png\" alt=\"Close\" />\n                        </button>\n                    </div>\n                    <div className=\"wrapper\" ref={this.chatWrapper}>\n                        {this.generateChats()}\n                    </div>\n\n                    <form>\n                        <textarea value={text} onKeyDown={this.handleKeyDown} onChange={this.handleChange} rows={2} cols={10}></textarea>\n                    </form>\n                </div>\n            </Draggable>\n        );\n    }\n}","import React, { Component } from 'react';\nimport Footer from './footer/Footer';\nimport './App.css';\nimport RoomInfo from './roominfo/RoomInfo';\nimport TopBar from './header/TopBar';\nimport Header from './header/Header';\nimport SplashScreen from './splash/SplashScreen';\nimport ItemInfoContainer from './iteminfo/ItemInfoContainer';\nimport BobbaEnvironment from '../bobba/BobbaEnvironment';\nimport Loading from './splash/Loading';\nimport ErrorSplash from './splash/ErrorSplash';\nimport AvatarInfo from '../bobba/imagers/avatars/AvatarInfo';\nimport { canvas2Image } from './misc/GraphicsUtilities';\nimport ChangeLooks from './changelooks/ChangeLooks';\nimport Inventory from './inventory/Inventory';\nimport Catalogue from './catalogue/Catalogue';\nimport Notifications from './notifications/Notifications';\nimport Navigator from './navigator/Nav';\nimport CreateRoom from './createroom/CreateRoom';\nimport Messenger from './messenger/Messenger';\nimport Chat from './messenger/Chat';\n\ntype UserData = {\n    id: number,\n    name: string,\n    motto: string,\n    look: string,\n    image?: HTMLImageElement,\n};\nconst initialUserData = {\n    id: -1,\n    name: '',\n    motto: '',\n    look: '',\n};\n\ntype BobbaUIProps = {};\ntype BobbaUIState = {\n    gameLoaded: boolean,\n    loggedIn: boolean,\n    error: string,\n    initialized: boolean,\n    loadingInfo: string,\n    userData: UserData,\n};\nconst initialState = {\n    gameLoaded: false,\n    loggedIn: false,\n    error: '',\n    loadingInfo: '',\n    userData: initialUserData,\n    initialized: false,\n};\nclass BobbaUI extends Component<BobbaUIProps, BobbaUIState> {\n    constructor(props: BobbaUIProps) {\n        super(props);\n        this.state = initialState;\n    }\n\n    componentDidMount() {\n        try {\n            const game = BobbaEnvironment.getGame();\n\n            game.uiManager.onLoadPost = ((text: string) => {\n                this.setState({\n                    loadingInfo: text,\n                });\n            });\n\n            game.loadGame().then(() => {\n                this.setState({\n                    gameLoaded: true,\n                });\n\n                game.uiManager.onGameStop = (() => {\n                    this.setState({\n                        error: 'Game has stoppped!',\n                    });\n                });\n\n                //AUTO LOGIN \n                //game.uiManager.doLogin('Jose', 'hd-190-10.lg-3023-1408.ch-215-91.hr-893-45');\n            }).catch(err => {\n                let errorMessage = err;\n\n                if (err instanceof Error) {\n                    errorMessage = err.message;\n                }\n\n                this.setState({\n                    gameLoaded: false,\n                    loggedIn: false,\n                    error: errorMessage,\n                });\n            });\n\n            game.uiManager.onSetUserData = (user => {\n                game.avatarImager.generateGeneric(new AvatarInfo(user.look, 2, 2, [\"std\"], \"std\", 0, true, false, \"n\"), false).then(canvas => {\n                    this.setState({\n                        loggedIn: true,\n                        userData: {\n                            id: user.id, name: user.name, look: user.look, motto: user.motto, image: canvas2Image(canvas),\n                        }\n                    });\n                });\n                //AUTO NAV\n                //game.uiManager.doOpenNavigator();\n            });\n\n            this.setState({\n                initialized: true,\n            });\n\n            //debug\n            const win: any = window;\n            win.mainGame = game;\n        }\n        catch (err) {\n            let errorMessage = err;\n\n            if (err instanceof Error) {\n                if (err.message.includes(\"WebGL unsupported\")) {\n                    errorMessage = \"Please enable hardware acceleration.\";\n                }\n            }\n\n            this.setState({\n                error: errorMessage,\n            });\n        }\n\n    }\n\n    updateChatFocuser = (handler: () => void) => {\n        const game = BobbaEnvironment.getGame();\n        game.uiManager.onFocusChat = (handler);\n    }\n\n    render() {\n        const { gameLoaded, error, loggedIn, loadingInfo, userData, initialized } = this.state;\n\n        let mainPage = <></>;\n        if (error !== '') {\n            mainPage = <ErrorSplash errorText={error} />\n        } else if (!gameLoaded) {\n            mainPage = <Loading loadingText={loadingInfo} />\n        } else if (!loggedIn) {\n            mainPage = <SplashScreen />;\n        }\n\n        if (initialized) {\n            return (\n                <>\n                    <Header />\n                    <TopBar />\n                    {mainPage}\n                    <ChangeLooks />\n                    <Catalogue />\n                    <Inventory />\n                    <Navigator />\n                    <CreateRoom />\n                    <Messenger />\n                    <Chat />\n                    <Notifications />\n                    <RoomInfo />\n                    <ItemInfoContainer />\n                    <Footer focuser={this.updateChatFocuser} headImage={userData.image} />\n                </>\n            );\n        }\n\n        return mainPage;\n    }\n}\n\nexport default BobbaUI;\n","import React from 'react';\nimport { hydrate, render } from \"react-dom\";\nimport BobbaUI from './ui/BobbaUI';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement != null && rootElement.hasChildNodes()) {\n  hydrate(<BobbaUI />, rootElement);\n} else {\n  render(<BobbaUI />, rootElement);\n}\n"],"sourceRoot":""}